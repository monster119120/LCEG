{"pred": "\t\t\t\tfor ( int j = 0; j < m_Participants[i].Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = (DuelPlayer)m_Participants[i].Players[j", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tA_ = A.copy()\n\t\t\tA_.add_edge(e_u, e_v, **data.copy())\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "\n#! /usr/bin/env python\n# Last Change: Sun Dec 14 07:00 PM 2008 J\n\"\"\"Test for the sndfile class.\"\"\"\nfrom os.path import join, dirname\nimport os\nimport sys\nfrom numpy", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t}\n\t\t\tpublic Object unmar", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "/**************************************\n*Script Name: Staff Runebook          *\n*Author: Joeku                        *\n*For use with RunUO 2.0 RC2           *\n*Client Tested with: 6.0.9.2          *\n*Version: 1", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "   s.println(\"Certificate chain length: \" + messageLength());\n        for (byte[] b : encodedChain) {\n            s.println(\"Certificate: \" + b);\n        }\n        s.println(\"***\");\n    }\n}\n/*\n * CertificateRequest ...", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "\n    public synchronized static JESpace getSpace (String name)\n    {\n        JESpace sp = (JESpace) spaceRegistrar.get (name);\n        if (sp == null) {\n            sp = new JESpace (name, path);\n            space", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\ndef find_common_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a list of common elements between the two lists.\n    \n    Args:\n        list1 (list): The first list of elements.\n        list2 (list", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       request = SimpleXMLElement(xml, namespace=self.namespace, prefix=self.prefix)\n        if args:\n            items = args.items()\n        elif args is None:\n            items = [('value', None)]\n        else:\n            items = []\n       ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "   self.webview.execute_javascript(\"setRepeated('%s')\" % status_id)\n    self.webview.execute_javascript(\"setRepeated('%s')\" % status_id)\n    self.webview.execute_javascript(\"setRepeated", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   def action_copy_from_sftp_to_ftp(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker copy_from_sftp_to_ftp %s %s\", pprint.", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   return CompositeX509KeyManager(key_managers)\n    return CompositeX509TrustManager(trust_managers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Finds the forward to the domain admin page.\n     *\n     * @param mapping The action mapping with possible destinations.\n    ", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\n\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\tif (option1) {\n\t\t\t\t\t//if option 1 is checked\n\t\t\t\t\t//change weight in database\n\t\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "\n        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\tfirms = loadFromFile();\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)\n\t\t\t{\n\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\n\t\tPreferenceNode generalNode = new PreferenceNode(\"generalPreferences\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\t\t\t\tif (m_Owner.SpellTarget != null)\n\t\t\t\t{\n\t\t\t\t\tm_Owner.SpellTarget = null;\n\t\t\t\t\tm_Owner.Caster.SendAsciiMessage(\"Target cancelled\");\n\t\t\t", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "   self._flushing = True\n    self._finalize_loaded(states)\n    self._flushing = False\n    return states\n    def _finalize_loaded(self, states):\n        \"\"\"Finalize the loading of a set of objects.\n        This method is called after a", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\n\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getFieldName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   return method(self, *args, **kwargs)\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            if self.request.method", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t\t\n\t\tprotected internal override void RenderContents (HtmlTextWriter writer)\n\t\t{\n\t\t\tbase.RenderContents (writer);\n\t\t\tUpdateViewVisibility ();\n\t\t}\n\t\t\n\t\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wigle_downloader = WigleDownloader(user=user, password=password, coordfile=coordfile, outpath=outpath)\n    wigle_downloader.run()\n    wigle_downloader.download()\n    wigle_download", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   if build == 'release':\n        builds = firefox_details.firefox_primary_builds\n    elif build == 'beta':\n        builds = firefox_details.firefox_beta_builds\n    else:\n        builds = firefox_details.firefox_aurora_build", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\ndef get_data(url):\n    \"\"\"\n    Get data from a given URL.\n\n    Args:\n        url (str): The URL to fetch data from.\n\n    Returns:\n        dict: A dictionary containing the data fetched from the URL.\n    \"\"\"\n   ", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "\n    }\n}\n\nPlease complete the code given below. \nusing System.Collections.Generic;\nusing System.Linq;\nusing AutoJIT.Contrib;\nusing AutoJIT.CSharpConverter.ConversionModule.Helper;\nusing AutoJIT.CSh", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "   self._update_partition_id(0)\n    self._assert_children(2)\n    # Set to second group configuration.\n    self._update_partition_id(1)\n    self._assert_children(2)\n    # Set to third group configuration.\n    self", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "\n        } catch (Exception e) {\n            throw new DocumentException(e.Message, e);\n        }\n        if (embedded) {\n            writer.AddFont(fileName, fontType, fontBaseType, fontType2, fontType3, fontType4, fontType5", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = maxDepth;\n\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\n    return new ListenableFutureTask<>(callable);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\n    }\n\n    /**\n     * When the input field loses focus, the command history is cleared.\n     *\n     * {@inheritDoc}\n     */\n    @Override\n    public void keyPressed(final KeyEvent ke) {\n        SwingUtilities.invokeL", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\npackage maejavawrapper;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.List;\nimport maejava.BoneVector;\nimport maejava.ColumnDefinitionVector;\nimport maejava.ETimeUnit;\nimport", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "\n            base.Render(writer);\n            }\n        }\n    }\n}\n1. The number of students in the class is 100.\n2. The number of students who like math is 50.\n3. The number of students who like science is 30", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "\n    return super.toString() + \"\n\" + \"probability=\" + probability + \"\n\" + \"scopes=\" + scopes;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   if sel_dim:\n        widget_dim.observe(on_widget_dim_change, names='value')\n        widget_x.observe(on_widget_x_change, names='value')\n        widget_y.observe(on_widget_y_change", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (rootFolder.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"rootFolder\");\n                }\n                if (rootFolder.IsNullOrWhiteSpace())\n                {\n                    throw new ArgumentNullException(\"rootFolder\");\n                }\n                if", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\n\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "   if viewtype.lower() == 'listview':\n        objcommentslist = pdt.getDiscussionFor(uid).objectValues()\n        replydict = []\n        jsondata = getjsondata(self.context,replydict,self.context.portal_url(),", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": voice enabled for parcel\",\n                    //                  scene.RegionInfo.", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew){\n\t\t\t\tPayPeriods.Insert(PayPeriodCur);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_field(header)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_headings['Time", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context, data_dict):\n    user = context['user']\n    if not user:\n        return {'success': False, 'msg': _('Valid", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint outcome = example.getValue(predictionAttribute);\n\t\t\t\t// setting outcome\n\t\t\t\texample.setValue(outcomes, parentIndex);\n\t\t\t\t// setting confidences\n\t\t\t\tdouble confidence = Math.pow(confidences", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "\n   } catch (Exception e) {\n      e.printStackTrace();\n   }\n}\n\npackage com.example.android.sunshine.app;\n\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tif (existingRequired) {\n\t\t\treturn ValidationResults.SAMPLE_NOT_FOUND;\n\t\t} else {\n\t\t\treturn ValidationResults.SUCCESS;\n\t\t}\n\t}\n\tpublic ValidationResults checkAccessionNumberValidity", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif(beans != null)\n\t\t\tfor(int x = 0; x < beans.length; x++)\n\t\t\t{\n\t\t\t\tcoll.add((ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionList", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " return S_OK( { 'plotName' : plotName, 'plotType' : typeName, 'plotGrouping' : grouping, 'pinDates' : pinDates } )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (IsTraitDisabled)\n\t\t\t\treturn;\n\t\t\tif (IsTraitDisabled)\n\t\t\t\treturn;\n\t\t\tif (IsTraitDisabled)\n\t\t\t\treturn;\n\t\t\tif (IsTra", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\n    return plan;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.fBinary", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "   def test_user_with_cobrand_admin(self):\n        admin = self.make_user('admin')\n        admin.is_superuser = True\n        admin.save()\n        cobrand = Cobranding.objects.create(user=self.user)", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"keep_tempdir is\", _keep_temp", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif entry[0] == newListIndex:\n\t\t\t\t\tcurrentListEntry = entry\n\t\t\t\t\tcurrentListIndex = entry[0]\n\t\t\t\t\tself.oldlist[currentListIndex] = entry\n\t\t\t\t\tself.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "\n    public override Rectangle BarcodeSize {\n        get {\n            float fontX = 0;\n            float fontY = 0;\n            if (font != null) {\n                if (baseline > 0)\n                    fontY = baseline - font.GetFont", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "\n    return results;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "   sample_points = [\n        (\"longitude\", x_points),\n        (\"latitude\", np.arange(-90, 90, 2)),\n    ]\n    sampled_cube = traj_interpolate(test_cube, sample_points)", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToText());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            byte[] bytes = currPacket", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   print '=============================================================================='\n    print '=============================================================================='\n    print '=============================================================================='\n    print '=============================================================================='\n    print '=============================================================================='\n    print '================", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "\nnamespace Tripodmaps\n{\n    partial class DummySolutionExplorer\n    {\n        /// <summary>\n        /// Required designer variable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n       ", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\ndef nullFunction( functionName, dll=None, resultType=ctypes.c_int, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n    \"\"\"Create a null function for a given name\n    \n    This is a placeholder function that", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n    private void writeFileEmptyStreams(final DataOutput header) throws IOException {\n        boolean hasEmptyStreams = false;\n        for (final SevenZArchiveEntry entry : files) {\n            if (!entry.hasStream()) {\n                hasEmptyStreams = true;\n               ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n    public void paintComponent(Graphics g)\n    {\n        if (started)\n        {\n            int width  = getWidth();\n            double maxY = 0.0; \n            Graphics2D g2 = (Graphics2D) g;\n            g2.", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    }\n}\n\n#endregion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n    public static sega_decryptPtr sega_decrypt77 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {\n            /*unsigned*/\n            int i = 0;\n            /*unsigned*/", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "   return self._course_key.make_locator()\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        self._course_key = CourseKey.from_string(self._course_dict['org'], self._course_dict", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\n\t\tif ( splitNumber[0].equals(\"100\") ) {\n\t\t\tchance = 100;\n\t\t} else if ( splitNumber[0].equals(\"99\") ) {\n\t\t\tchance = 99;\n\t\t}", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n   ", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 36);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive.add_string(content=\"\\n\".join(self.policy.get_msg()),\n                                dest='msg.txt')\n        self.archive.add_string(content=\"\\n\".join(self.policy.get_msg()),\n                                dest='msg", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "\n    } catch (MessageImportInvalidPathException e) {\n        parent.alertError(parent, \"Invalid path: \" + e.getMessage());\n        setVisible(true);\n        return;\n    } catch (MessageWriterException e) {\n        parent.alertError(parent, \"", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\n\t\t       \t\tif (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn layer;\n    \t} catch (Exception e)", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "\n    if (currentSession != null) {\n        user = currentSession.getActiveUser();\n        userProfilePic = currentSession.getUserProfilePicture();\n        userProfilePicID = userProfilePic.getId();\n        if (user != null) {\n            connected", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\n\t\tfor (int i=0; i<emotions.length; i++)\n\t\t\tif (emotions[i].name.equals(emotionName)){\n\t\t\t\tcurrentEmotion = emotions[i];\n\t\t\t\temotions[i", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "\n    def test_to_xml(self):\n        \"\"\"Test exporting as an XML string.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test xml\n        self.", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Lat = phi1\n    Long = x\n    #if (NorthernHemisphere == 1)\n    #    Long = Long + 180\n    #endif\n    return\n#void UTMtoLL(int ReferenceEllipsoid, const double U", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "   form = ReportUserForm(request.POST)\n    if form.is_valid():\n        report = form.save(commit=False)\n        report.user = request.user\n        report.user = user\n        report.save()\n        messages.success(request, \"Report", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def page_title(self):\n        return \"Add series\"\n    @property\n    def page_description(self):\n        return \"Add a new series to this project\"\n    @property\n    def next_url(self):\n        return canonical_url(", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic void ApplyTo(Form form, string strTypeName)\n\t\t{\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "\n    public byte[] writeByteArray()\n    {\n        int size = getSize();\n        byte[] arr;\n        if (size == 0)\n        {\n            arr = new byte[0];\n        }\n        else\n        {\n            long temp = ID3Tags", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   return [re.compile(regex) for regex in positional_tags]\n    return new_positional_tags_list\n    return positional_tags\n    return positional_tags\n    return positional_tags\n    return positional_tags\n    return positional_tags\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.set_alias('session', collection)\n\t\tcollection = SecretCollection(self, \"session\", label=\"Session Keyring\", locked=False)\n\t\tself.set_alias('session', collection)\n\t\tcollection = SecretCollection(self, \"session\", label=\"Session", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\n            }\n            else\n            {\n                index = this.AddCraft(typeof(EnchantedSwitch), 1044294, 1072893, 45.0, 95.0, typeof(BlankScroll), 1", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    self._preserved_exc = exc\n    self.app.do_teardown_request(exc)\n    _request_ctx_stack.pop()\n    if self.preserved:\n        self.app.do_teardown_request(exc)", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "\n    return result;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   # Compute angles\n    phi = np.arctan(angles / (src_radius + det_radius))\n    theta = phi * 2\n    # Compute lower and upper bound\n    source_to_line_distance = src_radius + src_radius * np", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\n\n\n\n\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn type.ToString (fmt) + \" \" + unit.ToString (fmt);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (Thread.CurrentThread.CurrentCulture);\n\t\t}\n\t\t\n\t\tpublic", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar obj2 = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(obj2.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(obj2.Properties[0].Value.Type", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++) {\nfor (int h = 0; h < height; h++) {\nfor (int w = 0; w < width; w++) {\nfor (int h = 0; h < height; h++) {\n", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"imaging\"][\"p", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\n\t\t\treturn performDownload();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t * @return true/", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\n\t\t\tOpenGL.glDeleteVertexArrays(1, vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuffers(1, ref vertexBuffer);\n\t\t\tOpenGL.CheckGLError();\n\t\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   return self._project_cov_mat(\n        self.x_data_cov_mat, self.y_data_cov_mat, self.x_model, self.parameter_values)\n        return self._project_cov_mat(\n            self.x_data_cov", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "\n    return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "\n    if (walrusObject.getOwnerId() != null) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setName(name);\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);\n   ", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.TopAttach = ((uint)(1));\n\t\t\tw10.BottomAttach = ((uint)(2));\n\t\t\tw10.LeftAttach = ((uint)(3));\n\t\t\tw10.RightAttach = ((uint", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "   self.system['TOTALSTATUS'] = self.totalstatus\n    self.system['STATUS'] = self.status\n    self.system['SCRIPTSTATUS'] = self.scriptstatus\n    self.system['PARSTATUS'] = self.parstatus\n    self.system['UNP", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    public override Builder MergeFrom(pb::IMessage other) {\n      if (other is SendInvitationRequest) {\n        return MergeFrom((SendInvitationRequest) other);\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "\n    public void getQuad(int i, Vector3f[] vertices) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices[x] ==", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "\n    result = CmsStringUtil.splitAsList(showDateData, ';');\n        if (result.size() > 0) {\n            result.addAll(Arrays.asList(COLUMNS_SORTABLE_LIST));\n        }\n        return result;\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "   }\n    //--------------------------------------------------------------------------------\n    protected override void OnPaintBackground(PaintEventArgs e)\n    {\n      e.Graphics.SmoothingMode = SmoothingMode.HighQuality;\n      e.Graphics.TextRenderingHint = System.Drawing.Text.Text", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "\n            }\n            if (lastUser != string.Empty)\n            {\n                Users.Add(lastUser);\n            }\n            if (Users.Count > 0)\n            {\n                foreach (string user in Users)\n                {\n                    SendEmailForUser(user", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "\n    }\n\n    public partial class TFrmConferenceMasterSettings\n    {\n        /// PartnerKey for selected conference to be set from outside\n        public static Int64 FPartnerKey {\n            private get; set;\n        }\n        private void InitializeManualCode()", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn Enabled && CopyCustom;\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir;\n\t\t}\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\treturn confDir;\n\t\t}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n    public void checkBugInstance(BugInstance bugInstance) {\n        for (Iterator<BugAnnotation> i = bugInstance.annotationIterator(); i.hasNext();) {\n            BugAnnotation bugAnnotation = i.next();\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\n\tpublic class CookedBird : Food\n\t{\n\t\t[Constructable]\n\t\tpublic CookedBird() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic CookedBird( int amount )", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "if (eFarm.MinionsHit >= 2)\n{\nE.Cast(eFarm.Position);\n}\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if (ManaManager.HasEnoughMana(Menu", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "   return self.warnings(region, 'pollen')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "   self.assertEquals(field_def['rules']['marc'][1]['function'],\n                      field_model_def['rules']['marc'][1]['function'])\n\n\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Jun ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "\n    public static void RunQueryAssertion(RegressionEnvironment env, RegressionPath path, string epl, string[] fields, object[][] expected)\n\n    public static void MakeSendSupportBean(RegressionEnvironment env, string theString, int intPrimitive, long longPrimitive)\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   return self\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    def _get_view_id(self, cr, uid, view_id, context=None):\n        \"\"\" Return the id of the view to which the given view is related.\n        \"\"\"\n        return self.pool['ir.ui.view'].browse(cr, u", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "\n    if (oldValue != null) {\n        oldValue.dispose();\n    }\n    value = createHTMLView(c, text);\n    c.putClientProperty(BasicHTML.propertyKey, value);\n    c.putClientProperty(htmlDisable, Boolean.TRUE", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/\" + filename,\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlloader = namedQueryReference;\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQueryReference2)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\n\t\t\twriter.Write( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState pl in m_Members )\n\t\t\t{\n\t\t\t\tpl.Serialize( writer );\n\t\t\t}\n\t\t\tm_Faction.", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "\n    if (checkTargetConditions(invoke, targetMethod)) {\n        InliningUtil.logNotInlined(invoke, inliningDepth(), targetMethod, \"it is a polymorphic method call and at least one invoked method cannot be inlined\");\n        return null;\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "   self.pytest_command = \"pytest {} --pr {} --prtester {} --trackerbot {} --auto-gen-test {} --sprout-username {} --sprout-password {} --sprout-description {} --log-path {} --artifactor-dir {} --log-", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "\n    if (value != null) {\n        effects.replaceAtUsages(node, value);\n        addScalarAlias(node, value);\n        deleted = true;\n    } else {\n        state.addCacheEntry(identifier, node);\n    }\n\nThe code", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "\n    public void handleCallSessionEvent(int event) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonWallMapGump(from as PlayerMobile));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "\n# -*- coding: utf-8 -*-\n#\n# This file is part of Invenio.\n# Copyright (C) 2014, 2015 CERN.\n#\n# Invenio is free software; you can redistribute", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   return self.module.get(user) is not None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    else:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput'", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\n\t\t\tif(uri.getPath() != null && uri.getPath().startsWith(PLUGINS_PREFIX))\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n\t\t\tif(uri.getQuery() != null)\n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "   gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n    msg = yield self.run_fake_single_build(gsp, buildResult, expWarning=False)\n    result = makeReviewResult(msg,\n                              (GER", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "\n    public void visit(AnnotatedTypeMirror type, Map<String, AnnotationMirror> r2) {\n        if (r2 != null && !r2.isEmpty()) {\n            r1 = r2;\n        }\n        super.visit(type", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# <pep8 compliant>\ndef active_node_material(mat):\n    # TODO, 2.4x has a pipeline section, for 2.5 we need to communicate\n    # which settings from node-materials are used\n    if mat is not None:\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_latch1 = map16.Latch1;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\n/*************************************************************************\n *\n *  The Contents of this file are made available subject to the terms of\n *  the BSD license.\n *\n *  Copyright 2000, 2010 Oracle and/or its affiliates.\n * ", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn SizeHeightToFitWithMin (min, Frame.H);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMin (int min, int max)\n\t\t{\n\t\t\treturn SizeHeightToFitWithMin (min, max, Frame.", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "\n\"\"\"\nAnnouncementTwitterCrossPublication.objects.filter(pub_date__gte=timezone.now()).delete()\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "   cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight_group WHERE groupID=?\n                 ORDER BY sdate, stime ''', (i,))\n    row_count", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "   conn.table('projects').get(project_id).update({'last_snapshot': timestamp})\n    conn.table('projects').get(project_id).update({'last_snapshot': timestamp})\n    conn.table('projects').get(project_id).update({'", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tMsg(\"I'm not sure what you're talking about.<br/>I'm just a shepherd.<br/>I don't know anything about that.\");\n\t\t\tbreak;\n\t\t\tcase \"farm\":\n\t\t\t\tMsg(\"I'm", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "   return sge_cmd_arg\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\n    public static string Generate()\n    {\n        Builder.Clear();\n        GenerateHeader();\n        GenerateGame();\n        GenerateOverview();\n        GenerateHeroes();\n        GenerateAssemblies();\n        GenerateFeatures();\n        Generate", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   self.download(premium_url, post={\"download\": \"normal\"})\n    self.logDebug(self.req.http.lastEffectiveURL)\n    self.thread.m.reconnecting.wait(3)  # Ease issue with later downloads appearing", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\treturn path[0];\n\t\t\t}\n\t\t\t// If we couldn't find any harvestable resources, search from the refinery.\n\t\t\tif (harv", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "   if restart_dhcp != \"0\":\n        rc = utils.subprocess_call(self.logger, \"dhcpd -t -q\", shell=True)\n        if rc != 0:\n           self.logger.error(\"dhcpd -t failed\")", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "\n    return Event.newBuilder();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (context.Suffix != PpmContext.ZERO)\n            {\n                PpmContext currentContext = context.Suffix;\n                PpmState[] currentStates = new PpmState[MAXIMUM_ORDER];\n                uint currentStateIndex = 0", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "\n        /// <summary>\n        /// The Signed Long String VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false, false, true, 16, true, ' ', 1,\n           ", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\n\t\t\tsessionValuesArray.Add(tFull[0] + \":\" + tFull[1]);\n\t\t}\n\t\t//now we have all the sessions that have this test type\n\t\t//now we have to delete the test type\n\t\t//this is a bit tricky", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   def test_smaller_than_file_at_end(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (int", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.plot(cr['combined'][app][VC]['durations'],\n             label='%s, %s, individual %ss' % (app, test, stat))\n    plt.plot(cr['combined'][app][VC]['stats']['intervals'][0", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/UID switches when current effective GID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 1, 0, 0, [], [])\n        self._testUID", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\npackage com.entrepidea.swing.components.checkbox;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Graphics;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemListener;\nimport", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Value value) {\n        assert kind.isPrimitiveOfSameSizeAs(value.kind());\n        if (offset == lengthOffset) {\n            mirror.writeArrayLength(value);\n            return", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "\n    }\n\n    public abstract class AssemblyReferenceBase : FileReferenceBase {\n        protected AssemblyReferenceBase(XmlElement xmlDefinition, ReferencesResolver referencesResolver, ProjectBase parent, GacCache gacCache) : base(xmlDefinition, referencesResolver, parent, gacCache) {\n        }", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": " }\n}\npackage org.netlib.lapack;\nimport org.netlib.blas.Dcopy;\nimport org.netlib.err.Xerbla;\nimport org.netlib.util.doubleW;\nimport org.netlib.util.intW;", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Transition: \" + _current_transition.ToString() + \"\\n\";\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateBy", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "\n            #endregion Lucian\n            #region Lulu\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lulu\",\n                    SpellName = \"LuluQ\",\n                    Slot = SpellSlot.Q,", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\ndef get_all_users():\n    \"\"\"\n    Returns a list of all users in the system.\n\n    Returns:\n        list: A list of all users in the system.\n    \"\"\"\n    return [\n        {\n            \"id\": \"user1\",\n            \"username", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "   self.assertRaises(\n        OSError,\n        lambda: subprocess.Popen(\n            ['/sbin/modinfo', '-d', 'somemodule'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new InvalidOperationException(\"PropertiesName must be set before StartCoreServices\");\n\t\t\tif (configDirectory == null)\n\t\t\t\tthrow new InvalidOperationException(\"ConfigDirectory must be set before StartCoreServices\");\n", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\n\t\tinternal void SetConstraintCollection (ConstraintCollection collection)\n\t\t{\n\t\t\t_constraintCollection = collection;\n\t\t}\n\t\tinternal void SetTable (DataTable table)\n\t\t{\n\t\t\tTable = table;\n\t\t}\n\t\tinternal void", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "self.verticalLayout_2.addWidget(self.settings_ui_groupbox)\nself.verticalLayout_2.addWidget(self.settings_kernels_groupBox)\nself.verticalLayout_2.addWidget(self.settings_project_groupbox)\nself.vertical", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n    @Override\n    public void onResume() {\n        LocalBroadcastManager bm = LocalBroadcastManager.getInstance( getActivity() );\n        bm.registerReceiver( mReceiver, mFilter );\n        Bundle args = getArguments();\n        String stationId = args", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tQueryStatistics stats = s.Statistics;\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t}\n\t\t\tAssert.AreEqual(1, Sfi.Statistics.QueryExecutionCount);\n\t\t}\n\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue |= (uint)p[iBufferIndex];\n                uiCRCITTSum = (uiCRCITTSum >> 8) ^ (ulong)((ulong)uiByteValue ^ (ulong)((ulong)uiCRCITTSum & ", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\n\t\treturn 10.0F;\n\nError:\n\njava.lang.NullPointerException\n\t\treturn 10.0F;\n\n\t\treturn 10.0F;\n\n\t\treturn 10.0F;\n\n\t\treturn", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "\n    public IHyperlinkDetector[] getHyperlinkDetectors(\n            ISourceViewer sourceViewer) {\n        CeylonParseController controller = \n                getParseController();\n        if (controller==null) {\n            return new IHyperlinkDetector[]", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\nself.l.addWidget(Object3DAspect(self))\nself.l.addWidget(Object3DScale(self))\nself.l.addWidget(Object3DPrivateInterface(self))\nself.", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = false;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "\nif (result == null)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+fractionWithAmount[i][j][0]+\"\\t\"+fractionWithAmount[i][j][1]+\"\\t\"+fractionWithAmount[i][j][2]+\"\\t\"+fractionWithAmount[", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n            }\n            //if the session was not created then the API session was not created successfully\n            else\n            {\n                //session failed to be created\n                Console.WriteLine(\"FAIL - API session failed to be created. Reason: \" + endpointResponse.result_message + \" Error", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tthrow new NotImplementedException ();\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTResultType {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "\n    @Test\n    public void validate_cant_read_when_readNotInACL() throws PermissionDeniedException {\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final int ownerId = new Random().nextInt(", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\tVector2 scaled = v.ScaleFactor (viewport);\n\t\t\treturn scaled;\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale)\n\t\t{\n\t\t\tVector2", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   def __eq__(self, other):\n        if type(self) != type(other):\n            return False\n        if self.packets != other.packets:\n            return False\n        if self.bytes != other.bytes:\n            return False\n        return True\n\n\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// sends a message to a specific client\n        /// </summary>\n        /// <param name=\"client_number\">client number", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "\n    } catch (Exception e) {\n        Log.e(sClassName, \"Exception while reading data\", e);\n        notifyDataReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Error, requestId, list);\n    }\n}\n\npackage eu.app", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " if is_method:\n    print '    object, method);'\n  else:\n    print '    callback);'\n  print '  return NULL;'\n  print '} // namespace ola'\n  print ''\n  # The multi-use helper function\n  print text", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(simplejson.dumps(items), content_type=\"application/json\")\n    \"\"\"\n    response = HttpResponse(mimetype='text/json')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "\n    public void test_searchServiceOptimizer_02() {\n        /*\n         * Note: DO NOT share structures in this test!!!!\n         */\n//        final VarNode s = new VarNode(\"s\");\n//        final VarNode p = new VarNode(\"p\");", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "   /// <summary>\n    /// The version of the assembly.\n    /// </summary>\n    public virtual Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }\n    #region IAssemblyReference Members\n    IAssembly IAssemblyReference.ResolvedAssembly", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var w = new DenseVector(input.Count);\n            var x = new DenseVector(input.Count);\n            var y = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var t = new DenseVector", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t} else {\n\t\t\tApfloat median1 = sortedNumbers[left];\n\t\t\tApfloat median2 = sortedNumbers[right];\n\t\t\tApfloat median = (median1.compareTo(median", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "   sample_count[edge.child, j] += 1\n    if sample_count[edge.child, j] > 0:\n        L[j] = edge.child\n        A[focal, j] = edge.child\n    v = parent[edge.child]", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for mapping in mapping_json['mappings']:\n            if mapping['type'] == 'csv':\n                result[mapping['type']] = csv_mapping.get_mapping(mapping)\n        return result\n    def _test_csv_mappings_projects(self, projects):", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.Command(\"addbot \" + slot.Key));\n\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic override bool Equals(object obj)\n\t\t{\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (obj", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "\"\"\"\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.IsEmpty)\n                return;\n            if (cluster.BoundaryCurve.IsEmpty)\n                return;\n            if (cluster.BoundaryCurve.IsEmpty)\n                return;\n            if (cluster.BoundaryCurve.", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\n#include <stdio.h>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "\n    return super.visitNewArray(node, p);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\n\t\tif (nbttagcompound != null)\n\t\t{\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 != null)\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = new ClassItem(Context, this, _returnNode, _returnNode.Attributes[TYPE_ATTRIB].Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type of the current comment", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\n\t\t\tmyTrackBar.AutoSize = false;\n\t\t\tmyTrackBar.Width = 200;\n\t\t\tmyTrackBar.Height = 250;\n\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\tAssert.", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t// assert result\n\t\t\tassertThat(result, is(empty()));\n\t\t\t// not touch", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\n\t\tif (this.isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.currentStmt == null) {\n\t\t\tif (other.currentStmt != null)\n\t\t\t\treturn false;\n\t\t}", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "\n    def test_args_invocation(self, popen, pipe_processor_loop):\n        ret = 0\n        out = 'out'\n        err = 'err'\n        pipe = _mock_pipe(popen, pipe_processor_loop, ret, out, err", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\n\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\n\t\tif ( (proxyThat == null) ||\n\t\t\t\t(proxyThat.getClass() != this.getClass()) ) {\n\t\treturn false;\n\t}\n\tif ( (this.getId() == null) ||\n\t\t\t(this.getId", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   # Calculate blob blob forces\n    multi_bodies_functions.calc_blob_blob_forces(bodies, LSolv.R_Mats, LSolv.R_Mats_inv, LSolv.R_Mats_inv_inv, L", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "   if cdata:\n        # We have a constant index, so we can remove the Subtensor\n        # if the index is the same as the shape of the input.\n        if cdata[0] == shape_of[0]:\n            # We don't need to copy over any", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "\nfrom django.contrib.auth.models import Group\nfrom common.forms import ModelFormWithHelper\nfrom common.helpers import SubmitCancelFormHelper\nfrom community.constants import COMMUNITY_ADMIN, COMMUNITY_PRESENCE_CHOICES\nfrom", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "   return fn(*arg, **kw)\n\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it is composed into a\n        core :class:`.Select` object.\n        This event is intended to allow changes to the query given::", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "   for key in data_model_changes:\n        self.update_filtered_data()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\n\t\t\tif (Method != null || Field != null || Sig != null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'type' attribute with 'method' or 'field' attribute for ld", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "   self.assertEqual(c.branch, \"1.0\")\n    def testMsgS6(self):\n        c = self.get(\"mail/syncmail.6\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "\n    if (termData == null) {\n        termData = new ArrayListValuedHashMap<>();\n        this.data.put(row.get(ID_KEY), termData);\n    }\n\n    for (Map.Entry<String, String> entry : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\n\t\tif(isPassiveFlower()) {\n\t\t\tNBTTagCompound cmp = stack.getTagCompound();\n\t\t\tpassiveDecayTicks = cmp.getInteger(TAG_PASSIVE_DECAY_TICKS);\n\t\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "\n    private float getIntrinsicCohesion(Community c) {\n        if (this.memorizedcohesion.containsKey(c))\n            return this.memorizedcohesion.get(c);\n        //will probably need an optimization for not computing again", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\n\t\t\t/*clean up*/\n\t\t\t\n\t\t\t/*clean up*/\n\t\t\t\n\t\t\t/*clean up*/\n\t\t\t\n\t\t\t/*clean up*/\n\t\t\t\n\t\t\t/*clean up*/\n\t\t\t\n\t\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(toDatable(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Converts a date into a Datable.\n  ", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.OnEvent += new EventHandler( OnSourceEvent );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.Hide", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "\n            ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            SpanConfig cfgObject = new SpanConfig(jsonData);\n            Status result = switchManager.addSpan(cfgObject);\n            if", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "   return rnd.nextInt(size);\n\nError:\njava.lang.NullPointerException\nat java.util.Random.nextInt(Random.java:369)\nat ome.testing.OMEData.randomChoice(OMEData.java:109", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   \"\"\"\n    PRED_SBJ_IS_SUB_OF_OBJ = 'skos:broader'  # default predicate for subject item is subordinate to object item\n    def __init__(self):\n        self.project_uuid = '0'\n        self.source_", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tbytes[posn++] = (byte)((ch - 0xFF60) * 2);\n\t\t\t\tbytes[posn++] = (byte)((ch - 0xFF60)", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src = off1//off2//off3\n    obj.operands = [dst, composer([env.cst(src.int(),28),env.cst(off4,4)])]\n    obj.type = type_data_processing\n\n\n\n\n\n", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap.loadProperties(stream);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "\n    public static WorldSettings.GameType getGameTypeById(int id)\n    {\n        return WorldSettings.GameType.getByID(id);\n    }\n\n    public static enum GameType\n    {\n        NOT_SET(-1, \"\"),\n        SURV", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.PurgeDefaultDacl ();\n\t\t\tAssert.AreEqual (20, c", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   self.__idle(self.__process, self.__queue.get)\n    def run(self):\n        while not self.__queue.empty():\n            result = self.__queue.get()\n            self.__idle(self.__process, result)\n            if self.__stopped:", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "\n    if (PhotonEditor.Current.RpcList.Length > 0)\n    {\n        additionalRpcs.AddRange(PhotonEditor.Current.RpcList);\n    }\n    if (additionalRpcs.Count > 0)\n   ", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        if (savedInstanceState != null) {\n            message = (IIMessage) savedInstanceState.getSerializable(\"message", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "\n# Copyright (C) 2003  CAMP\n# Please see the accompanying LICENSE file for further information.\n\"\"\"K-point/spin combination-descriptors\nThis module contains classes for defining combinations of two indices:\n* Index k for ir", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "\n    CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILLabel) {\n\t\t\t\t\t\tflatBody.Add(child);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (prevChild", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we're not going to be a ragdoll\n\t    //we're going to set the ragdoll state to true\n\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def fix_region_id(self):\n        for reg_list in  [self.polygon_region_ids, self.segment_region_ids, self.node_region_ids]:\n            for i in range(0, len(reg_list)):\n                if reg_", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "   out[outOff + 3] = (byte)(num >> 24);\n    out[outOff + 2] = (byte)(num >> 16);\n    out[outOff + 1] = (byte)(num >> 8);\n    out[outOff", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                this, new FilterExpression[] {\n                    new FilterBinaryNode( \"label\", \"name\", \"=\", \"name\" ) } ) );\n        }\n\t}\n\tprivate static class PatternFinder", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\nimport os\nimport zmq\nimport warnings\nTIMEOUT = 1000  # milliseconds\nVERBOSE = False\nRETRY = True  # Should we try to get another server if we can't connect?\nSERVERFILE = \"serverlist.dat\" # Base name", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "\n    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "\n    public static bool IsTrusted(string fileName)\n{\n    return WinVerifyTrust(fileName) == 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (numberToCancel > 0)\n\t\t\t{\n\t\t\t\tvar item = queue.FirstOrDefault(pi => pi.Item == itemName);\n\t\t\t\tif (item != null)\n\t\t\t\t{\n\t\t\t\t\tvar", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    self.currentDirTxtLine.setText(self.currentDir)\n    self.currentDirTxtLine2.setText(self.currentDir)\n    self.showCurrentDirInfo()\n    \n    self.showTagsOnMainWindow()\n    \n    self.showTags", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = code.replace('%', '%')\n        # replace all $ by $$ to prevent errors by $ signs\n        code = code.replace('$', '$')\n        # replace all $ by $$ to prevent errors by $ signs\n        code = code.replace('$', '$')\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx - reactorExtent ] + chemical[ 0 ][ idx + reactorExtent ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + 1", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            case ColumnType.TIME:\n                DateLocale timeLocale =\n                        locale == null ?\n                                this.dateLocale\n", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetPropertyValue(object component, string", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.cli_load_config(commands)\n    def config_ntp_auth_enable_by_cli(self):\n        \"\"\"Config ntp authentication enable by the way of CLI\"\"\"\nNext line of code:\n        self.cli_load_config(commands)\n   ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "       self.store.update_item(component, editing_user)\n        # Verify that changes are present\n        self.assertTrue(self.store.has_changes(component))\n        # Publish and verify that there are no unpublished changes\n        component = self.store.publish", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "\n    digest.update((byte) (TEXT_CODE & 0xff));\n\n    digest.update((byte) (TEXT_CODE & 0xff));\n\n    digest.update((byte) (TEXT_CODE & 0xff));\n\n    digest", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        /// <summary>\n        /// Resolves the type of the action parameter or return value when <see cref=\"HttpRequestMessage\"/> or <see cref=\"HttpResponse", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "MutablePropertyValues newProperties = beanFactory.getBeanDefinition(beanName).getPropertyValues();\nnewProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /*\n     *", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "   f.readline()\n    except IOError:\n        # No preexisting file to remove blank lines from\n        f = None\n    finally:\n        f.close()\n    if f is None:\n        module.fail_json(msg=\"No preexisting file to remove", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent pEvent\n            );\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "   def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        This verifies that the tag of the element matches what is expected.\n        Arguments:\n        element Element object.\n        Returns:\n        True if the tag matches what is expected. False", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\ndef _get_elements_by_tagName_helper(parent, name, rc):\n    for node in parent.childNodes:\n        if node.nodeType == Node.ELEMENT_NODE and \\\n            (name == \"*\" or node.tagName", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tdecodeKeyLocator\n\t\t\t\t  (TlvTypeCodes.KeyLocatorDigest, keyLocator, decoder);\n", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "for(int i = 0; i < ActiveWeapons.size(); i++){\n    ActiveWeapons.get(i).updateCooldown(delta);\n}\n        \n        //Updates the minimap\n        display.updateMinimap(delta);\n        \n       ", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "\n    m_btnOk.setEnabled( false );\n    m_btnOk.setEnabled( true );\n    m_btnOk.setEnabled( false );\n    m_btnOk.setEnabled( true );\n    m_btnOk.setEnabled( false );\n    m_", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "   raise RuntimeError(\", \".join(msgs))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t\t\t\t\tfailureReason = e.Message;\n\t\t\t\t\treturn;\n\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   return [coeff * met.weight for met, coeff in reaction.metabolites.items()]\ndef _total_components_flux(\n    flux: List[float],\n    components: List[float],\n    consumption: bool,\n) -> float:\n    \"\"\"", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(store__path=pootle_path,\n                                         submitted_by=user,\n                                         commented_by=user,\n                                         reviewed_by=user)\n    def get_for_path_and_store", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.dstmac_cache[self.name] = arp.protodst\n    self.dstmac_cache[self.name] = arp.protodst\n    self.dstmac_cache[self.name] = arp.protodst\n    self.dst", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= m_MaxCount)\n      m_RecentItems.remove(0);\n    m_RecentItems.add(item);\n    writeProps();\n    notifyRecent", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "\n    }\n}\n1. The code is a Python program that uses the `random` module to generate a random number between 0 and 100.\n2. The program then checks if the number is less than 50, and if it is, it prints \"You win!\".", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "\n    public void setMaxTradePeriodDate(Date maxTradePeriodDate) {\n        this.maxTradePeriodDate = maxTradePeriodDate;\n        persist();\n    }\n\n    public void setHalfTradePeriodDate(Date halfTradePeriodDate) {\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompAnySets(Node p) {\n\t\tif (p == null) return;\n\t\tBitArray s", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tWriteReport(buff);\n\t\t\tif(!mReadDone.WaitOne(1000, false))\n\t\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = order.getDirection();\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMskJointVo vo1 =", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "\n        public virtual void FreeUnits(int ptr, int oldNu)\n        {\n            InsertNode(ptr, _units2Indx[oldNu - 1]);\n        }\n\n        public virtual void DecPText(int dPText)\n        {\n           ", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.GetDataPointer(), length );\n\t\t\t\tshadowBuffer.", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.satfinder_scan_nims.addNotifier(self.newConfig, initial_call = False)\n\t\tself.satfinder_scan_nims.addNotifier(self.newConfig, initial_call = False)\n\t\tself.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "\n    public void setSocketOpt(int option, Object optval)\n    {\n        switch (option) {\n        case ZMQ.ZMQ_SNDHWM:\n            sendHwm = (Integer) optval;\n            if (sendHwm < 0)", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Write the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                prior = curr;\n            }\n            return fout.ToArray();\n        }\n        \n        /**\n        * @param in\n        * @param", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   self.get_E_2_page_no_mat().make_dual_resolution(self.get_options())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "   }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\n\t\treturn map.remove( key );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member bidding on an item\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRowCollection rows = form.grdResults().getRows();\n\t\tfor (int i = 0; i < rows.size(); i++)\n\t\t{\n\t\t\tgrdResultsRow row = rows.get(i);\n\t\t\tif (row", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       return maker.make_tab(self, cwd, profile, debugtab)\n    def on_window_state_changed(self, window, event):\n        \"\"\"Handle a window state change\"\"\"\n        self.set_urgency_hint(False)\n        if event", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "\n            }\n            catch (Exception) {\n                throw new UnableToUseTheDllFileException( 1, null, string.Empty );\n            }\n            return toReturn;\n        }\n        public void DllClose( IntPtr handle ) {\n            if ( handle != Int", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsArray {\n\t\t\tget { return base_type != null && base_type.IsTypeOf (\"System", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region private methods\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "   self.protocol = protocol\n    self.ciphers = None\n    self.cert_reqs = None\n    self.key_cert_store = None\n    self.key_file = None\n    self.cert_file = None\n    self.ca_certs = None", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::Gtk.CheckButton ();\n\t\t\tthis.checkbuttonWhiteSpaces.CanFocus = true;\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   headbook.set_tab_reorderable(True)\n    headbook.set_tab_reorderable(False)\n    headbook.set_tab_reorderable(True)\n    headbook.set_tab_reorderable(False)\n    headbook.", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-left-reverse\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_6", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "\n    return false;\n\nThe output of this code is:\n\nfalse\n\nThe output of this code is:\n\nfalse\n\nThe output of this code is:\n\nfalse\n\nThe output of this code is:\n\nfalse\n\nThe output of this code is:\n\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n    return sb.toString();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key shorter than the length of the HMAC output.\n\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\n\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4); // Enum type\n\t    \n\t    sum += 4 + CDRSerializer.alignment(sum, 4); // Enum type\n\t    \n\t    current_sum", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (File.Exists(resinHome + @\"\\lib\\java.home\"))\n        return resinHome + @\"\\lib\\java.home\";\n      else if (File.Exists", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   return [comment, l]\n    except Exception:\n        raise CronTabError(\"Unexpected error:\", sys.exc_info()[0])\n    except Exception:\n        raise CronTabError(\"Unexpected error:\", sys.exc_info()[0", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# -------------------------------------------------\n# Mesh Modifiers\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n# -------------------------------------------------\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n# -------------------------------------------------\n# ---------------------------------", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "   for(int i = 0; i < totalBuckets; ++i)\n    {\n        double bucketRank = mScoreRankBuckets.get(i);\n        if(rankCounts[i] == 0)\n        {\n            double minLik", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "   neighbors.add(vertex.neighbors().next());\n        neighbors.add(vertex.neighbors().next());\n        neighbors.add(vertex.neighbors().next());\n        neighbors.add(vertex.neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   self.parser(self.choice)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return false;\n            }\n        }\n        return false;\n    }\n    private void processGlobalAttributes(Schema schema) {\n        if (schema.getAttributes() != null) {\n            Iterator iter = schema.getAttributes().iterator();\n            while (iter.hasNext", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate', 'manager_id': False})\n    def holidays_first_validate_notificate(self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "\ndef find_common_elements(a, b):\n    \"\"\"\n    Find the common elements between two lists.\n\n    Args:\n        a (list): The first list.\n        b (list): The second list.\n\n    Returns:\n        list: The common elements between", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "\n        /// <summary>\n        /// Describes this Mixer Line (for diagnostic purposes)\n        /// </summary>\n        public override string ToString()\n        {\n            return String.Format(\"Mixer Line {0} {1}\", Name, ShortName);\n        }\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tif (valueObject.getCareContext() != null)\n\t\t\t{\n\t\t\t\tif(valueObject.getCareContext() instanceof HibernateProxy) // If the proxy is set, there is no need to lazy load, the proxy knows the id already. \n", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[]", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, gitStash.Message, gitItemStatuses);\n            }\n            Loading.IsAnimating = false;\n            Loading.Visible = false;\n            Stashed.Refresh();\n        }\n        private void", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "\nif (o instanceof AuthScope) {\n    AuthScope scope = (AuthScope) o;\n    return match(scope) == 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n    public int AddInt(int a, int b, object[] results) {\n            return ((int)(results[0]));\n        }\n        public System.IAsyncResult BeginAddInt(int a, int b, System.AsyncCallback callback, object asyncState, System.ServiceModel", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\n/*******************************************************************************\n * HELIUM V, Open Source ERP software for sustained success\n * at small and medium-sized enterprises.\n * Copyright (C) 2004 - 2015 HELIUM V IT-Solutions", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t\tE", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": " if (!r_verb_suffix()) {\n    return false;\n  }\n  return true;\n}\n\nprivate static final long serialVersionUID = 1L;\nprivate final static romanianStemmer methodObject = new romanianStemmer();\nprivate final static", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "\n    public void messageReceived(LCM lcm, String channel, LCMDataInputStream dins)\n    {\n        Object o = null;\n        ChannelData cd = channelMap.get(channel);\n        int msg_size = 0;\n        try {\n            msg_size", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result\n    except AttributeError:\n        return None\n    except ValueError:\n        return None\n    except TypeError:\n        return None\n    except IndexError:\n        return None\n    except KeyError:\n        return None\n    except AttributeError:\n        return None\n   ", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # The first value is the same as the first value of the interval.\n    # The second value is the same as the second value of the interval.\n    # The first value is the same as the first value of the interval.\n    # The second value is the same as the second value of", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n\t\t\tif (StartOf(13)) {\n\t\t\t\tGet();\n\t\t\t} else {\n\t\t\t\tGet();\n\t\t\t\tSemErr(\"bad string in attributes\");\n\t\t\t}\n\t\t}\n\t\tif (StartOf(", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "   edi_doc.update({\n        'product_id': line.product_id.id,\n        'product_uom': line.product_uom.id,\n        'product_uom_qty': line.product_uom_qty,\n        '", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\n    return new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "   nameMap.put(name, new ArrayList<PermissionEntry>());\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testReadonlyNodeHasPermission_actualPath() throws Exception\n    {\n       ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   opener = buildOpener(deviceToken)\n    device = Device(deviceToken)\n    user = User(opener, loginId, password)\n    roundtable = RoundTable(opener)\n    menu = Menu(opener)\n    exploration = Exploration(op", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   # Calculate the hour angle.\n    obs = miriad.obs(vis=dsets[0], options=\"time,date,ra,dec,hourangle,az,altaz,azel,\n                      ephemeris,sidereal_time,sidere", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "       }\n        public override void GetProperties(ObjectPropertyList list)\n        {\n            base.GetProperties(list);\n            if (_Resource > CraftResource.Iron)\n            {\n                list.Add(1053099, \"#{0}\\t{1", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181025 - Added 1 - Check if device is live\n            if (liveModelMap.containsKey(", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "\n    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": " entries.add(new Entry(Arrays.asList(split[0]), split[1], split[2], split[3], split[4]));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features_at_point(self, point):\n        \"\"\"Rarely uses. Return an iterable which yields instances of Feature for the specified point.\"\"\"\n        return None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [(\"var\", \"value\", \"type\"), ...] to fill the view\n        \"\"\"\n        if set(values) == set(self.all_vars):\n", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "\n    return result;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "   return embedManifestDllCheckAction(target, source, env)\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check for existence of manifest\n    and other conditions, and embed the manifest by calling embedMan", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getSelection(), new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMonitor(new SubProgressMon", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t// StepMeta is initialized, but data is not yet!\n\t\t// Allocate the data\n\t\tdata = new Aggreg", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "\n# coding: utf-8\n# python\nfrom datetime import datetime, time, timedelta\n# 3rd-party\nfrom freezegun import freeze_time\nimport pytest\n# this app\nfrom timetra.diary import utils\ndef test_extract_components():", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "\n            if (m_MapOverride != -1)\n                map = m_MapOverride;\n            if (m_IDOverride != -1)\n                sspawnid = m_IDOverride;\n            if (m_MinTimeOverride != -1)\n                mintime = mint", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "   s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n    if s:\n        raise exceptions.TestFail(\"Guest system log is dead. Suspend failed.\")\n    return session\n    return session\n    return session\n    return session", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "\n    @Test\n    public void testUnsubscribeIssue554() throws Exception\n    {\n        final int port = Utils.findOpenPort();\n        final ExecutorService service = Executors.newFixedThreadPool(2);\n        final Callable<Boolean> pub = new", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger.info(\"[FAULT] \" + this.ownerID + \" : FAILURE OF \" + destination.getID", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value >> 24) | 0xC0);\n\t\t}\n\t\tstatic void WriteCompressedUInt32(BinaryWriter writer, uint value) {\n\t\t\tif (value <= 0x7F)\n\t\t\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "   self.fm.execute_command(au_flags, descr=descr, refresh=refresh)\n\n# Extracts copied archive (yy) --> extracthere\nclass extracthere_all(Command):\n    def execute(self):\n        \"\"\" Extract copied files to current directory \"\"\"", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tAssert.AreEqual (\"MonoTests.System.ActivatorTestInternal.COMTest\", (objCOMTest.", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "   def testOneOldAndOtherNew(self):\n        locale = Locale.objects.get(code='da')\nNext line of code:\n    def testOneOldAndOtherNew(self):\n        locale = Locale.objects.get(code='da')\nNext line of code", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "   self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PYMUMBLE_CMD_MODCHAN", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "\n    public static void changeLeader(Player player) {\n        PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n        }\n    }\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\n    @Override\n    public int doEndTag() throws PageException {\n\tif (!StringUtil.isEmpty(values)) column.setValues(ListUtil.toStringArray(ListUtil.listToArrayRemoveEmpty(values, valuesdelimiter)));\n\tif (!StringUtil.isEmpty(valuesdisplay", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "\n        }\n        private void ParseStatus(InventoryEntry invEntry, string status)\n        {\n            string[] statuses = status.Split('|');\n            for (int i = 0; i < statuses.Length; i++) {\n                string[] parts = statuses[", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\t\tm_key[i].From = from;\n\t\t\t\t\t\tm_key[i].To = this;\n\t\t\t\t\t\tm_key", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans != null)\n\t\t{\n\t\t\tfor(int x = 0; x < beans.length; x++)\n\t\t\t{\n\t\t\t\tcoll.add((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.ComputeKey(pbMsg, pbSalt, pbKey, pbAssoc);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\n\t\treturn (boolean) (requestManaExact(stack, player, cost, remove) / multiplier);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "from django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.forms import AuthenticationForm\nfrom django.contrib.auth.forms import UserChangeForm\nfrom django.contrib.auth.forms import PasswordChangeForm\nfrom", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "\nif ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "\n    public void\n    responseCallList(Parcel p) {\n        int num;\n        int voiceSettings;\n        ArrayList<DriverCall> response;\n        DriverCall dc;\n        num = p.readInt();\n        response = new ArrayList<DriverCall>(num);\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\n\t\t\t\t\t\tif (licence.isDomainData()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n        }\n        // TODO: make the map configurable\n        // TODO: make the map configurable\n        // TODO: make the map configurable\n        // TODO: make the map configurable\n        // TODO", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD, new Object[]{testInt1, testInt2});\n\t\t\t\n\t\t\tif (rawResult", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] block", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "   out.writeBoolean(false);\n    out.writeUTF(\"not found\");\n    out.flush();\n    out.close();\n    in.close();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "   }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n    }\n\n    public static List<Obj_AI_Base> GetCollision(this Spell spell, List<Vector2> positions)\n    {\n        var objects = new List<CollisionableObjects>(){CollisionableObjects.YasuoWall,CollisionableObjects", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "\n    public static boolean existsInducingPathInto(Node x, Node y, Graph graph) {\n        if (x.getNodeType() != NodeType.MEASURED) throw new IllegalArgumentException();\n        if (y.getNodeType() != NodeType.ME", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "\n        }\n        #region i3DML Initialization\n        /// <summary>\n        /// Initialize the element.\n        /// </summary>\n        /// <param name=\"i3DMLReader\">i3DML reader</param>\n        public void i3DMLInitialize(", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "\n    if (this.attachmentFile == null) {\n        if (other.attachmentFile != null) {\n            return false;\n        }\n    } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n        return false;\n    }\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "\n            }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void MessageTo(PlayerMobile user, PlayerMobile to, string text)\n\t\t{\n\t\t\tMessageTo(user, to, text", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "\n    public void onItemCheckedStateChanged(ActionMode mode, int position, long id,\n                                          boolean checked) {\n        if (checked) {\n            mListView.setItemChecked(position, true);\n        } else {\n            mListView.setItemChecked(position,", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    public void a() {\n        this.m();\n\nThe code is trying to call the method `m()` on the `NetworkManager` class, which is a simple channel inbound handler. However, the method `m()` is not defined in the `NetworkManager` class. The code is", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n    z_arr[p_index, z_dict[z_key][per], z_dict[z_key][per]] = z_dict[z_key][per]\n    z_err_arr[p_index, z_dict[z_key][per], z", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "\n    return getPluralizedIdentityDescription(context, recipients, resourceOne, resourceTwo, resourceMany);\n\nThe code is trying to return a string that describes the number of unverified identities. However, the code is not complete and does not provide a way to return the string. The", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "   env[\"PATH\"] = \":\" + \":\".join(extra_path)\n    env[\"LD_LIBRARY_PATH\"] = \":\" + \":\".join(extra_lib)\n    if gonk:\n        env[\"GOONK_HOME\"] = self.config[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "       for path, tests in iteritems(type_paths):\n            for test in tests:\n                source_files[path] = test.to_SourceFile()\n        self._data = {test_type: {path: tests for path, tests in iteritems(source_files)}\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "   } catch (final Throwable e) {\n        handleScriptRuntimeException(e, outStream, errorHandler);\n        throw new ExecuteScriptException(e.getMessage(), e);\n    }\n    private void handleScriptRuntimeException(final Throwable e, final PrintStream outStream", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n    }\n\n    /// <summary>\n    /// Simpler dynamic base network layer class, makes it easier to implement in a class and for python\n    /// </summary>\n    /// <typeparam name=\"T\">Type of configuration</typeparam>\n    /// <typeparam name=\"R", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "   for i in range(energy.size):\n      grad_Etf = grad[i].flatten()\n      grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n      grad_E = np.reshape(grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\n\tif (obj == null)\n\t{\n\t\treturn -1;\n\t}\n\tif(caseInsensitive); // this compares strings, not case sensitive\n\t\tif(id == null)\n\t\t{\n\t\t\treturn -1;\n\t\t}", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "\n    public void updateAll() throws TckRepositoryException {\n        for (StackImpl stack : stacks) {\n            stackDao.update(stack);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterName(depth);\n        depthParameter.setParameterValue(depth);\n        depthParameter.setParameterFamily(pf);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGEXP", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == LNodeKind.Block)\n\t\t\t{\n\t\t\t\tvar block = (LBlock)candidate;\n\t\t\t\tvar patternBlock = (LBlock)pattern;\n\t\t\t\tif (block.Range.Contains(patternBlock", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "               if (colisionList.Any())\n                {\n                    extendedWillHit++;\n                    extendedFarmLocation = colisionList.First().To2D();\n                }\n                if (extendedWillHit >= zedMenu.GetParamSlider(\"koreanzed", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(new ContextMenusFlyweightFactory(context, form.getFormInfo(), factory).createMenus());\n\t\t// Images\n\t\tthis.imageReferences.setImages(factory.getImages().createImageReferences());\n\t\t//", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\"\"\"\n    print(\"Successfully installed NPM packages. Log found at {}\".format(\n        npm_log_file_path\n    ))\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, 1, 2)).change_index((x, 1, 2), (x, 1, 3)) == \\\n        Sum(x, (x, 1, 3))\n    assert Sum(x, (x, ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._notifyAction = action;\n            this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n            this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "\n    public void testObjectToXMLStreamWriter() throws Exception {\n        if(XML_OUTPUT_FACTORY != null && staxResultClass != null) {\n            StringWriter writer = new StringWriter();\n            XMLOutputFactory factory = XMLOutputFactory.newInstance();\n            factory", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"Color Count: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "   JSR.addToSubroutine(id, nbSubroutines);\n            }\n        }\n        // adds the current label to the stack\n        stack = this;\n        while (stack != null) {\n            // adds a label l to the stack\n            Label l =", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   self.transport._expect_packet(MSG_KEXGSS_INIT,\n                                  MSG_KEXGSS_CONTINUE,\n                                  MSG_KEXGSS_COMPLETE,\n                                  MSG_KEXGSS_ERROR", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       dVdzdOm.append(cosmo.dVdzdOm(zi))\n        #Number of objects/Mpc^3 (i.e. unit is 1/Mpc^3)\n        #rho_norm0 = cosmo.rho_bar()\n        #", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dimension();\n        Font font = getFont();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "   self.cal_p2(ref_p=None,phi=phi,flag='off_center')\n    self.share_face_init(self.flag)\n    #print \"the angle is \",theta_res,\" and the phi is \",phi,\" and the flag is \",", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Visibility = Visibility.Visible;\n\t\t\twindow.Visibility = Visibility.Hidden;\n\t\t}\n\t\tprivate void ShowOrHide(Window window)\n\t\t{\n\t\t\tif (window == null)\n\t\t\t\tthrow new Argument", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "   if params[1]['bins'] is None:\n        step = (params[1]['high'] - params[1]['low'])\\\n            / float(params[1]['nbins'])\n        params[1]['bins'] = [\n            params[1]['low'] + n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       im1L = im1.convert(\"L\", rgb2I)\n        elif channel == \"R\":\n            im1L = im1.convert(\"L\", rgb2r)\n        elif channel == \"G\":\n            im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\n\t\t\tif (rsp.isOkey()) {\n\t\t\t\taddLog24(rsp, ret);\n\t\t\t} else {\n\t\t\t\tif (rsp.isOkey()) {\n\t\t\t\t\taddLog24(rsp", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\ndef get_data(self, *args, **kwargs):\n        \"\"\"\n        Get data from the data source.\n\n        :param args:\n            Arguments to pass to the data source.\n        :param kwargs:\n            Keyword arguments to pass to the data source.\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   return self.dispatch(environ, start_response)\n    def dispatch(self, environ, start_response):\n        \"\"\"Dispatch the request to the appropriate WSGI app.\n        Args:\n            environ (Mapping): a dict containing WSGI environment variables\n            start_response (", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( dataobj = Data( source = sys.argv[ 1 ] , fields = sys.argv[ 2 ] , rows = sys.argv[ 3 ] ) )\n\t\tmodel.loadmodel( sys.argv[ 4 ] )\n\t\tmodel.set", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n                res = EnhanceResult.Success;\n        }\n        public static void CheckResult(ref EnhanceResult res, int chance, int max)\n        {\n            if (res != EnhanceResult.", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "   return rdltypes.UserEnum(type_name, entries, displayname, desc)\n    #---------------------------------------------------------------------------\n    def parse_field_vendorExtensions(self, vendorExtensions: minidom.Element, C: comp.Field) -> comp.Field:\n        \"\"\"", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "               MessageBox.Show(\"No modules found!\");\n                this.Close();\n            }\n        }\n        private Boolean writeFile(String str, String strInstallLocation)\n        {\n            if (strInstallLocation != null && strInstallLocation.Length > 0)\n            {\n               ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "\n/********\n * This file is part of Ext.NET.\n *     \n * Ext.NET is free software: you can redistribute it and/or modify\n * it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE as \n * published", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n    public RenderingStream render()\n    {\n        if(this.trianglePoint != -1)\n            throw new IllegalStateException(\"render called between beginTriangle and endTriangle\");\n        if(USE_VERTEX_ARRAY)\n        {\n            Main.op", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   exposedHeaders = exposedHeaders + ', ' + header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\ndef expose_headers(response):\n    \"\"\"\n    Expose all headers to the client\n    \"\"\"\n    exposedHeaders = response.get('Access", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDri", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   var = [var]\n    return var\ndef _verify_list(name, var, input_list):\n    \"\"\"Make sure data given by the user does not conflict with itself.\n    If a variable that was given by the user contradicts other data provided, an exception is raised.\n", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setInitialState(STARTED)\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.addKillName(\"Warehouse Freightman Romp", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 + (double)num1) * 60) / 60", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "\npublic ShaderProgram(bool flat)\n{\n    PrimitiveType = PrimitiveType.Triangles;\n    Flat = flat;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   for met in self.metabolites:\n        met._model = self\n    for gene in self.genes:\n        gene._model = self\n    for rxn in self.reactions:\n        rxn._model = self\n    return self\n    def _get", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add((TumourGroupListVo)beans.get(i));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static Tum", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "\n```python\nset.setAnimationListener(new Animation.AnimationListener() {\n    public void onAnimationStart(Animation animation) {\n        mListView.setVisibility(View.VISIBLE);\n    }\n\n    public void onAnimationEnd(Animation animation) {\n        mListView", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.FieldKey =", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(pssm.getSequence()[i]) != Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tthis.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
