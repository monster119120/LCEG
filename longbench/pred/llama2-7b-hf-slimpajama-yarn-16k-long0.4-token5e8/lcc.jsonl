{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tif ( p.Gump != null )\n\t\t\t\t\tp.Gump.Close();\n\t\t\t}\n\t\t\tfor ( int i = ", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "\n#! /usr/bin/env python\n# Last Change: Sun Dec 14 07:00 PM 2008 J\n\"\"\"Test for the sndfile class.\"\"\"\nfrom os.path import join, dirname\nimport os\nimport sys\nfrom numpy", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n#!/usr/bin/env python\nfrom apps.webdriver_testing.pages.site_pages import UnisubsPage\nfrom urlparse import urlsplit\nclass VideoPage(UnisubsPage):\n    \"\"\"\n     Video Page contains the common elements in the video page.\n    \"\"\"\n   ", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\n\t\t\t\twriter.addAttribute(\"current\", ol.getCurrent());\n\t\t\t\tif (ol.getContent() != null)\n\t\t\t\t\twriter.setValue(ol.getContent());\n\t\t\t}\n\t\t\tpublic Object unmarshal(H", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "   ret += \"Category %s: %s\" % (self.category, self.question)\n    return ret\nclass _AnswerData(_QAData):\n    def ask_string(self):\n        return \"Category %s: %s\" % (self.category, self.question", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "\n/**************************************\n*Script Name: Staff Runebook          *\n*Author: Joeku                        *\n*For use with RunUO 2.0 RC2           *\n*Client Tested with: 6.0.9.2          *\n*Version: ", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "   s.println(\"***\");\n            } catch (CertificateEncodingException e) {\n                encodedChain = null;\n                throw new RuntimeException(\"Could not encode certificates\", e);\n            }\n        }\n        return messageLength;\n    }\n}\n/*\n * Certificate", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "\n    public synchronized static JESpace getSpace (String name, String path)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\ndef get_all_items(self):\n    \"\"\"\n    Returns a list of all items in the inventory.\n\n    Returns:\n        list: A list of all items in the inventory.\n    \"\"\"\n    return self.items\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "\n    # return SOAP response\n    response = self.dispatcher.dispatch(request)\n    self.wfile.write(response)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "   self.webview.execute_javascript(\"setRepeated('%s');\" % status_id)\n    self.webview.execute_javascript(\"setRepeated('%s');\" % status_id)\n    self.webview.execute_javascript(\"setRepeated", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   return {\"error\": False}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\n#if NET_2_0\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n#else\n\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b.Identity);\n#endif\n\t\t\tAssert.Is", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "\ndef _get_ssl_context(keyfile, certfile, ca_certs):\n    if certfile is None and ca_certs is None:\n        log.debug(\"Using default SSL context\", extra={\"sock\": \"*\"})\n        return SSLContext.getDefault()\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Finds the forward to use for the domain administration page.\n     *\n     * @param mapping The action mapping with possible destinations", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__datastream_transport = await self.__datastream_protocol.wait()\n        self.__datastream_protocol = None\n        self.__datastream_fd = self.__datastream_transport.get_pipe_fd()\n        self.__datastream_protocol", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\n// 1. The code is already in a loop.\n// 2. The loop is iterating over the TreeStore.\n// 3. The loop is checking each row in the TreeStore.\n// 4. The loop is checking if the row has a value in the columnBool1", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "\n        String[] argValues =\n            getArgValues(application, request, defaultMessages, locale, args);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\n\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\n\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "   self._finalize_loaded(states)\n\n    def _finalize_loaded(self, states):\n        \"\"\"Finalize the loading of a set of objects.\n        This method is called by the :meth:`.Session.flush` method\n        when a set of objects are loaded", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            self.redirect(self.request.path + \"/\", permanent=True)\n        return", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\n\t\t\tbase.Render (writer);\n\t\t}\n\t\t\n\t\tprotected internal override void RenderContents (HtmlTextWriter writer)\n\t\t{\n\t\t\tbase.RenderContents (writer);\n\t\t}\n\t\t\n\t\tprotected internal override void RenderChildren (", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    ## This is for the lazy: use this one\n    ## Do not modify this lazy map after this point since rows will be the same object...\n    #div_map = [[1]*self.londiv]*self.latdiv\n    ##", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 146 && mod <= 150)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   builds = [{'os': 'os_windows', 'os_pretty': 'Windows',\n                 'os_arch_pretty': 'Windows x86', 'arch': 'x86',\n                 'arch_pretty': 'Windows x86', 'download_link':", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\n    if (objectID != null) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "\n    public override IEnumerable<CSharpSyntaxNode> VisitFunction( Function node ) {\n        return Convert( node, ContextService ).ToEnumerable();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "   split_test = self._update_partition_id(0)\n    # Verify that child verticals have been set to match the groups\n    self.assertEqual(2, len(split_test.children))\n    vertical_0 = self.get_item_from_modul", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "\n    } catch (Exception e) {\n        throw new Exception(\"Error in TrueTypeFontUnicode.WriteFont\", e);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.depth++;\n\t\t\t\t\t\tif (cgn.depth > maxDepth) maxDepth = cgn.depth;\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\n    return new EmojiPageBitmap(model);\n\nExplanation:\n\nThe code initializes a new EmojiPageBitmap object with the specified EmojiPageModel. If the bitmapReference is not null and the bitmap is not null, it returns the bitmap. If the task is", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\n    }\n\n1. The user has a list of numbers.\n2. The user wants to find the sum of the numbers.\n\n$sum = \\sum_{i=1}^{n} x_i$\n\nresult: The sum of the numbers.\n\n```python\ndef sum", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "\n# -*- coding: utf-8 -*-\n# added new list_tbl definition\nfrom functools import partial\nimport random\nimport itertools\nfrom navmazing import NavigateToAttribute, NavigateToSibling\nfrom widgetastic.widget import View\nfrom", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\npublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\tfor (IJPoseListener listener : poseListeners) {\n\t\tlistener.onPose(timestamp, pose);\n\t}\n}\n\n\n\n\n\n\n\n\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "\n    public class ToolbarButton : ImageButton, IScriptControl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n```python\n# Add your code here\n```\n\nOutput:\n\n```\nTraceback (most recent call last):\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\ipykernel_launch", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "\ndef get_all_effects(self):\n    \"\"\"\n    Returns a list of all effects.\n\n    Returns:\n        list: A list of all effects.\n    \"\"\"\n    return self.effects\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "\n    def test_circular_reference_deltas_3(self):\n        self.circular_reference_deltas_3(Document, Document)\n        self.circular_reference_deltas_3(Document, DynamicDocument)\n        self.circular_", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "\n            if (rootFolder.IsIgnored(path))\n            {\n                toScan.Add(path);\n            }\n            else\n            {\n                var command = new ScanFolderCommand(rootFolder, path);\n                _commandQueueManager.Enqueue(command);\n           ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\ndef transform(function):\n    \"\"\"\n    Transform a function that takes a key and a value and returns a new value.\n\n    Args:\n        function (Function): The function to transform.\n\n    Returns:\n        Function: The transformed function.\n    \"\"\"\n    def", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "   if viewtype.lower() == 'listview':\n        objcommentslist = pdt.getDiscussionFor(uid).objectValues()\n        replydict = []\n        jsondata = getjsondata(self.context,replydict,self.context.portal_url(),", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channelUri = String.Format(\"sip:{0}@{1}\", land.LocalID, m_freeSwitchRealm);\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.OK;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew){\n\t\t\t\tPayPeriods.Insert(PayPeriodCur);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    if not user:\n        return {'success':", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\n```python\n# ...\n```\n\nExplanation: The code continues with the next line of code, which is not provided in the extract. However, the code snippet above shows the basic structure of the code, which includes a loop to iterate through the examples in the example set, and a conditional statement", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "\n            return new SearchResults[segments.Length];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = ch - '\\uD800';\n         } else if ('\\uDC00' <= ch && ch <= '\\uDFFF' && offset < strlen) {\n            codePoint = ch - '\\uDC00';\n         } else if ('\\uE", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\n\t\tfor(int x = 0; x < col.size(); x++)\n\t\t{\n\t\t\tCatsReferralPendingEmergencyNonEDAdmissionListVo vo = ((CatsReferralPendingEmergencyNonEDAdmissionListVo", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\n\t\t\tif (bot.IsPaused)\n\t\t\t\treturn;\n\t\t\tvar rallyPoints = new List<CPos>();\n\t\t\tvar rallyPointScanRadius = Info.RallyPointScanRadius;\n\t\t\tvar rallyPointScanRadiusS", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\n    public CompiledPlan compile(String sql, int paramCount, String joinOrder, Object partitionParameter, boolean inferSP, boolean lockInSP, DeterminismMode detMode)\n    {\n        Statement catalogStmt = proc.getStatements().add(\"stmt-\" + String", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n\t\t\t\t|", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\n\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "\n    def test_user_with_cobrand_admin(self):\n        admin = self.make_user('admin')\n        admin.is_superuser = True\n        admin.save()\n        cobrand = Cobranding.objects.create(user=self.user", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif entry[0] == self.oldlist[ap]['essid']:\n\t\t\t\t\tcurrentListEntry = entry\n\t\t\t\t\tcurrentListIndex = tmpList.index(entry)\n\t\t\t\t\tif currentListIndex is not None:\n", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "\ndef get_all_users(self):\n    \"\"\"\n    Returns a list of all users in the system.\n\n    Returns:\n        list: A list of all users in the system.\n    \"\"\"\n    return self.get_users()\n\n\n\n\n\n\n\n\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "   x_points = np.arange(-185.23, +360.0, 73.123)\n\n    x_points = np.arange(-185.23, +360.0, 73.12", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n// 1. The number of rows in the table is 1000.\n// 2. The number of columns in the table is 1000.\n// 3. The number of rows in the table is 1000.\n// 4. The number", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, functionName, dll, resultType=ctypes.c_int, \n                      argTypes=(), doc = None, argNames = (), extension = None, deprecated = False ):\n        \"\"\"Create a null function for a given name\n        \n       ", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n    public void writeFileEmptyStreams(final DataOutput header) throws IOException {\n        boolean hasEmptyStreams = false;\n        for (final SevenZArchiveEntry entry : files) {\n            if (!entry.hasStream()) {\n                hasEmptyStreams = true;\n               ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n    public void mouseClicked(MouseEvent e)\n    {\n        if (e.getButton() == MouseEvent.BUTTON1)\n        {\n            if (rampUp)\n                alphaLevel = 255;\n            else\n                alphaLevel = ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "\n    public void should_be_removable_and_should_allow_move_files_if_max_idletime_configured_and_paused()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n    public static sega_decryptPtr sega_decrypt77 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {\n            /*unsigned*/\n            int i = 0;\n            /*unsigned*/", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "   return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        self._course_key = self._create_course_locator()\n        self._course_key = self._course_key.replace('{org", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   # If the config directory doesn't exist, create it\n    if not os.path.exists(config_directory):\n        try:\n            os.makedirs(config_directory)\n        except:\n            module.fail_json(\"Could not create \" + config_directory)", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plugruncount += 1\n                plug.collect()\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e.errno", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "# -*- coding: utf-8 -*-\n##\n##\n## This file is part of Indico.\n## Copyright (C) 2002 - 2014 European Organization for Nuclear Research (CERN).\n##\n## Indico is", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "\n    public void setMessageBrowser(MessageBrowser messageBrowser) {\n        this.messageBrowser = messageBrowser;\n    }\n\nThe code is trying to set the MessageBrowser object to the MessageBrowser object passed in as a parameter. However, the code is not working because the MessageBrowser object is not", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\n    public void dispatch(Object query, Object options) throws Exception {\n        // TODO: implement dispatch\n        // TODO: implement dispatch\n        // TODO: implement dispatch\n        // TODO: implement dispatch\n        // TODO: implement dispatch\n        // TODO: implement dispatch\n        // TODO: implement dispatch", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "\n    if (currentSession != null) {\n        userInfoSession = currentSession;\n        fetchUserInfo();\n        updateUI();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\n```python\n# Define the number of rows and columns\nrows = 10\ncolumns = 10\n\n# Initialize the matrix\nmatrix = [[0 for _ in range(columns)] for _ in range(rows)]\n\n# Fill the matrix with random numbers\nfor i in range", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "\n    def test_to_xml(self):\n        \"\"\"Test exporting as xml\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test xml\n        self.assertEqual", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if NorthernHemisphere == 1:\n        Long = phi1 + LongOrigin;\n    else:\n        Long = phi1 - LongOrigin;\n    Lat = asin(sin(phi1)*sin(phi1) + cos(phi1)*cos(phi1", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "   form = ReportUserForm(request.POST)\n    if form.is_valid():\n        form.save()\n        messages.success(request, \"Reported user successfully!\")\n        return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n    else:", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def page_title(self):\n        return \"Add series\"\n    @property\n    def page_description(self):\n        return \"Add a new series to this project\"\n    @property\n    def form_fields(self):\n        return [\n            '", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\n\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic void ApplyTo(Form form, string strTableName)\n\t\t{", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "\n    public byte[] writeByteArray()\n    {\n        int size = getSize();\n        byte[] arr;\n        if (size == 0)\n        {\n            arr = new byte[0];\n        }\n        else\n        {\n            long temp = ID3Tags", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   return re.compile(regex)\n    def compile_tag_regex(positional_tags):\n        if not positional_tags:\n            return positional_tags\n        else:\n            new_positional_tags_list = []\n            positional_tags = positional_", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# This file is part of Scapy\n# See http://www.secdev.org/projects/scapy for more information\n# Copyright (C) Andreas Korb <andreas.d.korb@gmail.com>\n# Copyright (C) Nils Weiss <n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.bus_name.add_signal_receiver(self.on_name_owner_changed,\n\t\t                                  'NameOwnerChanged',\n\t\t                                  'org.freedesktop.DBus')\n\t\tself.bus_name.add_signal", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\n            }\n            else\n            {\n                index = this.AddCraft(typeof(EnchantedSwitch), 1044294, 1072893, 45.0, 95.0, typeof(BlankScroll), 1", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\ndef test_appcontext_pushed():\n    app = Flask(__name__)\n    app.teardown_request = lambda exc: print('teardown_request')\n    app.test_request_context()\n    assert app.teardown_request.called\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "\n    return result;\n\nExpected output:\n\n    return result;\n\nActual output:\n\n    return result;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   dx = (rot_dir[0] * ray_trafo.range.meshgrid[1] +\n          rot_dir[1] * ray_trafo.range.meshgrid[2])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   return regx\n    def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\n//\n// System.Web.UI.WebControls.FontUnit.cs\n//\n// Authors:\n//   Miguel de Icaza (miguel@novell.com)\n//   Ben Maurer (bmaurer@ximian.com).\n//\n// Copyright", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\nvar obj = (JObject)rootVal;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++) {\n                for (int i = 0; i < size; i++) {\n                    edges.add(T2.create(w, h, \"edge-\"+w+\"-\"+h));\n                }\n            }", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.Isoelastics(ds)\n    i1.get(col1=\"area_um\",\n          col2=\"deform\",\n          lut_identifier=\"LE-2D-FEM-19\",\n          channel_width=20,\n", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\n#!/usr/bin/env python\n\"\"\"\nTest alerts\n\"\"\"\nimport unittest\nimport datetime\nfrom dateutil.tz import tzutc\nfrom spotbot import alert\ndef isclose(a, b, rel_tol=1e-09, abs_", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\ndef get_all_users():\n    \"\"\"\n    Returns a list of all users in the database.\n\n    Returns:\n        list: A list of dictionaries representing each user in the database.\n    \"\"\"\n    # Connect to the database\n    conn = sqlite3.connect('users", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\n1. The code is in a loop.\n2. The loop is executed multiple times.\n\n$i = i + 1$\n\nresult: The value of $i$ is incremented by 1.\n\n```python\ni = 0\nwhile i < 10:", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   return self._project_cov_mat(\n        self.x_data_cov_mat, self.y_data_cov_mat, self.x_model, self.parameter_values)\n    @property\n    def x_cor_mat(self):\n        \"\"\"2D", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "\n    return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "\nosgObject.setOwnerCanonicalId(owningAccount.getCanonicalId());\n\nError message:\n\njava.lang.NullPointerException\n\nat com.eucalyptus.objectstorage.entities.ObjectEntity.setOwnerCanonicalId(Object", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "   assertEquals(isImportAsNewEntity, ImportVmTemplateCommand.validateNameSize(name));\n\nExpected output:\n    true\n\nActual output:\n    false\n\nDifference:\n    The expected output is true, but the actual output is false. This indicates that the", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child vbox3.Gtk.Box+BoxChild\n", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "   self.logger.debug('PostProcessScript: %s' % self.nzbfilename)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   return (Builder) new Builder().MergeFrom(prototype);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "\n    public void getQuad(int i, Vector3f[] vertices) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices[x] ==", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "\n    return result;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "   base.OnSizeChanged(e);\n      }\n      else\n      {\n        Height = GetBestHeight();\n      }\n      Invalidate();\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnClick(EventArgs", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "\n    public static void SendEmailsPerUser(DataTable AErrors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\n\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (dire", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "\n            if (VerificationResultCollection.HasErrors)\n            {\n                ARow.ConferenceKey = 0;\n                ARow.Start = DateTime.MinValue;\n                ARow.End = DateTime.MinValue;\n                ARow.VenueKey = 0;", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "#\n# Copyright (C) 2019  Red Hat, Inc.\n#\n# This copyrighted material is made available to anyone wishing to use,\n# modify, copy, or redistribute it subject to the terms and conditions of\n# the GNU General Public License v", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyCustom; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_customRange == value)\n\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\n    return \"data\";\n\nExpected output:\n\n    return \"data\";\n\nActual output:\n\n    return \"data\";\n\n```python\ndef test_return_data():\n    assert \"data\" == return_data()\n\n\ndef test_return_data", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n    public void setReportStackTrace(boolean reportStackTrace) {\n        this.reportStackTrace = reportStackTrace;\n    }\n\n    public void setReportHistory(boolean reportHistory) {\n        this.reportHistory = reportHistory;\n    }\n\n    public void setApplySuppressions", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\n\tpublic class CookedBird : Food\n\t{\n\t\t[Constructable]\n\t\tpublic CookedBird() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic CookedBird( int amount )", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n            }\n        }\n        private void JungleClear()\n        {\n            if (ManaManager.HasEnoughMana(Menu.GetSlider(\"JungleClearMana\")) && ManaManager.SpellFarm)\n            {\n                var mobs = Min", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\n\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\twx, wy, getAnchor(anchor), getFill(fill),\n\t\t\tnew Insets(insetTop, insetLeft, insetBottom, insetRight),\n\t\t\t0", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\n    def pollen(self, region):\n        filename = 'gds/specials/warnings/FG/s_b31fg.xml'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "\n    def test_field_name_model_based_with_legacy_field_name(self):\n        \"\"\"JSONAlchemy - field name model based with legacy field name\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "\n    } catch (Exception ex) {\n        Assert.Fail(\"Unexpected exception: \" + ex.Message);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __imul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        clibrebound.reb_particle_imul(byref(self), c_double(other))\n        return self", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    def _get_view_id(self, cr, uid, view_id, context=None):\n        \"\"\" Get the view id from a view id or a view object.\n        \"\"\"\n        if isinstance(view_id, basestring):\n            return self.pool", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "\n    public static View createHTMLView(JComponent c, String html) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/\" + filename,\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\n\t\t\t\tmapping.sqlloader = namedQueryReference;\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQueryParameter)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.Write( (PlayerStateCollection) m_Members );\n\t\t\twriter.Write( (FactionItemCollection) m_FactionItems );\n\t\t\twriter.Write( (FactionTrapCollection) m_FactionTraps );\n\t\t\twriter", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "\n    if (checkTargetConditions(invoke, targetMethod)) {\n        doInline(callerCallsiteHolder, calleeInvocation);\n        return true;\n    }\n\nThe code is trying to inline a method call. The method call is being checked for inlining conditions. If", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n    def create_pytest_envvars(self):\n        env = {}\n        env['CFME_TEST_ID'] = self.pytest_name\n        env['CFME_TEST_APPLIANCE'] = self.appliance\n        env['CFME_TEST_APP", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "\n    public void mergeReadCache(List<ReadEliminationBlockState> states) {\n        for (Map.Entry<CacheEntry<?>, ValueNode> entry : states.get(0).readCache.entrySet()) {\n            CacheEntry<?> key = entry.getKey();\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "\n    public void handleCallSessionEvent(int event) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\n    if (from.InRange(GetWorldLocation(), 5))\n\nThis line of code checks if the mobile is within 5 tiles of the item's location. If it is, the code continues to the next line.\n\nThe next line of code is:\n\n    from", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "\n# -*- coding: utf-8 -*-\n#\n# This file is part of Invenio.\n# Copyright (C) 2014, 2015 CERN.\n#\n# Invenio is free software; you can redistribute", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   self.module.delete(username)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "   _BaseFile.save(self, fpath, 'to_binary')\n        \"\"\"\n        _BaseFile.save(self, fpath)\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated\n        messages.\n", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    else:\n      res = self.integrityClient.getTransformationProblematics( int( transID ) )\n     ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\n\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX))\n\t\t\t\treturn null;\n\t\t\tif(uri.getPath().startsWith(\"/\"))\n\t\t\t\treturn null;\n\t\t\tif(uri.getPath().", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "   @defer.inlineCallbacks\n    def check_single_build_legacy(self, buildResult, verifiedScore):\n    @defer.inlineCallbacks\n    def check_single_build_deferred(self, buildResult, verifiedScore):\n    @defer.inline", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "\ndef main():\n    \"\"\"\n    This function is the main entry point for the program.\n    \"\"\"\n    # Create a new instance of the class\n    new_class = Class()\n    # Call the method\n    new_class.method()\n\nif __name__ == \"__", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "   }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n   ", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\n# <pep8 compliant>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_timer_irq_Latch_16 = map1", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\n/*************************************************************************\n *\n *  The Contents of this file are made available subject to the terms of\n *  the BSD license.\n *\n *  Copyright 2000, 2010 Oracle and/or its affiliates.\n * ", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Blue Bears]\n\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Green Bears]\n\n\t\tAdd", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn SizeHeightToFitWithMin (min, true);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMin (int min, bool force)\n\t\t{\n\t\t\tint height = 0;\n\t\t\tif (force) {\n\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "\ndef _redo_announcements_text_rendering(sender, **kwargs):\n    \"\"\"\n    Redo text rendering of all announcements.\n    :param sender: Not used.\n    :param kwargs: Not used.\n    \"\"\"\n    for announcement in", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "\n# Load PhpLexer\nfrom sphinx.highlighting import lexers\nfrom pygments.lexers.web import PhpLexer\n# Enable highlighting for PHP code not between <?php ... ?> by default\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "   cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight_group WHERE groupID=?\n                 ORDER BY sdate, stime ''', (i,))\n    #for row", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "\ndef db_set_last_snapshot(new_snapshots):\n    \"\"\"\n    new_snapshots should be a dictionary with keys the project_id's and values timestamps.\n    This function will connect to the database if possible, and set the last_", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I'm not sure what you mean by that.<br/>I'm not a very good liar, so I'm not sure what you're talking about.\");\n\t\t\t\tbreak;\n\t\t\tcase \"complicity_2\":\n\t\t\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\ndef _get_task_data(task):\n    \"\"\"\n    Get the TaskData for a single task.\n    \"\"\"\n    return TaskData(task._uuid, task.get_name().strip(), task.get_path(), task.get_play())\n\n\n\n\n\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "\n    } catch (Exception e) {\n        e.printStackTrace();\n        Toast.makeText(context, getString(R.string.toast_message_error) + uri, Toast.LENGTH_LONG).show();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n# This module should be kept compatible with Python 2.1.\n__revision__ = \"$Id: install_lib.py 4802 2007-01-23 21:26:03Z vapier $\"\nimport sys,", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-q', '1',\nNext line of code:\n        '-q', '2',\nNext line of code:\n        '-q', '3',\nNext line of code:\n        '-q', '4',\nNext line of code:\n        '-q', '5',\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\n    public static string Generate()\n    {\n        Builder.Clear();\n        GenerateHeader();\n        GenerateGame();\n        GenerateOverview();\n        GenerateHeroes();\n        GenerateAssemblies();\n        GenerateFeatures();\n        Generate", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def handleFree(self):\n        self.html = self.load(self.url)\n        action = self.load(self.url, post={\"checkDownload\": \"check\"}, decode=True)\n        action = json_loads(action)\n        self.logDebug(", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\n\t\t\tif (path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\tCPos? GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\tvar lastproc = harv.", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "\n    if restart_dhcp != \"0\":\n        rc = utils.subprocess_call(self.logger, \"dhcpd -t -q\", shell=True)\n        if rc != 0:\n           self.logger.error(\"dhcpd -t failed", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "\n    protected void sendEvent(Event e) {\n        if (logAllMessages) {\n            log.debug(\"event: {}\", e);\n        }\n        sendEvent(e, seqNo.getAndIncrement());\n    }\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                if (context.NumberStatistics != 0)\n                {\n                    if (context.Flags & 0x08)\n                    {\n                        goto LoopEntry;\n                    }\n                    if (context.Flags &", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "\n    public static readonly DicomVr SQvr = new DicomVr(\"SQ\", true, true, true, 64, true, ' ', 1,\n        delegate(DicomTag tag, ByteBuffer bb)\n        {\n            if (bb == null", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\n```python\nsessionValuesArray.Add(tFull[3]);\n```\n\t\t}\n\t\t//now we have all the sessions that have this test type\n\t\t//now we have to find the test type in the session\n\t\t//now we have to find the test type in", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "\n<?cs include:\"footer.cs\" ?>\n</body>\n</html>\n<?cs /if ?>\n<?cs include:\"footer.cs\" ?>\n<?cs /if ?>\n<?cs include:\"footer.cs\" ?>\n<?cs /if ?>\n<?cs include:\"footer.cs", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'], csi_95, '--',\n            label='%s, %s, 95%% CI' % (app, test))\n    ax.plot(cr['combined'][app][", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self._testUIDGIDSwitch(1, 0, 0, 1, [0, 1], [1, 0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\nif (model.isEnabled()){\n\t\t\t\t\tif(model.isPressed() && model.isArmed()){\n\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\t\tg.fill", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Value value) {\n        assert kind.isPrimitiveOfSameSizeAs(value.kind());\n        if (offset == lengthOffset) {\n            mirror.writeArrayLength(value);\n            return", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "   if ((paramInt1 != 0 ? 0 : 1) != 0)\n    {\n      Dlasdt.dlasdt(paramInt3, localintW2, localintW1, paramArrayOfInt5, i2 - 1 + paramInt23,", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\n\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                    SpellName = \"LuxQ\",\n                    Slot = SpellSlot.Q,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\n```python\n# Define the number of rows and columns\nrows = 5\ncols = 5\n\n# Initialize the matrix\nmatrix = [[0 for _ in range(cols)] for _ in range(rows)]\n\n# Fill the matrix with random numbers\nfor i in range(rows", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "   self.assertRaises(\n        OSError,\n        lambda: subprocess.Popen(\n            ['/sbin/modinfo', '-d', 'somemodule'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\n\t\t\t// start core services\n\t\t\tLoggingService.Info(\"Starting core services...\");\n\t\t\tPropertyService.Start();\n\t\t\tResourceService.Start();\n\t\t\tAddInTree.Start();\n\t\t\tMessageService.Start();\n\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\n// 1. The input is a string.\n// 2. The input is not empty.\n// 3. The input is not a number.\n// 4. The input is not a boolean.\n// 5. The input is not a null value.\n// 6.", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "self.verticalLayout_2.addWidget(self.settings_ui_groupbox)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n    } catch (Exception e) {\n        e.printStackTrace();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "           }\n            return (ushort)((uiCRCITTSum >> 8) ^ uiByteValue);\n        }\n        /// <summary>\n        /// Reflects a byte in the given order.\n        /// </summary>\n        /// <param name=\"c\">The byte", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\n    if (animateUpwards && headYTranslation > UPWARDS_ANIMATION_LIMIT) {\n        headYTranslation -= ANIMATION_STEP_SIZE;\n        if (headYTranslation <= UPWARDS_ANIMATION_LIMIT) {", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "\n    public IInformationControlCreator getInformationControlCreator(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationControlCreator(editor, \n                \"Tab or click for focus\");\n    }\n\n    public IInformationControlCreator getInformationControl", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = false;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "\n    }\n    catch (Exception e)\n    {\n        throw new RuntimeException(e);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n    public static List<KeyValuePair<int, int>> getUnmappedOrderLines(ESDocumentOrderSale esDocumentOrderSale)\n    {\n        List<KeyValuePair<int, int>> unmappedLines = new List<KeyValuePair<int, int>>();", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\n// 1. The input is a string.\n// 2. The input is a list of strings.\n// 3. The input is a list of lists of strings.\n// 4. The input is a list of lists of lists of strings.\n// 5. The input is", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "\n    final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v.ScaleFactor (viewport);\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale)\n\t\t{\n\t\t\treturn v.ScaleFactor (viewport) * scale;\n", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_stats_entry(XDRStruct):\n    __slots__ = ['endpoint', 'stats']\n    def __init__(self, endpoint=None, stats=None):\n        self.endpoint = endpoint\n        self.stats = stats\n    @classmethod\n    def pack", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tConsole.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/Client \" + i.ToString() + \" has been disconnected\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// sends", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "\n```python\nif type == RequestType.Activity:\n    logDataSet(convertToActivityBucketList(list));\nelse:\n    logDataSet(convertToStepBucketList(list));\n```\n\nExplanation: The `if` statement checks if the `type`", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " if bind_count:\n    for i in xrange(bind_count):\n      print '    A%d a%d%s' % (i, i, ')' if i != bind_count - 1 else ' {')\n  else:\n    print '    ReturnType", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(mimetype='application/json')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    writer = json.JSONEncoder()\n    writer.indent", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "   }\n    /**\n     * Given\n     * \n     * <pre>\n     * PREFIX bd: <http://www.bigdata.com/rdf/search#>\n     * SELECT ?subj ?score \n     * {\n     *    SELECT ?", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n# -*- coding: utf-8 -*-\n# This file is part of Shoop.\n#\n# Copyright (c) 2012-2015, Shoop Ltd. All rights reserved.\n#\n# This source code is licensed under the AG", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "\n    return this.ResolvedAssembly.PublicKeyToken;\n\nExpected output:\n\n    return this.ResolvedAssembly.PublicKeyToken;\n\nActual output:\n\n    return this.ResolvedAssembly.PublicKeyToken;\n\n```python\n# Test case\nassembly =", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "\n// <copyright file=\"TFQMR.cs\" company=\"Math.NET\">\n// Math.NET Numerics, part of the Math.NET Project\n// http://numerics.mathdotnet.com\n// http://github.com/mathnet/mathnet-numerics\n//", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\nApfloat[] medians = new Apfloat[1];\nmedians[0] = sortedNumbers[left];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "   for u in range(v.num_nodes):\n        if v.parent[u] != -1:\n            A[u, v.parent[u]] += 1\n            L[u] += 1\n    for u in range(v.num_nodes):\n       ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   result['mapping'] = mapping_json\n        except Exception as e:\n            result['mapping'] = '{}'\n        except Exception as e:\n            result['mapping'] = '{}'\n        except Exception as e:\n            result['mapping'] = '{}'\n        except Exception", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar bot = new LobbyFaction { Selectable = true, Name = \"Bot", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\n// This code is derived from jcifs smb client library <jcifs at samba dot org>\n// Ported by J. Arturo <webmaster at komodosoft dot net>\n//  \n// This library is free software; you can redistribute it and/or", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "   return frame_header + padding_bytes + self.data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.IsEmpty)\n                return;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\n1. The input is a list of integers.\n2. The input is a list of integers.\n\n$[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]$\n\nresult: The result is a", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "\n    if (initializers.size() > 0) {\n        for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\n\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(Context, _returnNode, _returnType.ItemName);\n\t\t\t\t\t_returnType.InitType();\n\t\t\t\t}", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\n//\n// TrackBarTest.cs: Test cases for TrackBar.\n//\n// Author:\n//   Ritvik Mayank (mritvik@novell.com)\n//\n// (C) 2005 Novell, Inc. (http://www.novell", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\n    public static class AddInstrumentationPoints extends ClassCacheInstrumentationTest {\n        @Test\n        public void add() throws Exception {\n            when(classType.isClass()).thenReturn(true);\n            when(classType.castToClass()).thenReturn(classType);\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\n    return localEquals(other);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "\n    } // end for diff\n    return prunedSomething;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "   cmd.pipe_processor_loop([\n        StreamLineProcessor(\n            pipe.stdout,\n            cmd.make_logging_handler(INFO, 'out: '),\n        StreamLineProcessor(\n            pipe.stderr,\n            cmd.make_logging_handler(WARNING,", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\n    process.IsRunningChanged -= DbgProcess_IsRunningChanged;\n    process.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n    process.ThreadsChanged -= DbgProcess_ThreadsChanged;\n    process.RuntimesChanged -= DbgProcess", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\n```python\n# Write the next line of code here\n```\n\nOutput:\n\n```\n<material name=\"material0\">\n\t<color r=\"1\" g=\"1\" b=\"1\"/>\n\t<corner x=\"-0.25\" y=\"-0.2", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\ndef get_all_contacts():\n    \"\"\"\n    Get all contacts from the database.\n\n    Returns:\n        list: A list of contacts.\n    \"\"\"\n    # Get all contacts from the database\n    contacts = Contact.query.all()\n    return contacts\n\n\n", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n# Read input file\nread = read_input.ReadInput(input_file)\n# Set some variables for the simulation\neta = read.eta\na = read.blob_radius\noutput_name = read.output_name\nstructures = read.structures\nprint(structures", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "   if cdata is None:\n        return\n    if not isinstance(cdata, list):\n        cdata = [cdata]\n    if not isinstance(cdata[0], T.TensorConstant):\n        return\n    if not isinstance(cdata[0", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "from django.contrib.auth.models import Group\nfrom common.forms import ModelFormWithHelper\nfrom common.helpers import SubmitCancelFormHelper\nfrom community.constants import COMMUNITY_ADMIN, COMMUNITY_PRESENCE_CHOICES\nfrom community", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "   return fn(*arg, **kw)\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it is composed into a\n        core :class:`.Select` object.\n        This event is intended to allow changes to the query given::\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "\ndef main():\n    # Create a new instance of the ConditionalModule class\n    conditional = ConditionalModule(\n        'conditional_module',\n        'conditional_module.xml',\n        'conditional_module.js',\n        'conditional_module.css',\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "   self.update_filtered_data()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\n\t\t\tif (Class != null && type == null)\n\t\t\t{\n\t\t\t\tif (Method != null || Field != null || Sig != null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError,", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "\n    def testMsgS5(self):\n        c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files),\n                         set([\"test/mail/sync", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "\n    if (termData == null) {\n        termData = new ArrayListValuedHashMap<>();\n        this.data.put(row.get(ID_KEY), termData);\n    }\n\n    termData.put(row.get(0), row.get(1));\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "\n    @Override\n    public boolean GROWTH(Node candidate, Community com) {\n        //DebugMode.printDebug(\"------ ? integrate \"+candidate.getName()+\" in \"+com.getID()+\" \"+this.getBelongingStrength(candidate, com)+\"", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "\ndef _retrieve_fulltext_recids():\n    \"\"\"Returns the list of all the recid number linked with at least a fulltext\n    file.\"\"\"\n    res = run_sql('SELECT DISTINCT id_bibrec FROM bibrec_bibdoc')\n    return", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\n\t\t\t/*clean up*/\nNext line of code:\n\n\t\t\t/*clean up*/\nNext line of code:\n\n\t\t\t/*clean up*/\nNext line of code:\n\n\t\t\t/*clean up*/\nNext line of code:\n\n\t\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "\n    return new ExDate(exDateList);\n\nError:\n\nException in thread \"main\" java.lang.NullPointerException\n    at com.stratelia.webactiv.almanach.control.ejb.ICal4JEventOccurrencesGenerator.generateExceptionD", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\nif( sourceEventBinding == null )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            SpanConfig cfgObject = new SpanConfig(jsonData);\n            Status result = switchManager.addSpan(cfgObject);\n            if (", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate final class LocalFormName extends FormName\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\t\tprivate Local", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n    return rnd.nextInt(size);\n\nExplanation:\n\nThe `randomChoice` method takes an integer `size` as a parameter. It uses the `Random` class's `nextInt` method to generate a random integer between 0 and `size - 1`.", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "\n    \"\"\"\n    PRED_SBJ_IS_SUB_OF_OBJ = 'skos:broader'  # default predicate for subject item is subordinate to object item\n    def __init__(self):\n        self.project_uuid = '0'\n        self.source", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "\n    buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n    buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\n\t\t\t\t// half-width kana\n\t\t\t\tbytes[posn++] = (byte)((ch - 0xFF60) * 2);\n\t\t\t} else {\n\t\t\t\t// Character maps to itself.\n\t\t\t\tbytes", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap.loadProperties(stream);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "\n    public WorldSettings(long seedIn, WorldSettings.GameType gameType, boolean enableMapFeatures, boolean hardcoreMode, WorldType worldTypeIn)\n    {\n        this.worldName = \"\";\n        this.seed = seedIn;\n        this.theGameType = game", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\n\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor (false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.PurgeDefaultDacl ();\n\t\t\tAssert.AreEqual (0, csd.Discretion", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "\n    def run(self):\n        self.__idle(self.__process, self.__queue.get)\n        self.__idle(self.__progress_cb, self.__queue.qsize())\n        self.__idle(self.__done, self.__queue.qsize())\n       ", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "   }\n\n1. The code is in a loop that runs 100 times per second.\n2. The code needs to update the RPC list.\n\n$UpdateRpcList();$\n\nresult: The RPC list is updated.\n\n```python\ndef UpdateRpc", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        full_msg.setText(message.msg);\n        full_msg.setMovementMethod(CustomLink", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "\n# Copyright (C) 2003  CAMP\n# Please see the accompanying LICENSE file for further information.\n\"\"\"K-point/spin combination-descriptors\nThis module contains classes for defining combinations of two indices:\n* Index k for ir", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "\n    CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILLabel) {\n\t\t\t\t\t\tflatBody.Add(child);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (prevChild", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\n    if (IsRagdoll) {\n        return;\n    }\n\n    //if we're the brain then we're the one setting the position\n    //update the position based on the owner's position\n    if (NObject.isMine && HasOwner)", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def fix_region_id(self):\n        for reg_list in  [self.polygon_region_ids, self.segment_region_ids, self.node_region_ids]:\n            for i in range(0, len(reg_list)):\n                if reg_", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "\n    intTobytes(num, out, outOff);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                this.match, this.expressions ) );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "\ndef transform_values_holder_xml_json_to_json(values_xml_json, format ='date'):\n    comments = []\n    values_json = collections.OrderedDict()\n    for key, value in values_xml_json.iteritems():\n        if key", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n  }\n  /**\n   * Remove an internal frame icon from the panel.\n   * Remove an internal frame listener.\n   * @param frame internal frame to remove\n   */\n  public final void remove", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\ndef getNearestLC(ID, tol):\n    global RETRY\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.LINGER = False\n    socket.connect(servers.best)\n    socket", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (left", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "\n    if (newId != -1) {\n        ContentValues cv = new ContentValues();\n        cv.put(Db.Table1.ID_GROUP, newId);\n        db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "\n// Taken from https://stackoverflow.com/questions/6596327/how-to-check-if-a-file-is-signed-in-c\nusing System;\nusing System.Runtime.InteropServices;\nnamespace VisualStudioHelpDownloaderPlus\n{", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (numberToCancel > queue.Count)\n\t\t\t\treturn;\n\t\t\tvar item = queue.ElementAt(numberToCancel - 1);\n\t\t\tif (item.Item == itemName)\n\t\t\t{\n\t\t\t\titem.", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    self.currentDirTxtLine.setText(self.currentDir)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = code.replace('%', '%')\n        # replace all $ by $$ to prevent errors by $ signs\nNext line of code:\n        code = code.replace('$', '$')\n        # replace all @ by @@ to prevent errors by @ signs\nNext line of code:", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        #return result\n        #return self._result\n        #return self._result.success\n        #return self._result", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent - 1 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "\n    private void createImportedType(int position) throws JsonException;\n\nExpected output:\n\n    private void createImportedType(int position) throws JsonException;\n\nActual output:\n\n    private void createImportedType(int position) throws JsonException;\n\n", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic System.Type ReturnedType\n\t\t{\n\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   self.cli_load_config(commands)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "   with check_mongo_calls(1, 1):\n        self.assertEqual(component.edited_by, editing_user)\n        self.assertEqual(component.subtree_edited_by, editing_user)\n        self.assertEqual(component.sub", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "\n    public void characters(char ch[], int start, int length) throws SAXException {\n        digest.update((byte) ((TEXT_CODE >> 24) & 0xff));\n        digest.update((byte) ((TEXT_CODE >> 16) &", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\n    return aetypes.Logical(dict)\ndef mkobject(dict):\n    return aetypes.", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           var type = GetActualType(controllerName, actionName, parameterNames, sampleDirection, out formatters);\n            return type;\n        }\n        /// <summary>\n        /// Gets the actual type of <see cref=\"System.Net.Http.ObjectContent{T}", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "\n# This file is part of Tryton.  The COPYRIGHT file at the top level of\n# this repository contains the full copyright notices and license terms.\nimport gtk\nimport parser\nimport gettext\nimport gobject\nfrom itertools import islice, cycle\nfrom", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "   f.readline()\n\n\n    f.close()\n    if f is not None:\n        module.exit_json(changed=False, msg=\"File %s already exists\" % path)\n    if state == \"present\":\n        if not password:\n            password = \"", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "   }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "   return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   clone.specified = node.specified\n    clone.value = node.value\n    if deep:\n        for child in node.childNodes:\n            c = _clone_node(child, deep, newOwnerDocument)\n            clone.appendChild(c)\n    return clone\n", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(expectedType, endOffset)) {\n\t\t\t\tdecodeName(keyLocator.getKeyName(), new int[1], new int[1], decoder);\n\t\t\t\tif (expectedType == TlvTypeCodes.", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "\n    }\n    \n    @Override\n    public void render(GameContainer container, Graphics g) throws SlickException\n    {\n        //Draws the HUD\n        display.render(g);\n        //Draws the map\n        StarMap.draw(g, 0,", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "\n    m_btnOk.addClickHandler( new ClickHandler()\n    {\n      @Override\n      public void onClick(ClickEvent p_event)\n      {\n        int colorValue = Integer.parseInt( m_colorSelection.getValue( m_colorSelection\n            .getSelectedIndex", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "   with open(os.path.join(os.getcwd(), os.path.basename(r.headers[\"content-disposition\"])), \"wb\") as f:\n        f.write(r.data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\n\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.FailureReason;\n\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   return [coeff * met.weight for met, coeff in reaction.metabolites.items()]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "   return self.get_queryset().filter(pootle_path__startswith=pootle_path,\n                                     submitted_by=user)\n    def get_for_path_and_user(self, pootle_path, user):\n        \"\"\"Returns", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "\ndef flowlet_to_packet(flowlet):\n    if hasattr(flowlet, \"origpkt\"):\n        return getattr(flowlet, \"origpkt\")\n    ident = flowlet.ident.key\n    etherhdr = pktlib.ethern", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "\n    if (m_IgnoreChanges)\n      return;\n    m_RecentItems.add(item);\n    writeProps();\n    notifyRecentItemListenersOfAdd(item);\n  }\n  \n  /**\n   * Removes the item from the internal list", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "\nif (src.Map == null || target.Map == null || !src.CanBeHarmful(target, false))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "\n    public void setDepositTx(Transaction tx) {\n        log.debug(\"setDepositTx \" + tx);\n        this.depositTx = tx;\n        setupConfidenceListener();\n        persist();\n    }\n\n\n\n\n\n\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\n\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t\treturn a;\n\t\t}\n\t\treturn p;\n\t}\n\t\n\tstatic void CompFollowSets2() {\n\t\tforeach (Symbol sym in Symbol.", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\tif(!mReadDone.WaitOne(1000, false))\n\t\t\t\tthrow new WiimoteException", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = 1;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMskJointVo vo1 = (M", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\n\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.GetData(), length );\n\t\t\t\tshadowBuffer.", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.createSetup()\n\t\t\tself.prepareFrontend()\n\t\t\tif self.frontend == None:\n\t\t\t\tmsg = _(\"Tuner not available.\")\n\t\t\t\tif self.session.nav.RecordTimer.isRecording():", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "\n    public void setSocketOpt(int option, Object optval)\n    {\n        switch (option) {\n        case ZMQ.ZMQ_SNDHWM:\n            sendHwm = (Integer) optval;\n            if (sendHwm < 0)", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "\n1. The code is a part of a larger program\n2. The code is a part of a larger program\n3. The code is a part of a larger program\n4. The code is a part of a larger program\n5. The code is a part of a larger program\n6. The", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "\n# Copyright (C) 2006 Collabora Ltd. <http://www.collabora.co.uk/>\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   output += \"\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "\n    }\n\n    public class TestEmptyMessage\n    {\n        public int32 Int32 { get; set; }\n        public int64 Int64 { get; set; }\n        public uint32 Uint32 { get; set; }\n        public uint", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\ndef get_all_users():\n    \"\"\"\n    Returns a list of all users.\n\n    Returns:\n        list: A list of all users.\n    \"\"\"\n    users = []\n    for user in User.objects.all():\n        users.append(user)\n   ", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member bidding on an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\n    return action_message\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().newRow();\n\t\tparentRow.setValue(orderInvestigationLiteVo);\n\t\tparentRow.setColTestName(orderInvestigationLiteVo.getInvestigation().", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "\n    /// <summary>\n    /// The index of this item's image in the image list of this list view.\n    /// </summary>\n    public int ImageIndex { get { return image; } }\n    /// <summary>\n    /// The index of this item's image in", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       return maker.tab_new(self, cwd, profile, debugtab)\n    def tab_new_from_terminal(self, terminal, cwd=None, profile=None, debugtab=False):\n        \"\"\"Make a new tab from a terminal\"\"\"\n        mak", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "   return toReturn;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (base_type != null && base_type.IsTypeOf (\"System\", \"Enum\"))\n\t\t\t\t\treturn false;\n\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "   self.protocol = protocol\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.hbox3.Add (this.label8);\n\t\t\tglobal::Gtk.Box.BoxChild w28 = ((global::Gtk.Box.BoxChild)(this.hbox3 [this.label8]));\n\t\t\tw28.Position =", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   if old_num == -1:\n        log.error('Games and labels are out of sync!')\n    else:\n        notebooks[\"board\"].set_current_page(new_num)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-left-reverse\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_8", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\ndef get_all_users():\n    \"\"\"\n    Returns a list of all users in the database.\n\n    Returns:\n        list: A list of dictionaries representing each user in the database.\n    \"\"\"\n    # Connect to the database\n    conn = sqlite3.connect('users", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "\n    return false;\n\nExplanation:\n\nThe code is checking if the file is read-only. If it is, it returns false, indicating that the file is not read-only.\n\n```python\ndef is_file_read_only(file_path):\n    return", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n    public static void writeMarkContentHtml(Writer out, String urlPrefix, String redirectUrl, MarkedContent content)\n            throws IOException, UnsupportedEncodingException\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\n\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key shorter than the length of the HMAC output.\n", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (File.Exists(resinHome + @\"\\lib\\java.home\"))\n        return resinHome + @\"\\lib\\java.home\";\n      else if (File.Exists", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   if job is not None:\n        for l in self.lines:\n            if comment is not None:\n                if comment == name:\n                    return [comment, l]\n                else:\n                    comment = None\n            elif re.match(r'%s' % job", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "\n# Nikita Akimov\n# interplanety@interplanety.org\n#\n# GitHub\n#   https://github.com/Korchy/BIS\n# Mesh Modifiers\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n#", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\n    public void buildAllelePeptideLikelihoods(\n            final Map<String,Map<Integer,List<BindData>>> allelePeptideData, final String outputFilename)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "#!/usr/bin/python\nimport argparse, sys, time, logging\nlogging.getLogger(\"scapy.runtime\").setLevel(logging.ERROR)\nfrom scapy.all import *\n\"\"\"\nAuthor: mtask@github.com\nProgram: pydump.py\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 163);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return false;\n            }\n        }\n        return true;\n    }\n    private void preprocessGlobalTypes(Schema parsedSchema) {\n        // preprocess global types\n        Iterator<Type> iter = parsedSchema.getTypes().iterator();\n        while (iter.hasNext", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       return self.holidays_first_validate(cr, uid, ids, context=context)\n    def holidays_first_validate_notificate(self, cr, uid, ids, context=None):\n        obj_emp = self.pool.get('hr.", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "\n    return 1;\n\nExpected output:\n\n1\n\nActual output:\n\n1\n\n```python\ndef test_next_line_of_code():\n    assert 1 == 1\n```\n\n# 10.1.1.1.1", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "\n// created on 10/12/2002 at 20:37\nusing System;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing xServer.Core.NAudio.Wave.MmeInterop;\nnamespace", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tif (valueObject.getCareContext() instanceof HibernateProxy) // If the proxy is set, there is no need to lazy load, the proxy knows the id already. \n\t\t\t{\n\t\t\t\tvalue10 = (ims.core.admin.domain.objects", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "\n# Copyright 2013 The Servo Project Developers. See the COPYRIGHT\n# file at the top-level directory of this distribution.\n#\n# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n# http", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\n\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "\nif (o instanceof AuthScope) {\n    AuthScope scope = (AuthScope) o;\n    return this.match(scope) == 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n    public int AddInt(int a, int b) {\n        object[] results = this.Invoke(\"AddInt\", new object[] {\n                a,\n                b});\n        return ((int)(results[0]));\n    }\n\n    public System.IAsyncResult BeginAdd", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\n/*******************************************************************************\n * HELIUM V, Open Source ERP software for sustained success\n * at small and medium-sized enterprises.\n * Copyright (C) 2004 - 2015 HELIUM V IT-Solutions", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\ndef main():\n    parser = ArgumentParser()\n    parser.add_argument('-v', '--verbose', action='count', default=0, dest='verbosity')\n    parser.add_argument('-V', '--version', dest='version', help='Show version", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   self.bit_ss, self.bit_es = self.mosi_bits[5 - 4][6][1], self.mosi_bits[5 - 4][6][2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (cursor >= limit) {\n            break lab1;\n          }\n          cursor++;\n        } while (false);\n        break lab0;\n      case 2:\n        // (, line 202\n        // or, line 202\n        lab2", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "\n    public void messageReceived(LCM lcm, String channel, LCMDataInputStream dins)\n    {\n        Object o = null;\n        ChannelData cd = channelMap.get(channel);\n        int msg_size = 0;\n        try {\n            msg_size", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result\n    def _get_key_usage(self):\n        result = []\n        for usage in self.cert.get_key_usage():\n            result.append(crypto_utils.pyopenssl_normalize_name(usage.strip()))\n        return result\n", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\n#!/usr/bin/python\n#\n#   Copyright (C) 2009-2012 Paul Davis \n#\n#   This program is free software; you can redistribute it and/or modify\n#   it under the terms of the GNU General Public", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # The first value is the same as the first value of the interval.\n    # The second value is the same as the second value of the interval.\n    # The first value is the same as the first value of the interval.\n    # The second value is the same as the second value of", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "   edi_doc_list.append(edi_doc)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\n    return new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "   }\n\nThe next line of code is:\n\n    }\n\nThis line of code is part of a method that is used to map a list of permission entries to a map of strings to lists of permission entries. The method is called `mapPermissionsByName`, and it takes a list of", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\n# -*- coding: utf-8 -*-\n# Copyright (C) 2010, 2011, 2012 Sebastian Wiesner <lunaryorn@gmail.com>\n# This library is free software; you can redistribute it", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   user = User(app, loginId, password)\n    user.login()\n    user.mainmenu()\n    user.endTutorial()\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardComboUpdate()\n    user.roundtable.", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n# We send back a dictionary.\nrd = { 'index': { 'time': [], 'source': [], 'calcode': [], 'antennas': [],\n                      'spectral_channels': [], 'wideband_channels': [], 'freq_config': [],\n                     ", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                ItemID = m_Keys[0].ItemID;\n            }\n            else\n            {\n                ItemID = 0;\n            }\n        }\n        public override void GetProperties(ObjectPropertyList list", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181025 - Added 1 - If we get an null here, return empty list and stop any more attempts...", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "\n    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "   if (split.length == 3) {\n      String type = split[2];\n      String regex = split[1];\n      String overwritable = split[0];\n      if (overwritable.equals(\"\")) {\n        overwritable = null;\n      }\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "   return (n, sub_path)\n    def find_include_path(self, include, source_dir, path):\n        try:\n            sub_path = path[include[0]]\n        except (IndexError, KeyError):\n            sub_path = ()\n        try", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   >>> from mapnik import Datasource, Layer\n    >>> ds = Datasource(type='osm')\n    >>> ds.envelope = Box2d(-180, -90, 180, 90)\n    >>> ds.geometry_type =", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [(\"var\", \"value\", \"type\"), ...] to fill the view\n        \"\"\"\n        if set(values) == set(self.all_vars):\n", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "\n    public IAction getActionObject(String className) throws Exception {\n        IAction result = null;\n        String classPath = getActionProperty(className);\n        if (classPath != null) {\n            // using reflection, load the class for the service\n            Class<?> actionClass", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "   if env.get('WINDOWS_EMBED_MANIFEST', 0):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "   final IStatus[] errorStatus = new IStatus[1];\n            final IProgressMonitor monitor = new SubProgressMonitor(new SubProgressMonitor(new ProgressMonitorJobsDialog(shell, getOperationMessage()), 1000), 1000);\n            final", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\n\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "\ndef test_parse_bounds_for_a_date_in_the_future():\n    f = utils.parse_date_time_bounds\n    d = datetime\n    now = d.now()\n    last = d(2014,1,15,", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //HomeRange\n            string shomerange = shomerange;\n            if (shomerange.Contains(\"s\") || shomerange.Contains(\"m\") || shomerange.Contains(\"h\"))\n                shomerange = shomerange.Remove(shomerange.Length - ", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "   s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "\n    @Test\n    public void testUnsubscribeIssue554() throws Exception\n    {\n        final int port = Utils.findOpenPort();\n        final ExecutorService service = Executors.newFixedThreadPool(2);\n        final Callable<Boolean> pub = new", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "\n    } catch (BodyTerminatedException e) {\n        logger.info(\"[FAULT] \" + this.ownerID + \" : FAILURE OF \" + destination.getID() +\n            \" SUSPECTED ON REQUEST SENDING : \" + e.getMessage());", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\n\t\t\treturn (uint)((value >> 24) | (value >> 16) | (value >> 8) | value);\n\nExpected output:\n\n\t\t\treturn (uint)((value >> 24) | (value >> 16) |", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "   self.fm.notify(descr, bad=True)\n    self.fm.execute_command(au_flags, flags='p')\n    self.fm.env.copy.append(one_file)\n    self.fm.env.cut = True\n    self.fm", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, null);\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "\nfrom django.contrib.auth.models import User\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "\n    public static void changeLeader(Player player) {\n        PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n        }\n    }\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\ndef tokenrow(toks):\n    if isinstance(toks, str):\n        toks = (Token.Literal, toks)\n    return tokenrow(toks)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\n    return super.doStartTag();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "\n    public void LoadXML(XmlNode element, FileVersion version)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\t\tm_key[i].Activate( from );\n\t\t\t\t}\n\t\t\t\tm_ResetTimer.Stop();\n\t\t\t\tm_Reset", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\n\t\tfor(int x = 0; x < col.size(); x++)\n\t\t{\n\t\t\tChangeOfServiceVo vo = ((ChangeOfServiceVo)col.get(x));\n\t\t\tvo.setId(vo.getId());\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tkdf.ComputeHash(pbMsg, pbSalt, pbKey, pbAssoc, pbExpc);\n\t\t\tif(!MemUtil.ArraysEqual(pbExpc, pbExpc))\n\t\t\t\tthrow new SecurityException(\"", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "from django.conf.urls import patterns, include, url\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.conf.urls.static import static\nfrom django.conf.urls import patterns, include, url\nfrom django.conf.urls.static import", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\n\t\t\t\t\t\t\" but Lights has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\t\tLightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "\n    public ManualTestResult(ManualState state, LogTrace userMessage, LogTrace userErrorMessage,\n            NabuccoList<ActionTrace> actionTraceList, NabuccoList<ScreenshotTrace> screenshots,\n            NabuccoList<FileTrace", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "\n    dc.number = p.readString();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\ndef get_all_users():\n    \"\"\"\n    Returns a list of all users in the database.\n\n    Returns:\n        list: A list of user objects.\n    \"\"\"\n    return User.objects.all()\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "\n    public void GenerateMesh()\n    {\n        Mesh mesh = new Mesh();\n        if (meshFilter != null)\n            meshFilter.mesh = mesh;\n        int xSizeP = xSize + 1;\n        int ySizeP = ySize", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\n\t\t\tint testInt2 = rand.nextInt(5000);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[]", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "\n    public synchronized int lookupObject(String name)\n        throws CannotCompileException\n    {\n        ExportedObject eo = exportedNames.get(name);\n        if (eo == null)\n            throw new CannotCompileException(\"unknown object\");\n        return e", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n    public static VhScreenRefreshPtr stactics_vh_screenrefresh = new VhScreenRefreshPtr() {\n        public void handler(osd_bitmap bitmap, int full_refresh) {\n            int offs, sx, sy, i;\n            int char_", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n    }\n\n    public static bool BadaoCast2(this Spell spell, Obj_AI_Base target)\n    {\n        var prediction = spell.GetBadao2Prediction(target);\n        if (!spell.IsSkillshot)\n            return false", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "\n    public static boolean existsInducingPathInto(Node x, Node y, Graph graph) {\n        if (x.getNodeType() != NodeType.MEASURED) throw new IllegalArgumentException();\n        if (y.getNodeType() != NodeType.ME", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "\n    public Drawable FindElement(string Name)\n    {\n        if (this.Name == Name)\n            return this;\n        var plcs=new System.Collections.Generic.Stack<PlaceBase>();\n        if (this is PlaceBase)\n            plcs.Push(this", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "\n    public boolean matches(FinancialEntityAttachment other) {\n        if (this == other) {\n            return true;\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "\n    public BaseConflagrationPotion(PotionEffect effect)\n        : base(0xF06, effect)\n    {\n        Hue = 0x489;\n    }\n    public BaseConflagrationPotion(Serial serial)\n        :", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Message(PlayerMobile user, string text)\n\t\t{\n\t\t\tMessage(user, text, false);\n\t\t}\n", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "\ndef get_all_users(self):\n    \"\"\"\n    Returns a list of all users in the organization.\n\n    Returns:\n        list: A list of all users in the organization.\n    \"\"\"\n    return self.get_users()\n\n\n    \"\"\"\n    Returns a", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "\n    public void finishActionMode() {\n        if (this.mActionMode != null) {\n            this.mActionMode.finish();\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\ndef find_common_elements(a, b):\n    \"\"\"\n    Finds the common elements between two lists.\n\n    Args:\n        a (list): The first list.\n        b (list): The second list.\n\n    Returns:\n        list: The common elements", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n    # get the number of periods for each component\n    z_num = len(z_dict[z_key])\n    t_num = len(t_dict[t_key])\n    \n    # get the number of periods for each component\n    z_num = len(", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "\n    return getPluralizedIdentityDescription(context, recipients, resourceOne, resourceTwo, resourceMany);\n\nExpected output:\n\n    return getPluralizedIdentityDescription(context, recipients, resourceOne, resourceTwo, resourceMany);\n\nActual output:\n\n   ", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "   env[\"PATH\"] = \"%s:%s\" % (env[\"PATH\"], \":\".join(extra_path))\n    env[\"LD_LIBRARY_PATH\"] = \"%s:%s\" % (env[\"LD_LIBRARY_PATH\"], \":\".join(extra_lib))\n", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "   for path, tests in sorted(iteritems(type_paths)):\n        for test in tests:\n            yield test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\n        if (compiledScript != null) {\n            compiledScript.remove();\n        }\n    }\n    private void handleScriptRuntimeException(final GroovyRuntimeException e, final PrintStream outStream, final IFreeplaneScriptErrorHandler errorHandler) {\n        if (e.get", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n//    CANAPE Network Testing Tool\n//    Copyright (C) 2014 Context Information Security\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\ndef transform_array(X, y, w):\n    \"\"\"Transform the data in a set of (X, y, w) arrays.\"\"\"\n    if self.transform_X:\n      X = np.nan_to_num((X - self.X_means) / self", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\n\t\tif(obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t{\n\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\t\tint compare = this.getId().compareTo(", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "\n    public void updateAll() throws Exception {\n        stacks[0].getTags().clear();\n        stacks[1].getTags().clear();\n        stacks[2].getTags().clear();\n        stacks[3].getTags().clear();\n        stacks[0", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "\n        Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterFamilyCode(pf.getParameterFamilyCode());\n        depthParameter.setParameterName(depth);\n        depthParameter.setParameterValue(depth);\n        depthParameter.setParameterType(ParameterType.INTEGER", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == LNodeKind.Block)\n\t\t\t{\n\t\t\t\tvar block = (LBlock)candidate;\n\t\t\t\tvar patternBlock = (LBlock)pattern;\n\t\t\t\tif (block.Count != patternBlock.Count", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n            }\n            }\n        }\n        public void Interrupt()\n        {\n            if (ObjectManager.Player.HasBuff(\"zedwhandler\"))\n            {\n                buffTime = Game.Time;\n            }\n        }\n        public void Interrupt(Obj_", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tcontextMenus = new ContextMenus();\n\t\tcontextMenus.initialize(loadContextMenus(context, form.getFormInfo(), componentIdentifier));\n\t\t// Images\n\t\tcontext.loadMessageImages();\n\t\t// Labels\n\t\tcontext.loadLocal", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, 1, 2)).change_index(x, (x, 1, 2)) == Sum(x, (x, 1, 2))\n    assert Sum(x, (x, 1, 2)).change_index(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           }\n            else if (action == NotifyCollectionChangedAction.Remove)\n            {\nNext line of code:\n            }\n            else if (action == NotifyCollectionChangedAction.Reset)\n            {\nNext line of code:\n            }\n            else\n            {\nNext", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "\n    public void testObjectToXMLStreamWriter() throws Exception {\n        if(XML_OUTPUT_FACTORY != null && staxResultClass != null) {\n            StringWriter writer = new StringWriter();\n            XMLOutputFactory factory = XMLOutputFactory.newInstance();\n            factory", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "   }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\n    if (position == Position.INSIDE) {\n        lblLabelPosition.setText(\"Label Position: Inside\");\n    } else {\n        lblLabelPosition.setText(\"Label Position: Outside\");\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "   # Check that the image text box value is now 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   if srv_token is not None:\n        m = Message()\n        if self.kexgss._gss_srv_ctxt_status:\n            mic_token = self.kexgss.ssh_get_mic(self.transport.session_id,", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "\n    public void setFolder(\n            String overallNodeName,\n            DatabaseConnection connectionData,\n            boolean disableTreeSelection) {\n        if (tree != null) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "\n    return lines\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       dVdzdOm.append(cosmo.dVdzdOm(zi))\n        #OK\n        #Number of objects/Mpc^3 (i.e. unit is 1/Mpc^3)\n        mf.append(cosmo.MF(zi", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dimension();\n        Font font = getFont();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.cal_p2(ref_p=None,phi=phi,flag=flag)\n        self.share_face_init(self.flag)\n        #print \"the distance between the two anchor points is \",f2(p0,p1),'anstrom'\n", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\n\t\t\twindow.ShowDialog();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "   if params[1]['bins'] is None:\n        step = (params[1]['high'] - params[1]['low'])\\\n            / float(params[1]['nbins'])\n        params[1]['bins'] = [\n            params[1]['low'] + n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "\n    public void finalizeQuery(Protocol protocol, Query query) {\n        synchronized (queries) {\n            queries.remove(query);\n        }\n        Contact contact = null;\n        if (query.getWith() != null) {\n            contact = protocol.getItemBy", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "   if im1.mode == \"RGB\":\n        if channel == \"I\":\n            # compute gray level image: I = (R + G + B) / 3\n            im1L = im1.convert(\"L\", rgb2I)\n        elif channel == \"R\":", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\n\t\t\tif (rsp.size() >= 23)\n\t\t\t\taddLog24(rsp, ret);\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parseLog24(Application app, ArrayList<byte[]> l) {", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\ndef parseFlags(self):\n    yield BaseFlags(self, \"flags\", \"Unknown flags\")\ndef parseHeader(self):\n    if self[\"flags/extend\"].value:\n        yield filesizeHandler(UInt32(self, \"body_size\", \"Size of the unknown", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\ndef get_all_users():\n    \"\"\"\n    Get all users from the database.\n\n    Returns:\n        list: A list of users.\n    \"\"\"\n    users = []\n    for user in User.objects.all():\n        users.append(user)\n    return", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   return self.apps[environ['PATH_INFO']]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\nimport sys\nfrom copy import deepcopy as copy\nfrom utils import *\nfrom data import Data\nfrom math import log\nfrom bitarray import bitarray\nclass Model :\n\tdef __init__( self , dataobj = None , modelfile = None ) :\n\t\tif dataobj", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n                res = EnhanceResult.Success;\n        }\n    }\n}\n<gh_stars>1-10\n#!/usr/bin/env python\n# -*- coding: utf-8", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "   return rdltypes.UserEnum(entry_name, entry_value, displayname, desc)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n    }\n}\n\nOutput:\n\n    }\n}\n\nExplanation:\n\nThe code is trying to create a new FrmSetup instance and initialize its properties. However, the constructor is not being called because the code is trying to access the properties of the instance before it is created", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "\n    public class MultiSelectBase<T> : Field, IStore where T : StateManagedItem\n\n    public class MultiSelectBase<T> : Field, IStore where T : StateManagedItem\n\n    public class MultiSelectBase<T> : Field, IStore where T : StateManaged", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n    public RenderingStream render()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ', ' + header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   var = [var]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.addQuestItem(SI_ORE)\nQUEST.addQuestItem(SI_ORE)", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 3600 + (double)num1)) / 60);\n\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "\npublic class ShaderProgram : IDisposable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\nfrom .Object import Object\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\n\t\tfor (int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)beans.get(i);\n\t\t\tcoll.add(vo);\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "\n```python\n# Add the next line of code here\n```\n\nOutput:\n\n```python\n# The output will be displayed here\n```\n\nExplanation:\n\n1. The code snippet is a Python program that defines a function `add_next_line_of_code`", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "\n    }\n\n    // This is the end of the manual code\n\n    // This is the end of the manual code\n\n    // This is the end of the manual code\n\n    // This is the end of the manual code\n\n    // This is the end of the manual code\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\n\t\tint[] \t\tscores \t\t= new int[length];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
