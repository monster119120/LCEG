{"pred": "\t\t\tfor ( int j = 0; j < m_Participants[i].Players.Length; ++j )\n\t\t\t{\n\t\t\t\tDuelPlayer pl = (DuelPlayer)m_Participants[i].Players[j];\n\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tgraph = self.graph.copy()\n\t\t\tA = best(root)  \n\t\t\troots = self.find_roots(A", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def subtitle_languages(self):\n        langs = []\n        els = self.get_elements_list(self._SUB_LANGUAGES + \" a\")\n        for el in els:\n            langs.append(el.text)\n        return lang", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t}\n\t\t\tpublic Object unmar", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "\n/**************************************\n*Script Name: Staff Runebook          *\n*Author: Joeku                        *\n*For use with RunUO 2.0 RC2           *\n*Client Tested with: 6.0.9.2          *\n*Version: ", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "   s.println(\"***\");\n        for (X509Certificate cert : chain) {\n            s.println(\"Certificate: \" + cert);\n        }\n        s.println(\"***\");\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLI", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "\n    public synchronized static JESpace getSpace (String name, String path)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\n```python\n# Add the following line to the end of the code\nprint(\"The value of the variable 'x' is:\", x)\n```\n\nOutput:\n\n```\nThe value of the variable 'x' is: 10\n```\n\nNext line of code:\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "   self.webview.execute_javascript(\"setRepeated('%s')\" % status_id)\n    self.webview.execute_javascript(\"setRepeated('%s')\" % status_id)\n    self.webview.execute_javascript(\"setRepeated", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n    def action_copy_from_sftp(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker copy_from_sftp %s %s\", pprint.pformat(status_id),", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\n\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, c), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, c), \"!", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "\n    return CompositeX509KeyManager(key_managers), CompositeX509TrustManager(trust_managers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Finds the forward to the domain admin page.\n     *\n     * @param mapping The action mapping with possible destinations.\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "\n    def __setup_datastream_pipe(self) -> None:\n        self.__datastream_address = os.path.join(\n            self.__tmp_dir, 'datastream')\n        self.__datastream_transport = asyncio.open_connection(", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "\n    return getArgValues(application, request, defaultMessages, locale, args);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\n\t\taddNode(playbackNode);\n\t\taddNode(shortcutsNode);\n\t\taddNode(generalNode);\n\t\t// Create the dialog\n\t\tPreferenceDialog dialog = new PreferenceDialog(parent, mgr);\n\t\tdialog.create();\n\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n\t\t\tFinishSequence();\n\t\t}\n\t\tpublic override void OnProjectileCast()\n\t\t{\n\t\t\tCaster.Target = new InternalTarget( this );\n\t\t}\n\t\tpublic override void OnProjectileHit( Mobile target )\n\t", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "   self._autoflush()\n    self._finalize_loaded(states)\n    self._autoflush()\n    self._finalize_loaded(states)\n    self._autoflush()\n    self._finalize_loaded(states)\n    self._aut", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\n    if (fields.size()==1) { \n        field2Name.put(fields.get(0), fields.get(0).getName());\n    } else {\n        for(IField field : fields) { \n            field2Name.put(field, field.", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "\n    def addslash(method):\n        \"\"\"Use this decorator to add a missing trailing slash to the request path.\n        For example, a request to ``/foo`` would redirect to ``/foo/`` with this\n        decorator. Your request handler mapping should use a regular expression\n       ", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t\tUpdateViewVisibility ();\n\t\t}\n\t\t\n\t\tprotected internal override void RenderContents (HtmlTextWriter writer)\n\t\t{\n\t\t\tbase.RenderContents (writer);\n\t\t\tUpdateViewVisibility ();\n\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "\n    ## This is for the city of Munich-DE\n    ## TODO: replace this with geocoding\n    self.latmin = 47.95\n    self.latmax = 48.43\n    self.lonmin = 11.00\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   builds.extend(android_builds(build, builds))\n    if build == 'aurora':\n        builds.extend(android_builds('aurora', builds))\n    if build == 'aurora-l10n':\n        builds.extend(android_builds('", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\n    if (stateBean!=null) {\n        return stateBean.getObjectID();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "\n    }\n\n    public class AssignStatement : Statement\n    {\n        public AssignStatement( Expression left, Expression right ) {\n            Left = left;\n            Right = right;\n        }\n\n        public Expression Left { get; }\n\n        public Expression Right { get", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "   split_test = self._update_partition_id(0)\n    # Change to second group configuration.\n    split_test = self._update_partition_id(1)\n    # Verify that the child verticals have been set to match the groups\n    self.assertEqual(", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "\n        } catch (Exception e) {\n            throw new DocumentException(e.Message, e);\n        }\n        catch (Exception e) {\n            throw new DocumentException(e.Message, e);\n        }\n        catch (Exception e) {\n            throw new DocumentException(", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\n    if (model.hasSpriteMap()) {\n      task = new ListenableFutureTask<>(callable);\n      task.addListener(new FutureTaskListener<Bitmap>() {\n        @Override public void onSuccess(final Bitmap result) {\n          Util.runOnMain(", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "\n    }\n\n    public enum NoPermissionVisibility\n    {\n        Invisible,\n        Visible\n    }\n\n    [ToolboxData(\"<{0}:ToolbarButton runat=server></{0}:ToolbarButton>\")]\n    [Themeable(true)]\n    public class", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n```python\n# Initialize the random number generator\nrandom = Random()\n\n# Initialize the number of trials\ntrials = 10000\n\n# Initialize the number of trials\ntrials = 10000\n\n# Initialize the number of trials\ntri", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "\n    return \"Effect{\" +\n        \"probability=\" + probability +\n        \", scopes=\" + scopes +\n        '}';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   if sel_dim:\n        widget_dim.observe(on_widget_dim_change, names='value')\n        widget_x.observe(on_widget_x_change, names='value')\n        widget_y.observe(on_widget_y_change", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "\n            if (toScan.Contains(path))\n            {\n                continue;\n            }\n            toScan.Add(path);\n            if (ignored.Contains(path))\n            {\n                continue;\n            }\n            if (rootFolder.IsNullOrWhiteSpace())", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\ndef print_list(lst):\n    \"\"\"\n    Prints the elements of a list.\n\n    Args:\n        lst (list): The list to print.\n\n    Returns:\n        None\n    \"\"\"\n    for item in lst:\n        print(item)\n\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "   if viewtype.lower() == 'listview':\n        jsondata = getjsondata(self.context,replydict,self.context.portal_url(),contobj.absolute_url())\n        alldiscussions = disc_container.objectValues()\n", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get the parcel voice channel\n                    parcelVoiceInfo = new LLSDParcelVoiceInfoResponse(\n                        land.Name, land.LocalID, land.Flags, land.Flags2, land.Flags3, land.Flags4, land.Flags", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew){\n\t\t\t\tPayPeriods.Add(PayPeriodCur);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_field(header)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_headings['Time", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    if not user:\n        return {'success':", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint outcome = example.getValue(predictionAttribute);\n\t\t\t\t// setting outcome\n\t\t\t\texample.setValue(outcomes, outcome);\n\t\t\t\t// setting confidences\n\t\t\t\tfor (int i = 0; i < number", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new SearchResults[segments.Length];\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = string.charAt(offset++);\n            if (codePoint < 0x10000) {\n               codePoint = codePoint << 10 | string.charAt(offset++);\n            }\n         }\n         if (codePoint < 0", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\n    if (existingRequired) {\n        if (sampleDAO.getSampleByAccessionNumber(accessionNumber) != null) {\n            return ValidationResults.SAMPLE_FOUND;\n        } else {\n            return ValidationResults.SAMPLE_NOT_", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\n\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[x]).", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (bot.IsTraitDisabled)\n\t\t\t\treturn;\n\t\t\tif (bot.IsPaused)\n\t\t\t\treturn;\n\t\t\tif (bot.IsPaused)\n\t\t\t\treturn;\n\t\t\tif (", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\n    return plan;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n\t\t\t\t|", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.StopBits = (StopBits)bits;", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "\n    def test_user_with_cobrand_admin(self):\n        admin = self.make_user('admin')\n        admin.is_superuser = True\n        admin.save()\n        cobrand = Cobranding.objects.create(user=self.user", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    #print \"args is\", args\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"keep_tempdir is\", _keep_temp", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif entry[0] == newListIndex:\n\t\t\t\t\tcurrentListEntry = entry\n\t\t\t\t\tcurrentListIndex = newListIndex\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tnewListIndex += 1", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "\n    public override Rectangle BarcodeSize {\n        get {\n            float fontX = 0;\n            float fontY = 0;\n            if (font != null) {\n                if (baseline > 0)\n                    fontY = baseline - font.GetFont", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "\n    return results;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "   sample_points = [\n        (\"longitude\", x_points),\n        (\"latitude\", np.arange(-90, 90, 2)),\n    ]\n    sampled_cube = traj_interpolate(test_cube, sample_points)", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            if (currPacket == null)\n            {\n                return;\n            }\n            byte[]", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\ndef createBaseFunction( \n    functionName, dll, \n    resultType=ctypes.c_int, argTypes=(),\n    doc = None, argNames = (),\n    extension = None,\n    deprecated = False,\n):\n    \"\"\"Create a base function for", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n    private void writeFileEmptyStreams(final DataOutput header) throws IOException {\n        boolean hasEmptyStreams = false;\n        for (final SevenZArchiveEntry entry : files) {\n            if (!entry.hasStream()) {\n                hasEmptyStreams = true;\n               ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "\n    }\n\n    [Test]\n    public void should_not_be_removable_if_max_idletime_not_reached_and_not_paused()\n    {\n        GivenGlobalSeedLimits(2.0, 20);", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n    public static sega_decryptPtr sega_decrypt77 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {\n            /*unsigned*/\n            int i = 0;\n            /*unsigned*/", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "   return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        self._course_key = self._create_course_key()\n        self._course_dict['course_key'] = self._course_key\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n    # Delete the key and ca files\n   ", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 36);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive.add_string(content=\"\\n\".join(versions),\n                                dest='version.txt')\n        self.archive.add_string(content=\"\\n\".join(versions),\n                                dest='version.txt')\n        self.archive.add_string", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "\n    } catch (MessageImportInvalidPathException e) {\n        parent.alertError(parent, \"The specified file/folder does not contain valid messages.\");\n        setVisible(true);\n        return;\n    } catch (Exception e) {\n        parent.alertError(parent, \"", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\n    public void dispatch(Object options, Object[] args) throws Exception {\n        if (options == null) {\n            throw new IllegalArgumentException(\"options cannot be null\");\n        }\n        if (args == null) {\n            throw new IllegalArgumentException(\"args cannot be null", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "\n    if (currentSession != null) {\n        user = currentSession.getUser();\n        userProfilePicID = user.getId();\n        userProfilePic = user.getPicture();\n        connectedStateLabel.setText(user.getName());\n        connectedStateLabel.set", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\n```python\nfor i in range(len(emotions)):\n    for j in range(len(emotions[i].influences)):\n        sum += emotions[i].influences[j][1]\n```\n\nExplanation:\n\n1. The", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "\n    def test_to_xml(self):\n        \"\"\"Test exporting as XML.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test xml\n        self.assertEqual", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Lat = phi1\n    Long = x\n    return\n#=================================================================\n# Local Time to UTC\n#=================================================================\ndef LocalToUTC(int ReferenceEllipsoid, const double LocalTime, double &UTCSeconds, double &UTCMinutes, double", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "   form = ReportUserForm(request.POST)\n    if form.is_valid():\n        report = form.save(commit=False)\n        report.user = request.user\n        report.user_profile = profile\n        report.save()\n        messages.success(request,", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def page_title(self):\n        return 'Add series'\n    @property\n    def page_description(self):\n        return 'Add a new series to this project'\n    @property\n    def next_url(self):\n        return canonical_url(", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\tform.RightToLeftLayout = false;\n\t\t}\n\t\tpublic void ApplyTo(Control ctl)\n\t\t{\n\t\t\tif(ctl == null) throw new ArgumentNullException", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "\n    return arr;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   return new_positional_tags_list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.set_alias('session', collection)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\n            this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "\ndef find_max_value(arr):\n    \"\"\"\n    Finds the maximum value in a given array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The maximum value in the array.\n    \"\"\"\n\n   ", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   # Compute angles\n    phi = np.arctan(angles[1] / angles[0])\n    theta = phi * 2\n    # Compute lower and upper bound\n    source_to_line_distance = src_radius + src_radius * np.cos", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\n    def getURL(self, url, post_data=None, params=None, timeout=30, json=False):\n        \"\"\"\n        By default this is just a simple urlopen call but this method should be overridden\n        for providers with special URL requirements (like cookies", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn type.ToString (fmt) + unit.ToString (fmt);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, IFormatProvider fmt)\n\t\t{\n\t\t\treturn new FontUnit (s, fmt);\n\t\t}\n\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\n\t\t\tvar obj2 = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(obj2.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(obj2.Properties[0].Value.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++) {\n    edges.add(T2.of(w, h));\n    edges.add(T2.of(w, height - h));\n            }\n            return edges;\n        }\n        @Override\n       ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   ds.config[\"setup\"][\"lut identifier\"] = \"LE-2D-FEM-19\"\n    ds.config[\"setup\"][\"add px err\"] = True\n    ds.config[\"setup\"][\"px um\"] = 0.34\n    ds.config", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\n\t\t\treturn performDownload() && performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\n\t\t\tOpenGL.glBindVertexArray(vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glEnableVertexAttribArray(Shader.VertexPosAttributeIndex);\n\t\t\tOpenGL.CheckGLError();\n\t\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   return self._project_cov_mat(\n        self.x_data_cov_mat, self.y_data_cov_mat, self.x_model, self.parameter_values)\n    return self._project_cov_mat(\n        self.x_data_cov", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "\n    return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "\n    if (walrusObject.getDeleted() != null && walrusObject.getDeleted()) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "   assertEquals(isImportAsNewEntity, command.validateNameSize(name));\n\nExpected result:\n    assertEquals(isImportAsNewEntity, command.validateNameSize(name));\n\nActual result:\n    assertEquals(isImportAsNewEntity, command.validateName", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "   self.system['TOTALSTATUS'] = self.totalstatus\n    self.system['STATUS'] = self.status\n    self.system['SCRIPTSTATUS'] = self.scriptstatus\n    self.system['PARSTATUS'] = self.parstatus\n    self.system['UNP", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   return new Builder().MergeFrom(prototype);\n    }\n    \n    public static Builder CreateBuilder(global::bnet.protocol.channel_invitation.SendInvitationRequest prototype) {\n      return (Builder) new Builder().MergeFrom(prototype);\n    }", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "\n    vertices[x] = quads[i * 4 + x];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "\n    result.addAll(Arrays.asList(COLUMNS_SORTABLE_LIST));\n\n    return result;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "   }\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region OVERRIDES\n    //--------------------------------------------------------------------------------\n    protected override void OnResize(EventArgs e)\n    {\n      base.OnResize(e", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "\n            }\n            if (!string.IsNullOrEmpty(lastUser))\n            {\n                Users.Add(lastUser);\n            }\n            // get all users that have created or modified the records in the past week(s)\n            foreach (string user in Users)\n            {", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "\n    }\n\n    public static void Main(string[] args)\n    {\n        // TODO: Add your code here\n        TFrmConferenceMasterSettings frm = new TFrmConferenceMasterSettings();\n        frm.Show();\n    }\n}\n\n// Copy", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "\n    }\n\n    public static void p5_io_file_load (ApplicationContext context, ActiveEventArgs e)\n    {\n        ObjectIterator.Iterate (\n            context,\n            e.Args,\n            true,\n            \"read-file\",\n            delegate (string filename", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn Enabled && CopyCustom;\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n    public void setReportStackTrace(boolean reportStackTrace) {\n        this.reportStackTrace = reportStackTrace;\n    }\n\n    public void setUseLongBugCodes(boolean useLongBugCodes) {\n        this.useLongBugCodes = useLongBugC", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\ndef find_common_elements(a, b):\n    \"\"\"\n    Finds the common elements between two lists.\n\n    Args:\n        a (list): The first list.\n        b (list): The second list.\n\n    Returns:\n        list: The common elements", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n            }\n        }\n        private void JungleClear()\n        {\n            if (ManaManager.HasEnoughMana(Menu.GetSlider(\"JungleClearMana\")) && ManaManager.SpellFarm)\n            {\n                var minions = Min", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "\n    def test_field_name_model_based(self):\n        \"\"\"JSONAlchemy - field name model based\"\"\"\n        clean_field_model_definitions()\n        field_model_def = Field_parser.field_definition_model_based(\n            'title", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "\n    public static void RunQueryAssertion(RegressionEnvironment env, RegressionPath path, string epl, string[] fields, object[][] expected)\n\n    public static void SendEventLong(RegressionEnvironment env, string theString, long longPrimitive)\n\n    public static void Send", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   c = self.copy()\n    return c.__imul__(other)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    def _pretty_arch(self, arch):\n        # remove_blank_string does not seem to work on HTMLParser, and\n        # pretty-printing with lxml more or less requires stripping\n        # whitespace: http://lxml.de/FAQ.html#", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "\n    if (value == null) {\n        value = createHTMLView(c, text);\n        c.putClientProperty(BasicHTML.propertyKey, value);\n    }\n\n    if (oldValue != null) {\n        oldValue.removeFromParent();\n\n    if", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/\" + filename,\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlloader = namedQueryReference;\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string namedQueryParameter)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\n\t\t\tint memberCount = m_Members.Count;\n\t\t\twriter.WriteEncodedInt( (int) memberCount );\n\t\t\tfor ( int i = 0; i < memberCount; ++i )\n\t\t\t{\n\t\t\t\tPlayerState", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "\n    if (checkTargetConditions(invoke, method)) {\n        return new InlineInfo(invoke, method);\n    }\n\n    return null;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "   pytest = PytestDocker(name=self.pytest_name, bindings=self.pytest_bindings,\n                          env=self.env_details, log_path=self.log_path,\n                          links=links,\n                          pytest_con", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "\n    if (value != null) {\n        effects.replaceAtUsages(value, getCachedPhi(value, value.stamp()));\n        addScalarAlias(value, getCachedPhi(value, value.stamp()));\n    }\n\nThe code is trying to", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "\n    if (mCallback != null) {\n        try {\n            mCallback.handleCallSessionEvent(event);\n        } catch (RemoteException ignored) {\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\tfrom.SendGump(new EodonWallMapGump(from));\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write(0", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "\n# -*- coding: utf-8 -*-\n#\n# This file is part of Invenio.\n# Copyright (C) 2014, 2015 CERN.\n#\n# Invenio is free software; you can redistribute", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   return self.module.get('all_users', set())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated\n        messages.\n        **Example**:\n        >>> import polib\n       ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    else:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput'", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\n    return processURI(furi, uri, overrideType, true, inline);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "   gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n    msg = yield self.run_fake_single_build(gsp, buildResult)\n    result = makeReviewResult(msg,\n                              (GERRIT_LABEL", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "\n    public void visit(Iterable<? extends AnnotatedTypeMirror> types,\n            Map<String, AnnotationMirror> templateMapping) {\n        if (templateMapping != null && !templateMapping.isEmpty()) {\n            for (AnnotatedTypeMirror type", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\n# <pep8 compliant>\nimport bpy\nfrom bpy.types import Menu, Panel, UIList\nfrom rna_prop_ui import PropertyPanel\nfrom bpy.app.translations import pgettext_iface as iface_\ndef active_", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_reg = map16.reg;\n                mapper1", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\n    m_jPopupMenu.add(getInspectMenuItem(\"Inspect\"));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn Frame.H;\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (0);\n\t\t}\n\t\tpublic int SizeWidthToFitWithMin (int min)\n\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "\n\"\"\"\nData models for the announcements app.\n\"\"\"\nfrom django.db import models\nfrom django.conf import settings\nfrom django.core.urlresolvers import reverse\nfrom django.utils import timezone\nfrom django.utils.translation import ugettext_lazy as", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "\n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight_log WHERE src_callsign=?\n                 ORDER BY sdate, stime ''', (call_sign,", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tMsg(\"I'm not sure what you mean by that.\");\n\t\t\tbreak;\n\t\t\tcase \"skill_fishing\":\n\t\t\t\tMsg(\"I'm not sure what you mean by that.\");\n\t\t\t\tbreak;\n\t\t\tcase", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "   return job_cmdline_arg(request, cmd)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\n    public static string Generate()\n    {\n        Builder.Clear();\n        GenerateHeader();\n        GenerateGame();\n        GenerateOverview();\n        GenerateHeroes();\n        GenerateAssemblies();\n        GenerateFeatures();\n        Generate", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\treturn path[0];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tCPos? GetSearchFromLocation(Actor self)\n\t\t{\n\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "\n    if restart_dhcp != \"0\":\n        rc = utils.subprocess_call(self.logger, \"dhcpd -t -q\", shell=True)\n        if rc != 0:\n           self.logger.error(\"dhcpd -t failed", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "\n    return Event.newBuilder();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (PpmContext context = context.Suffix; context != PpmContext.ZERO; context = context.Suffix)\n            {\n                if (context.NumberStatistics != 0)\n                {\n                    PpmState state = context.Statistics;", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "\n        /// <summary>\n        /// The Signed Integer VR.\n        /// </summary>\n        public static readonly DicomVr SIvr = new DicomVr(\"SI\", false, false, true, 4, true, '\\0', 4,\n            delegate(D", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\n\t\t\tsessionValuesArray.Add(tFull[0] + \":\" + tFull[1]);\n\t\t}\n\t\t\n\t\t//if we have a test type, delete it\n\t\tif(sessionValuesArray.Count > 0)\n\t\t{\n\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   def test_smaller_than_file_at_end(self):\n        o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 8)\n        self.assertEquals(b'abcdefghij\\x00\\", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "\n<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (int", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'], csi_95, '--',\n            label='95%% CI')\n    ax.plot(cr['combined'][app][VC]['durations'], cr['combined'][app", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self._testUIDGIDSwitch(1, 0, 0, 1, [0, 1, 0, 1], [1, 0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\ndef find_common_elements(a, b):\n    \"\"\"\n    Finds the common elements between two lists.\n\n    Args:\n        a (list): The first list.\n        b (list): The second list.\n\n    Returns:\n        list: The common elements", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "   mirror.writeElement(kind, index, value);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": " }\n}\n\npackage com.github.jayanthakk.jayanthakk.model;\n\nimport com.github.jayanthakk.jayanthakk.model.enums.UserRole;\nimport com.github.jayanthakk.", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.Skill", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\n```python\n# Additional imports\nfrom collections import defaultdict\n\n# Define the dictionary to store the data\ndata = defaultdict(list)\n\n# Add the data to the dictionary\ndata['data1'] = [1, 2, 3]\ndata['data2'] =", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "   self.assertRaises(\n        OSError,\n        lambda: subprocess.Popen(\n            ['/sbin/modinfo', '-d', 'somemodule'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new InvalidOperationException(\"PropertiesName must be set before StartCoreServices\");\n\t\t\tif (configDirectory == null)\n\t\t\t\tthrow new InvalidOperationException(\"ConfigDirectory must be set before StartCoreServices\");\n", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n# -*- coding: utf-8 -*-\n# Form implementation generated from reading ui file 'pyslvs_ui/io/preference.ui'\n#\n# Created by: PyQt5 UI code generator 5.15.2\n#\n# WARNING", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n    if (wxs == null || !wxs.moveToFirst()) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t}\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t}\n\t\t[Test", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue |= (uint)p[iBufferIndex];\n                uiCRCITTSum = (uiCRCITTSum >> 8) ^ (ulong)((ulong)uiByteValue ^ (ulong)uiCRCITTSum);\n            }\n           ", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\n    if (potentialTarget.getName().getContents().equalsIgnoreCase(s))\n        return true;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "\n    public IHyperlinkDetector[] getHyperlinkDetectors(\n            ISourceViewer sourceViewer) {\n        CeylonParseController controller = \n                getParseController();\n        if (controller==null) {\n            return new IHyperlinkDetector[]", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\nself.l.addWidget(Object3DAspect(self))\nself.l.addWidget(Object3DScale(self))\nself.l.addWidget(Object3DPrivateInterface(self))\nself.", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "\nresult = value;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n    public static List<KeyValuePair<int, int>> getUnmappedOrderLines(ESDocumentOrderSale esDocumentOrderSale)\n    {\n        List<KeyValuePair<int, int>> unmappedLines = new List<KeyValuePair<int, int>>();", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "\n    final int userId = 1112;\n    final String userName = \"aretter\";\n    final String mode = \"rwx\";\n    //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);\n    //expect(mockDatabase.getCurrentSubject()).", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.ToVector2 ().X, v.Y / viewport.ToVector2 ().Y);\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nendpoint_stats.pack_into(packer, endpoint_stats(packets=1000, bytes=1000000))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\tConsole.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/No clients connected\");\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// sends a message to a specific client\n        /// </summary>\n        /// <param", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "\n```python\nif (data.get('status') == 'OK'):\n    # ...\n```\n\nExplanation: The `if` statement checks if the value of the `status` key in the `data` dictionary is equal to 'OK'. If it is, the code inside the `", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(simplejson.dumps(items), content_type=\"application/json\")\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\"\n    )\n    response['Content-Disposition'] = (\n", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "\n    public void test_searchServiceOptimizer_02() {\n        /*\n         * Note: DO NOT share structures in this test!!!!\n         */\n//        final VarNode s = new VarNode(\"s\");\n//        final VarNode p = new VarNode(\"p\");", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    if request.method == \"POST\":\n        form = self.get_form_class()\n        form.instance = self.object\n        form.request = request\n        form.user = self.request.user\n        form.save_form(form)\n        return self.", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "   public override void Dispatch(IMetadataVisitor visitor) {\n      visitor.Visit(this);\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var w = new DenseVector(input.Count);\n            var x = new DenseVector(input.Count);\n            var y = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var t = new DenseVector", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat[] medians = new Apfloat[1];\n\t\tmedians[0] = sortedNumbers[left];\n\t\treturn medians;\n\t} else {\n\t\tApfloat[] medians = new Apfloat[2];\n\t\tmedians[0] =", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "   if sample_count[v, j] > 0:\n        L[v] = j\n        A[v, j] = 1\n        sample_count[v, j] += 1\n    if sample_count[v, j] > 0:\n        L", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   result['csv_mapping'] = csv_mapping\n        return result\n    def _test_enrich_to_raw(self, sortinghat=False, projects=False):\n        \"\"\"Test whether enriched indexes are properly loaded to raw\"\"\"\n        # populate raw index\n        perce", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\torderManager.IssueOrder(Order.Command(\"addbot \" + slot.Key));\n\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic static SmbException GetException(int errcode, Exception rootCause)\n\t\t{\n\t\t\treturn new SmbException(errcode, rootCause);\n\t\t}\n\t\tpublic static Sm", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "   return frame_header + padding_bytes + self.data\n\n\"\"\"\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "\n    }\n\n    /// <summary>\n    /// </summary>\n    public void CheckClusterConsistency() {\n        foreach (var cluster in RootCluster.AllClustersDepthFirst())\n            CheckClusterConsistency(cluster);\n    }\n\n   ", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\n1. The input is a list of integers.\n2. The list is sorted in ascending order.\n\n$[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]$\n\nresult: $[1,", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "\n    return super.visitNewArray(node, p);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = new ClassItem(Context, this, _returnNode, _returnNode);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type of the current comment item.\n\t\t/// </summary>\n\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\n\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\n\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\t\n\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\n\t\t\tmyTrackBar", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\n    if (this.isAbstractionActive())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "\n            int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n             ", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "\n    def test_args_invocation(self, popen, pipe_processor_loop):\n        ret = 0\n        out = 'out'\n        err = 'err'\n        pipe = _mock_pipe(popen, pipe_processor_loop, ret, out, err", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\n    writer.attribute( null, \"b\", String.valueOf( b ) );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\n\t\tif ( (proxyThat == null) ||\n\t\t\t\t(proxyThat instanceof Contact) ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact that = (Contact)proxyThat;\n\t\tif ( (this.getContactDate() == null)", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "   if cdata is None:\n        return\n    if len(cdata) == 1:\n        # This is a constant index\n        if cdata[0] == 0:\n            # We don't need to copy over any stack traces here\n            return [node.input", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "\nfrom django.contrib.auth.models import Group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "   event_key.base_listen(retval=True)\n        event_key.base_listen(**kw)\n    return event_key\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it is composed into a\n       ", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "\ndef parse_sources(xml_element):\n    \"\"\" Parse xml_element 'sources' attr and return a list of location strings. \"\"\"\n    sources = xml_element.get('sources')\n    if sources:\n        return [location.strip() for location in sources.split", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "   for key in data_model_changes:\n        self.change_filter(self.data, self.current_filter, key, data_model_changes[key])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\n\t\t\tif (Class != null && Method == null && Field == null && Sig == null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'class' attribute with 'method' or 'field'", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "\n    if (termData == null || termData.isEmpty()) {\n        return;\n    }\n    for (Map.Entry<String, Collection<String>> datum : termData.asMap().entrySet()) {\n        if (!datum.getValue().isEmpty()) {\n            term", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "\n    return intrinsicCohesion;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "\n    return new ExDate(extractHour(exceptionDates.iterator().next()), extractMinutes(exceptionDates.iterator().next()));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\n\t\tsourceEventBinding.OnEvent( SourceEventName, new UnityEvent() );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "\n            ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            SpanConfig cfgObject = new SpanConfig(jsonData);\n            Status result = switchManager.addSpan(cfgObject);\n            if", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\tsuper(id, path, width, height);\n\t\t}\n\t\tprivate static final ImageHelper Image1 = new ImageHelper(102179, \"Images/Core/alert.png\", new Integer(16), new Integer(16));\n\t\tprivate", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n    return rnd.nextInt(size);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "\n    \"\"\"\n    PRED_SBJ_IS_SUB_OF_OBJ = 'skos:broader'  # default predicate for subject item is subordinate to object item\n    def __init__(self):\n        self.project_uuid = '0'\n        self.source", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "\n    }\n\n    public static void Main(String[] args)\n    {\n        String[] fileNames = { \"C:\\\\Users\\\\acoliver\\\\Desktop\\\\test.xlsx\" };\n        for (int i = 0; i < fileNames.Length; i++)\n       ", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tbytes[posn++] = (byte)0xFF;\n\t\t\t\tbytes[posn++] = (byte)0x60;\n\t\t\t}\n\t\t}\n\t\t// Return the", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src = off1//off2//off3\n    obj.operands = [dst, composer([env.cst(src.int(),28),env.cst(off4,4)])]\n    obj.type = type_data_processing\n@ispec(\"3", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap.loadProperties(stream);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "\n    public static void main(String[] args)\n    {\n        WorldSettings settings = new WorldSettings(1234567890L, WorldSettings.GameType.SURVIVAL, true, false, WorldType.DEFAULT);\n        System.out.println", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor (false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.PurgeDefaultDacl ();\n\t\t\tAssert.AreEqual (20, csd.BinaryLength);", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   self.__idle(self.__process, self.__queue.get, self.__queue.task_done)\n    def run(self):\n        while not self.__stopped:\n            result = self.__queue.get()\n            self.__idle(self.__process, result)\n", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "\n    if (PhotonEditor.Current.RpcList.Count > 0)\n    {\n        additionalRpcs.AddRange(PhotonEditor.Current.RpcList);\n    }\n\n    if (PhotonEditor.Current.RpcList.Count", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n    public void setMessage(IIMessage message) {\n        this.message = message;\n        full_subj.setText(message.subject);\n        full_from_to.setText(message.from + \" \" + message.to);\n        full_date.setText(message.", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "   return self.symmetry.transform_wave_function(psit_G, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "\n    CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILLabel) {\n\t\t\t\t\t\tflatBody.Add(child);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (prevChild", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\n\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    IsRagdoll = ragdoll;\n\t    if (delay > 0f) {\n\t\tStartCoroutine (DelayedRagdoll(delay));\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def fix_region_id(self):\n        for reg_list in  [self.polygon_region_ids, self.segment_region_ids, self.node_region_ids]:\n            for i in range(0, len(reg_list)):\n                if reg_", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "\n    out[outOff + 3] = (byte)(num >> 24);\n    out[outOff + 2] = (byte)(num >> 16);\n    out[outOff + 1] = (byte)(num >> 8);\n    out[out", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                source, new FilterExpression[] {\n                    new FilterBinaryNode( \"label\", \"name\", \"name\" )\n                } ) );\n        }\n    }\n}\n<reponame>j", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "\n    if (frameToClose != null) {\n        frameToClose.setIcon(true);\n        frameToClose = null;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\ndef getNearestLC(ID, tol):\n    global RETRY\n    if RETRY:\n        printV(\"Server Disconnected.  Attempting to Connect to Another Server\")\n        servers.getBestServer()\n        RETRY = False\n    else:\n        print", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "\n    move(out, Util.px2mm(offset.x+x, dpi), Util.px2mm(offset.y+y, dpi));\n\n    line(out, Util.px2mm(offset.x+x, dpi), Util.px2mm(", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "\n    if (AuthenticodeTools.IsTrusted(fileName))\n    {\n        // Do something\n    }\n\nThe code is trying to check if the file is signed, but it's not working. The file is not signed, so the condition is always false.\n\nTo fix", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n# Default Django settings. Override these with settings in the module\n# pointed-to by the DJANGO_SETTINGS_MODULE environment variable.\n# This is defined here as a do-nothing function because we can't import\n# django.utils.translation -- that", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (numberToCancel > 0)\n\t\t\t{\n\t\t\t\tvar item = queue.ElementAtOrDefault(numberToCancel - 1);\n\t\t\t\tif (item != null)\n\t\t\t\t{\n\t\t\t\t\titem.", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \" files\"\n    infoText += \"<br>\"\n    \n    infoText +=  str(numberOfHiddenFiles) \n    infoText += \" hidden file\" if numberOfHiddenFiles==1 else \" hidden files\"\n", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = code.replace('%', '%%%')\n        # replace all $ by $$ to prevent errors by $ signs\n        code = code.replace('$', '$$$')\n        # replace all ${SRC} by ${SRC}\n        code = code.replace('${SRC", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent - 2 ]\n\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "\n    columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                columnTypes.add(typeManager.nextTextAdapter().of(pattern));\n                break;\n        }\n    }", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\treturn null;\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Assemble(object cached, object owner)\n\t\t{", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   self.cli_load_config(commands)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "       self.store.update_item(component, editing_user)\n        # Verify that changes are present\n        self.assertTrue(self.store.has_changes(component))\n        # Publish and verify that there are no unpublished changes\n        component = self.store.publish", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "\n    digest.update((byte) (TEXT_CODE & 0xff));\n\n    digest.update((byte) (TEXT_CODE & 0xff));\n\n    digest.update((byte) (TEXT_CODE & 0xff));\n\n    digest", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return null;\n        }\n        /// <summary>\n        /// Gets the samples for a given <see cref=\"ApiDescription\"/>.\n        /// </summary>\n        /// <param name=\"api\">The <see cref=\"ApiDescription\"/>.</param>\n        /// <returns", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "MutablePropertyValues newProperties = beanProperties.getPropertyValues();\nnewProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * {@inheritDoc}\n    ", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "   f.readline()\n        f.readline()\n    except IOError:\n        # No preexisting file to remove blank lines from\n        f = None\n    finally:\n        if f:\n            f.close()\n    if not f:\n        module.fail_", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState\n            );\n        [PreserveSig]\n        int QueueEventParam(\n            [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent pEvent\n            );\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "   return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\ndefproperty(Document, \"actualEncoding\",\n            doc=\"Actual encoding of this document.\")\ndefproperty(Document, \"encoding\",\n            doc=\"Encoding of this document.\")\ndefproperty(Document, \"standalone\",\n            doc=\"Standalone value of this document.\")\n", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\n\t\t\t\treturn EMSSceneSectionOperations.validateEMSSceneSectionMassCasualtyIndicator(\n\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidate", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tdecodeKeyLocator\n\t\t\t\t  (TlvTypeCodes.KeyLocatorDigest, keyLocator, decoder);\n", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "\n    @Override\n    public void render(GameContainer container, Graphics g) throws SlickException\n    {\n        //Draws the HUD\n        display.render(g);\n        //Draws the map\n        StarMap.draw(g, camera);\n        //Draws the", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "\n    action.setColor( color );\n\n    GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model().getGame() ).addPlayer( action );\n    hide();\n    }\n    hpanel.add( m_btnOk", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "   raise RuntimeError(\"Error downloading file: %s\" % str(e))\n    if progress:\n        log.info(\"Downloading %s\" % url)\n    filename = get_filename(r.headers)\n    with open(filename, \"wb\") as f:\n       ", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\n\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   return [weight * coeff for weight, coeff in reaction.metabolites.items()]\ndef _total_components_flux(flux: float, components: List[float], consumption: bool) -> float:\n    \"\"\"Compute the total flux of a reaction's components", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(path__startswith=pootle_path,\n                                         submitted_by=user)\n    def get_for_path_and_store(self, pootle_path, store, user):\n        \"\"\"Returns units that", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   if self.ipdests.get(dstip, None):\n        self.logger.debug(\"Switch {} ARP request {}->{}\".format(self.name, dstip, srcip))\n        self.pox_switch.send(OpenflowMessage(FlowIdent(srcip", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    m_RecentItems.add(item);\n    writeProps();\n    notifyRecentItemListenersOfAdd(item);\n  }\n  \n  /**\n   * Removes the item from the internal list.", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "\n    if (state.getPhase() != null && state.getPhase().ordinal() >= Phase.DEPOSIT_PAID.ordinal())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic BitArray LeadingAny(Node p) {\n\t\tif (p == null) return null;\n\t\tBitArray", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tbuff[5] = (byte)((address & 0x00000000) >> 31);\n\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = order.getDirection();\n\t\t\tthis.caseInsensitive = order.isCaseInsensitive();\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMskJointVo", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.GetData(), length );\n\t\t\t\tshadowBuffer.Un", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.satfinder_scan_nims.setValue(str(self.frontendData.get(\"tuner_number\", satfinder_nim_list[0][0])))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "\n    public void setSocketOpt(int option, Object optval)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "\n                // Write the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                prior = curr;\n            }\n            return fout.ToArray();\n        }\n        \n        /**\n        * @param in\n        * @", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   output += \"\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "   }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\n    return map.put( key, value );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member bidding on an item\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\n    return action_message\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRowCollection rows = form.grdResults().getRows();\n\t\tfor (int i = 0; i < rows.size(); i++)\n\t\t{\n\t\t\tgrdResultsRow row = rows.get(i);\n\t\t\tif (row", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "\n    }\n\n    /// <summary>\n    /// The index of this item's image in the image list of this list view.\n    /// </summary>\n    public int Image { get { return image; } }\n\n    /// <summary>\n    /// State bits of this item", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "   if self.terminator.doing_layout:\n        return\n    if self.terminator.is_child_notebook():\n        return\n    if self.terminator.is_child_terminal():\n        return\n    if self.terminator.is_child_tab", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "\n    }\n\n    public static void Main(string[] args)\n    {\n        var m = new MarshalService();\n        var v = m.DllCall(\"an\", \"GetProcAddress\", \"GetProcAddress\", new[] { \"GetProcAddress\", \"an\" });\n", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"Enum\");\n\t\t}\n\t\tpublic override bool IsClass {\n\t\t\tget {\nNext line of code:\n\t\t\treturn base_type != null && base_type.Is", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "\n            throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region events\n        /// <summary>\n        /// \n        /// </summary>\n        public event EventHandler<EvidenceLookupArgs> Ev", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "   self.protocol = protocol\n    self.ciphers = None\n    self.verify_mode = None\n    self.verify_hostname = None\n    self.verify_email = None\n    self.verify_cert_name = None\n    self.verify_cert_serial = None", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::Gtk.CheckButton ();\n\t\t\tthis.checkbuttonWhiteSpaces.CanFocus = true;\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   key2gmwidg[child].boardvbox.remove(child)\n    key2gmwidg[child].boardvbox.add(child)\n    key2gmwidg[child].boardvbox.set_current_page(new_num)\n   ", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\n    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n\n    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\n    return \"\n\" +\n        \"\n\" +\n        \"\n\" +\n        \"\n\" +\n        \"\n\" +\n        \"\n\" +\n        \"\n\" +\n        \"\n\" +\n        \"\n\" +\n        \"\n\" +\n        \"", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "\n    return false;\n\nExplanation:\n\nThe code checks if the file is read-only. If it is, it returns false, indicating that the file is not read-only.\n\nNote: The code is part of a larger program, but this specific line is a standalone example", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n    return sb.toString();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key shorter than the length of the HMAC output.\n\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\n\t    switch(m_d) {\n\t        case option_1:\n\t        case option_2:\n\t            current_sum += 4;\n\t            break;\n\t        case option_3:\n\t            current_sum += 4;\n\t            break;", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    public static void main(String[] args) {\n        new Resin(args).Execute();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   if comment is not None:\n        return [comment, l]\n    else:\n        return None\n    return None\n    def find_env(self, name):\n        # attempt to find env by 'Ansible:' header comment\n        comment = None\n        for l in self.", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# -------------------------------------------------\n# Mesh Modifiers\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n# -------------------------------------------------\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n# -------------------------------------------------\n# ---------------------------------", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\n    for(int i = 0; i < totalBuckets; ++i)\n    {\n        double bucketRank = mScoreRankBuckets.get(i);\n        if(rankCounts[i] == 0)\n        {\n            double minL", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "\n    assertEquals(3, vertex.neighbors().size());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 163);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return false;\n            }\n        }\n        return false;\n    }\n    private void processGlobalAttributes(Schema parsedSchema) {\n        Iterator<Attribute> attributesIter = parsedSchema.getAttributes().iterator();\n        while (attributesIter.hasNext()) {\n            Attribute next", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate', 'manager_id': False})\n    def holidays_first_validate_notificate(self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "\n    def find_max_sum_of_three_numbers(nums):\n        \"\"\"\n        Finds the maximum sum of three numbers in a list.\n\n        Args:\n        nums (list): A list of integers.\n\n        Returns:\n        int: The maximum", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\tif (valueObject.getCareContext() != null)\n\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext) valueObject.getCareContext().getDomainObject();\n\n\t\t\tif (value10 != null)\n", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, n }, false));\n\t\t}\n\t}\n\t/**\n\t * @return the globalP\n\t */\n\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "\n            Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, gitStash.Message, gitItemStatuses, gitItemStatuses, gitItemStatuses);\n\n            Stashed.SetStashDiffs(gitStash.Revision", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "\n    return super.equals(o);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n    }\n\n    public int EndAddInt(System.IAsyncResult asyncResult) {\n        object[] results = this.EndInvoke(asyncResult);\n        return ((int)(results[0]));\n    }\n\n    public int AddInt(int a, int b) {", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\n/*******************************************************************************\n * HELIUM V, Open Source ERP software for sustained success\n * at small and medium-sized enterprises.\n * Copyright (C) 2004 - 2015 HELIUM V IT-Solutions", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t\tE", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "\n    # TODO: R6?\n    def handle_response_r6(self, res):\n        # TODO\n        pass\n    def handle_response_r7(self, res):\n        # TODO\n        pass\n    def handle_response_r8(self, res):", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         if (cursor >= limit) {\n            break lab1;\n          }\n          cursor++;\n        }\n        continue replab0;\n      } while (false);\n      cursor = v_3;\n      break lab1;\n    }\n    return true;\n  }", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n    catch (NoSuchMethodException e) {\n        e.printStackTrace();\n    }\n    catch (Illegal", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result\n    except IndexError:\n        return None\n    except AttributeError:\n        return None\n    except TypeError:\n        return None\n    except ValueError:\n        return None\n    except KeyError:\n        return None\n    except crypto_utils.OpenSSLObjectError", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # The first value is the same as the first value of the interval.\n    # The second value is the same as the second value of the interval.\n    # The third value is the same as the third value of the interval.\n    # The fourth value is the same as the fourth value of", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "\n    # fields used for web preview only - discarded on import\n    edi_doc.pop('price_subtotal', None)\n\n    # fields used for web preview only - discarded on import\n    edi_doc.pop('price_tax', None)\n    edi", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\n    return new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = User(device)\n    roundtable = RoundTable(user)\n    menu = Menu(roundtable)\n    exploration = Exploration(menu)\n    print(device.check_inspection())\n    print(user.login", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# We send back a dictionary.\nrd = { 'cycle_time': -1. }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181025 - Added 1 - Check if device is already in the list\n            if (!tuners.", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "\n    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "\n    if (split.length == 3) {\n      entries.add(new Entry(Arrays.asList(split[0].split(\"\\\\s+\")), split[1], split[2], Double.parseDouble(split[3])));\n    } else if (split.", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   return itertools.imap(make_it, features, itertools.count(1))\ndef Feature(**keywords):\n    \"\"\"Wrapper around CreateFeature.\n    Create a Mapnik Feature using a dictionary of parameters.\n    Keywords must include:\n      type -- '", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   return self.want.destination\n\ndef __default(param):\n    return param\n\nclass ModuleManager(object):\n    def __init__(self, *args, **kwargs):\n        self.module = kwargs.get('module', None)\n        self.client = F", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "\ndef test_method_copy_view(appliance):\n    \"\"\"\n    Tests that the Method Copy View is displayed correctly.\n    \"\"\"\n    # Navigate to the Automate Explorer\n    navigate_to(appliance, 'Automate Explorer')\n    # Navigate to", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "\n    return result;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "\n    def test_update_thread_no_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "   return embedManifestDllAction(target, source, env)\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check for existence of manifest\n    and other conditions, and embed the manifest by calling embedManifest", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getSelection(), new SubProgressMonitor(new ProgressMonitorJobsDialog(getShell(), getOperationMessage(), true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\t// add the input stream to the list of streams that we open\n\t\t\tdata.inputRowMeta = getInputRowMeta();\n\t\t\tdata.outputRowMeta = getOutputRowMeta", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "\n# coding: utf-8\n# python\nfrom datetime import datetime, time, timedelta\n# 3rd-party\nfrom freezegun import freeze_time\nimport pytest\n# this app\nfrom timetra.diary import utils\ndef test_extract_components():", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "\n            if (m_MapOverride != -1)\n                map = m_MapOverride;\n            if (m_IDOverride != -1)\n                sspawnid = m_IDOverride;\n            if (m_Count == 0)\n                sfakecountA = \"", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "   s, o = self._check_guest_suspend_log(**args)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "\n    assertThat(received > 1, is(true));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "\n    this.owner.getDecorator().onSendRequestAfter(r);\n\n    return res;\n} catch (BodyTerminatedException e) {\n    logger.info(\"[FAULT] \" + this.ownerID + \" : FAILURE OF \" + destination.getID", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)writer.BaseStream.Position;\n\t\t}\n\t\tstatic void WriteCompressedUInt32(BinaryWriter writer, uint value) {\n\t\t\tif (value <= 0x7F)\n\t\t\t\twriter.Write((byte)", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "   self.fm.execute_command(au_flags, refresh)\n\n# Extracts copied archive (yy) --> extracthere\nclass extracthere(Command):\n    def execute(self):\n        \"\"\" Extract copied files to current directory \"\"\"\n        copied_files = tuple(self.", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (typeof (COMTest));\n\n\t\t\tAssert.AreEqual (\"MonoTests.System.ActivatorTestInternal.COMTest\", (objCOMTest.GetType()).ToString (), \"#A02", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "\n    def testOneOldAndOtherNew(self):\n        locale = Locale.objects.get(code='da')\n        repo = self._setup(locale, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "   self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n        cmd.response = True\n        self.commands.answer(cmd)\n        self.Log.debug(\"Moving to channel\")\n        self.send_message(", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "\n    public static void changeLeader(Player player) {\n        PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n        }\n    }\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "\n    def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\n    @Override\n    public int doEndTag() throws PageException {\n\tif (!StringUtil.isEmpty(values)) column.setValues(ListUtil.toStringArray(ListUtil.listToArrayRemoveEmpty(values, valuesdelimiter)));\n\tif (!StringUtil.isEmpty(valuesdisplay", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "\n        }\n\n        private void ParseStatus(InventoryEntry invEntry, string status)\n        {\n            string[] parts = status.Split(' ');\n            if (parts.Length == 2) {\n                invEntry.State = (ItemState)Enum.Parse(typeof(", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\t\tm_key[i].Activate( from );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( m_Peerless == PeerlessList", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\n\t\tfor(int x = 0; x < col.size(); x++)\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)col.get(x)).buildVo());\n\t\treturn coll;\n\t}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.ComputeHash(pbMsg, pbSalt, pbKey, pbAssoc);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\n# Copy this file to app_server/settings.py and adjust to your specification (it should work fine out of the box)\n# Django settings for django_agfk project.\nimport os\nimport sys\nSETTINGS_PATH = os.path.realpath(os.path", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "\nif ((this.userMessage == null)) {\n    if ((other.userMessage != null))\n        return false;\n} else if ((!this.userMessage.equals(other.userMessage)))\n    return false;\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "\n    public void\n    dial(String address, int clirMode, UUSInfo uusInfo, Message result) {\n        RILRequest rr = RILRequest.obtain(RIL_REQUEST_DIAL, result);\n        rr.mp.writeString(address", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                Vector3 v = newVertices[x + y * xSizeP];\n                v.x = x * xPixelsPerTile;\n                v.y = y * yP", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD, new Object[] { testInt1, testInt2 });\n\t\t\t\n\t\t\tif (raw", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnd", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "   out.writeBoolean(false);\n    out.writeUTF(\"not found\");\n    out.flush();\n    out.close();\n    in.close();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n    public static VhScreenRefreshPtr stactics_vh_screenrefresh = new VhScreenRefreshPtr() {\n        public void handler(osd_bitmap bitmap, int full_refresh) {\n            int offs, sx, sy, i;\n            int char_", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n    }\n\n    public static List<Obj_AI_Base> GetCollision(this Spell spell, List<Vector3> positions)\n    {\n        var objects = new List<CollisionableObjects>(){CollisionableObjects.YasuoWall,CollisionableObjects", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "\n    if (verbose) {\n        System.out.println(\"DAG to PAG: Starting collider orientation\");\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "\n        }\n\n        public void Dispose()\n        {\n            this.ScriptManager.Dispose();\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "\n    if (this.attachmentFile == null) {\n        if (other.attachmentFile != null) {\n            return false;\n        }\n    } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n        return false;\n    }\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\tHistory.Add(msg, formatted);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void MessageTo(PlayerMobile user, PlayerMobile to, string text)\n\t\t{\n\t\t\tif (!CanMessage(user, text))", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "\ndef get_avail_compo_ids(sClientSpaceId, sUserId):\n    \"\"\"\n    Get the availability of components in a space.\n\n    Args:\n        sClientSpaceId (str): The client space id.\n        sUserId (str):", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n        final File file = (File) parent.getItemAtPosition(position);\n        final String[] files = new String[mListView.getCheckedItemCount()];\n        int", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    if (this.channel.isOpen()) {\n        this.j.writeLock().lock();\n        try {\n            while (!this.i.isEmpty()) {\n                NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager.QueuedPacket)", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n    for p_index, per in enumerate(all_periods):\n        for z_key in sorted(z_index_dict.keys()):\n            kk = z_index_dict[z_key][0]\n            z_arr[p_index, z_key", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "\ndef find_max_value(arr):\n    \"\"\"\n    Finds the maximum value in a given array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The maximum value in the array.\n    \"\"\"\n\n   ", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "   env[\"PATH\"] = \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \":\" + \"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "   for path, tests in iteritems(type_paths):\n        for test in tests:\n            yield test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\n    } catch (Throwable e) {\n        errorsInScript = e;\n        throw e;\n    }\n    private void handleScriptRuntimeException(final GroovyRuntimeException e, final PrintStream outStream, final IFreeplaneScriptErrorHandler errorHandler) {\n        if (e", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "   for i in range(energy.size):\n      grad[i] *= energy[i]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\n\tif (obj == null)\n\t{\n\t\treturn -1;\n\t}\n\tif (caseInsensitive)\n\t{\n\t\treturn this.getOrdInvCurrentStatus().compareTo((ims.ocrr.vo.OrderedInvestigationStatusVo)", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "\n    assertEquals(found.size(), 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterFamilyCode(pf.getParameterFamilyCode());\n        depthParameter.setParameterFamilyName(\"Depth\");\n        depthParameter.setParameterName(\"depth\");\n        depthParameter.setParameterValue(depth);\n        craw", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == LNodeKind.Block)\n\t\t\t{\n\t\t\t\tvar block = (LBlock)candidate;\n\t\t\t\tvar patternBlock = (LBlock)pattern;\n\t\t\t\tif (block.Range.Contains(patternBlock", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n            }\n\n            }\n\n        }\n        public void JungleClear(ActionQueue actionQueue, ActionQueueList jungleClearQueue)\n        {\n            Obj_AI_Base shadow = GetShadows().FirstOrDefault();\n            if (!energy.ReadyToJung", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(new ContextMenus());\n\t\tims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);\n\t\tif(runtimeSize == null)\n\t\t\truntimeSize", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\n\"\"\"\nInstall Python and Node prerequisites.\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, 1, 2)).change_index(x, (x, 1, 2)) == Sum(x, (x, 1, 2))\n    assert Sum(x, (x, 1, 2)).change_index(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "\n    }\n    catch (Exception ex)\n    {\n        throw;\n    }\n}\n#endif\n\n#if !NETFX_CORE\n    public void InitializeAddOrRemove(NotifyCollectionChangedAction action, IList changedItems, int startingIndex)\n    {\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "\n    public void testObjectToXMLStreamWriter() throws Exception {\n        if(XML_OUTPUT_FACTORY != null && staxResultClass != null) {\n            StringWriter writer = new StringWriter();\n            XMLOutputFactory factory = XMLOutputFactory.newInstance();\n            factory", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Entry: {0}\", i);\nConsole.WriteLine (\"Entry: {0}\", i);\nConsole.WriteLine (\"Entry: {0}\", i);\nConsole.WriteLine (\"Entry: {0}\", i);\nConsole.WriteLine (\"Entry: {0}\", i);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "   l.addToSubroutine(id, nbSubroutines);\n            }\n            if (l.inSubroutine(id)) {\n                l.status |= VISITED2;\n            }\n            if (l.inSameSubroutine(JS", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\n\t\tlblLabelPosition.setText(position.toString());\n\t\tcomboLabelPosition.select(position.ordinal());\n\t\t\n\t\t// TODO: implement the rest of the code\n\t\t// ...\n\t\t// ...\n\t\t// ...\n\t\t// ...\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   self.transport._expect_packet(MSG_KEXGSS_INIT,\n                                  MSG_KEXGSS_CONTINUE,\n                                  MSG_KEXGSS_COMPLETE,\n                                  MSG_KEXGSS_ERROR", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   dVdzdOm.append(cosmo.dVdzdOm(zi))\n    #Number of objects/Mpc^3 (i.e. unit is 1/Mpc^3)\n    #Need to give mass * h and get the sigma without little h", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "\n    @Override\n    public void setFont(Font font) {\n        super.setFont(font);\n        if (font != null) {\n            setFontMetrics(font);\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "   self.cal_p2(ref_p=None,phi=phi,flag='off_center')\n    self.share_face_init(flag='right_triangle')\n    #print_path=None:\n    #if print_path is not None, the path will be", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\n\t\t\twindow.Show();\n\t\t}\n\t\tprivate static void HideOrShow(Window window)\n\t\t{\n\t\t\tif (window == null)\n\t\t\t\tthrow new ArgumentNullException(\"window\");\n\t\t\twindow.Hide();\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "   if params[1]['bins'] is None:\n        step = (params[1]['high'] - params[1]['low'])\\\n            / float(params[1]['nbins'])\n        params[1]['bins'] = [\n            params[1]['low'] + n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "\n    } catch (Exception e) {\n        Log.e(\"MAM\", \"Error while catching up\", e);\n        RosterStorage.getInstance().removeRosterItem(contact);\n        RosterHelper.getInstance().removeRosterItem(contact);\n        contact.firstServerMsg", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "   im1L = im1.convert(\"L\", rgb2I)\n    im1L = im1.convert(\"L\", rgb2r)\n    im1L = im1.convert(\"L\", rgb2g)\n    im1L = im1.convert(\"", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttag.close();\n\t\treturn ret;\n\t}\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield self.createDescription()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\n    if (connected == newValue) {\n        return;\n    }\n    boolean old = connected;\n    connected = newValue;\n    support.firePropertyChange(CONNECTED, old, connected);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   return self.dispatch(environ, start_response)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\nimport sys\nfrom copy import deepcopy as copy\nfrom utils import *\nfrom data import Data\nfrom math import log\nfrom bitarray import bitarray\n\nclass Model :\n\tdef __init__( self , dataobj = None , modelfile = None ) :\n\t\tif data", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "\n            if (Utility.Random(chance) == 0)\n                res = EnhanceResult.Success;\n        }\n    }\n}\n<reponame>johnny-b/johnny-b-blog\npackage com.johnny.blog.", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "   return rdltypes.UserEnum(type_name, entries)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n    }\n\n    public void writeFile(String str, String strInstallLocation)\n    {\n        if (strInstallLocation != null && strInstallLocation.Length > 0)\n        {\n            String strPath = strInstallLocation + @\"\\etc\\config.ini\";\n           ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "\n    }\n}\n<reponame>johnny-b/johnny-b-blog\npackage com.johnny.blog.service;\n\nimport com.johnny.blog.model.User;\nimport com.johnny.blog.repository.User", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n    public RenderingStream\n        beginTriangle(final TextureAtlas.TextureHandle texture)\n    {\n        TextureAtlas.TextureHandle testTexture = texture;\n        if(testTexture == NO_TEXTURE)\n            testTexture = whiteTexture;\n        if(this.current", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   exposedHeaders = exposedHeaders + ', ' + header\n    response['Access-Control-Expose-Headers'] = exposedHeaders\n    return response\ndef expose_headers(response):\n    \"\"\"\n    Expose all headers to the client\n    \"\"\"\n    exposedHeaders = response.get('Access", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDri", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   var = [var]\n    return var\n\n\ndef _format_dict(var, name):\n    \"\"\"Ensure that parameter is dict-like of numbers.\n    Used to let resolution and radius be single numbers if their elements are equal.\n    \"\"\"\n    # Single-", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.addKillName(\"Warehouse Freightman Romp\")\nQUEST.addOnKill(QUEST", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 + (double)num1)) / 60);\n\t\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "\n    public void Dispose()\n    {\n        if (Program != 0)\n        {\n            GL.DeleteProgram(Program);\n            Program = 0;\n        }\n        if (_attributes != null)\n        {\n            foreach (var info in _attributes)\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   for met in self.metabolites:\n        met._model = self\n    for gene in self.genes:\n        gene._model = self\n    for rxn in self.reactions:\n        rxn._model = self\n    for met in self.metabol", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\n\t\tfor (int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add((TumourGroupListVo)beans.get(i));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static T", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tif(current.x>lines[selectedLine].x){\n\t\t\t\t\tcurrent.width = (current.x+current.width)-lines[selectedLine].x;\n\t\t\t\t\tcurrent.x = lines[selectedLine].x;\n\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "\n```python\n# Add the next line of code here\n\n```\n\nOutput:\n\n```python\n# Output will be displayed here\n```\n\n### Explanation\nThis exercise is about adding a new line of code to the existing code. The new line of code should be added after", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.FieldKey =", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(structure[i]) != Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tthis.addWindowToDatabase(", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
