{"pred": "   public void setOwnerId(String ownerId)\n    {\n        this.ownerId = ownerId;\n    }\n\n    public String getOwnerId()\n    {\n        return this.ownerId;\n    }\n\n    public void setLocalNode(Node localNode)\n", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // mParameterListView.setOnItemClickListener(this);\n        // mParameterListView.setOnItemCheckedListener(this);\n        // mParameterListView.setOnItemSelectedListener(this);\n\n        // TODO: Add a menu item for the parameter list\n        mParameterToggleMenuItem =", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\n\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8, 8]\n\n    @classmethod\n    def eval(cls, x, y):\n       ", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   public void setParameterListAdapter(EffectParameterListAdapter parameterListAdapter) {\n        mParameterListAdapter = parameterListAdapter;\n    }\n\n    public void setParameterToggleMenuItem(MenuItem parameterToggleMenuItem) {\n        mParameterToggleMenuItem = parameterToggleMenuItem;\n    }\n\n   ", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(SetUpdateFrequencyChangeEvent.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, MessageEvent::fromCommand, this::queueEvent));", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "   public void runTask(TaskData<TP, RD> taskData) {\n        if (taskData.getState() == TaskData.STATE_SUCCESS) {\n            return;\n        }\n        if (taskData.getState() == TaskData.STATE_FAIL_", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\n\t\t\t// Create a new CryptorHolder instance\n\t\t\tCryptorHolder cryptorHolder = new CryptorHolder();\n\n\t\t\t// Create a new Passphrase instance\n\t\t\tPassphrase passphrase = new Passphrase(new char[] {'", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n        } catch (RestServiceException e) {\n            Log.e(this.getClass().getSimpleName(), \"Device registration failed\");\n            return false;\n        }\n\n       ", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new SignRequest(\"U2F_V2\", SERVER_CHALLENGE_SIGN, APP_ID_SIGN", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           if self.global_config['acct_enable']:\n                self.acctA.recvEvent(results)\n                self.uaA.recvEvent(CCEventConnect(rtime = results[1]))\n                self.uaA.state = UasStateRing", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, *args, **kwargs):\n        super(self.__class__, self).__init__(*args, **kwargs)\n        self.uri = kwargs.get('uri', None)\n\n\nclass FlagList(Signature):\nNext line of code:", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "\n    }\n\n    public static void playVideo(TDActivity activity, TwitchVideo video) {\n        if (activity != null) {\n            Log.d(TAG, \"Playing '\" + video.getTitle() + \"' from \" + video.getUrl());\n\n            if (", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "\n    }\n\n    /**\n     * Post location along with user information to ForkMe backend.\n     * @param location retrieved from GPS.\n     */\n    public void postLocationInformation(Location location) {\n        double latitude = location.getLatitude();\n        double longitude =", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       # pylint: disable=unused-argument\n        net = Network(net_name='net')\n        net.set_input_layer(InputLayer(10, 10))\n        net.add('0', FCLayer(10, 10))\n", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "\n    def __init__(self, **attrs):\n        self.__init__(**attrs)\n        init_called = True\n\n    class Meta:\n        pass\n\n    class Meta:\n        pass\n\n    class Meta:\n        pass\n\n    class Meta:\n       ", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   return self\n\n\n@method(infix('!', bp=72))\ndef evaluate_simple_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "           new HSBAdjustTransformation(),\n            new InvertTransformation(),\n            new LevelsTransformation(),\n            new LookupTransformation(),\n            new MarbleTransformation(),\n            new MaskTransformation(),\n            new PolarTransformation(),\n            new PosterizeTrans", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    public static void main(String[] args) {\n        // TODO: 1/2\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter a number: \");\n        int num = sc.nextInt();\n        System.out.println(\"", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "\n    } catch (MBeanRegistrationException e) {\n        writeResponse(e, CREAT_MBEAN, correlationId);\n        log.tracef(\"[%d] CreateMBean - Failure Response Sent\", correlationId);\n    } catch (MBeanException e)", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild_report.add_reaction(MyEmojis.POKE_BATTLER)\n        await wild_report.add_reaction(MyEmojis.COMING)\n        await wild_report.add_reaction(MyEmojis.ON_MY", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['data']:\n        data = c['data']\n    else:\n        data = None\n    # Load dictionary\n    if c['dict']:\n        dictionary = c['dict']\n    else:\n        dictionary = None\n    # Load embeddings\n    if", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "   assert isinstance(doppler, DopplerSine)\n    assert doppler.distance0_m == 0.\n    assert doppler.tec_epm2 == 50.\n    assert doppler.coeffs == (50, ", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "   }\n\n    private void checkPermission() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE) ==", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "\n    def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        assert not self.redlock.locked()\n        assert self.redlock.acquire()\n        assert self.redis.exists(self.redlock.", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "   return ConeSettings(self._sptr, \"Sound\")\n\n    @property\n    def threed_cone_settings_ptr(self):\n        \"\"\"The inside and outside angles of the 3D projection cone and the\n        outside volume.\n\n        :type: c_", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def __init__(self):\n        super(CompressedData, self).__init__()\n        self.calg = 0x00\n\n    def __bytearray__(self):\n        _bytes = bytearray()\n        _bytes += self.calg\n        _bytes", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "   #    imgshape = findCellSize(imgshape, imgmax, findCellSizeParameter = findCellSizeParameter, verbose = verbose, out = out, **parameter);\n    #    imgshape = findCellIntensity(imgshape, imgmax, findCellIntensityParameter = find", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume /", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "\n    }\n\n    private boolean checkFileValid(File file) {\n\n        if (file.exists()) {\n\n            return true;\n\n        } else {\n\n            System.err.println(\"File does not exist: \" + file.getAbsolutePath());\n            exit", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "\n    }\n\n    public Program<BaseStatementMeta> getCompiledAST(String sqlQuery, NamedParameters namedParams) throws Exception {\n        return getCompiledAST(sqlQuery, namedParams, null);\n    }\n\n    public Program<BaseStatementMeta> getCompiledAST", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "   return self.encrypt(message)\n\n\nclass PinTanDummyAuthenticationMechanism(AuthenticationMechanism):\n    def __init__(self, security_method_version=1):\n        super().__init__()\n        self.security_method_version = security_", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExpCheck[i] != 0) {\n                                env.combExpCheck[i] = 0;\n                                setupCombExpCheck(root, i);\n                            }\n                        }\n                    }\n                }\n            } else", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^job-template$', job_template, name=\"ajax-job-template\"),\n    url(r'^job-logs$', job_logs, name=\"ajax-job-logs\"),\n    url(r'^job-logs/package/(?P<package", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\tif (meter.getData() == null) {\n\t\t\tnotEnoughData = \"No data\";\n\t\t} else {\n\t\t\tnotEnoughData = \"\";\n\t\t}\n\t}\n\t\n\tprivate final static int[][][][][][][]", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "   self._storage_type = storage_type\n\n    def set_storage_type(self, storage_type):\n        self._storage_type = storage_type\n        return self\n\n    def set_storage_type(self, storage_type):\n        self._storage_type", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$Argument3> WhenApplyingThreeArguments<$SystemUnderTest, $Argument1, $Argument2, $Argument3> andArgument(\n            CheckedSupplier<$Argument3> givenStep) {\n        preparation.recordGivenStep(givenStep);\n       ", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   String result = null;\n    int exitCode = 0;\n    try {\n      result = process.await();\n      exitCode = process.exitCode();\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(this, e);\n    }", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (textColor == Color.BLACK) {\n\t\t\tTextView tv = (TextView)findViewById(R.id.text);\n\t\t\ttv.setTextColor(textColor);\n\t\t} else {\n\t\t\tImageView img = (ImageView)findViewById(R.id", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\n\t\t// 1. Create a new instance of the class\n\t\t// 2. Call the constructor with the parameters\n\t\t// 3. Assign the value of the constructor to the variable\n\t\t// 4. Return the value of the variable\n\n\t\t// Step ", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   captureDispatchPress(4)\n    captureDispatchPress(4)\n    captureDispatchPress(4)\n    '''\n    drag_wait = 750\n    packagename = app_info['packagename']\n    mainactivity = app_info['mainactivity']\n   ", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, city):\n        \"\"\"\n        **!raid-city city-name** - sets the city for the raid party\n        \"\"\"\n        city = await ctx.city()\n", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(try_parsing_gen_date(\"25/11/2015\") == datetime(2015, 11, 25, 15, 10, 3))\n        self.assertTrue(try_parsing", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor()\n        config_actor.start()\n        config_actor.send(Messages.CONFIG_ITEM.value, '{\"persistence\": {\"honeypot\": {\"id\": honeypot_id}, \"client\": {\"id\": client_id},", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           Intent intent = new Intent(Intent.ACTION_SEND);\n                            intent.setType(\"image/*\");\n                            intent.putExtra(Intent.EXTRA_SUBJECT, \"\");\n                            intent.putExtra(Intent.EXTRA_TEXT, \"\");\n                           ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\toutdata = np.column_stack((positive_data,negative_data))\n\t\t\t\t\t\t\tif opts.neglog:\n\t\t\t\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "\n                @Provides\n                Context context;\n\n                @Provides\n                AccountManager accountManager;\n\n                @Provides\n                OhmageService ohmageService;\n\n                @Provides\n                Gson gson;\n\n                @Provides", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "   def _sigtype(self):\n        return self.sigtype\n\n    def _pubalg(self):\n        return self.pubalg\n\n    def _hash(self):\n        return self.hash\n\n    def _hashed_subpackets(self):\n        return", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   elif isinstance(context, XPathSchemaContext):\n        for item in context.iter_children_or_self():\n            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n\n@method(nullary('.'))\ndef", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "\n    nc.send_message_with_protocol(protocol, 'hello world')\n        self.assertEqual(protocol.send_string.call_count, 1)\n        self.assertEqual(protocol.send_string.call_args[0],\n                         '11", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertEquals(\"query\", qe.getQuery());\n        assertEquals(\"query\", qe.getClass().getSimpleName());\n        assertEquals(\"query\", qe.getClass().getCanonicalName());\n        assertEquals(\"query\", qe.getClass().getName());\n", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "\n    Assert.assertThat(ds, executions(0, failure()));\n    Assert.assertThat(ds, executions(0, is(failure())));\n\n\n    @Test\n    public void testExecutionSuccessBatch() {\n        StatementBatchExecution se = new StatementBatch", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "   \"\"\"\n    # If we are running, return\n    if self.adrprocessing is True:\n        returnValue(None)\n\n    self.adrprocessing = True\n\n    # Get the devices\n    devices = yield Device.all()\n\n    # Get the devices with target data rate", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "   for i, args in enumerate(self.fmllr_rescore_arguments()):\n        function = FmllrRescoreFunction(args)\n        p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n        procs.append", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# IEEE 802.15.4 PHY and MAC format\n# PHY is the one at 2.4 GHz\n#\n# These are from IEEE 802.15.4 spec\nBool_dict = {0:'False',", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       super.onStart();\n        if (chat == null) {\n            chat = DatabaseManager.INSTANCE.getChatDAO().get(getArguments().getLong(CHAT_ID));\n        }\n        if (chat == null) {\n            Log.e(this.", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "\n\n        # Save the picks\n        json_dict['picks'] = self.picks\n\n\n        # Save the platepar\n        if self.platepar is not None:\n\n            json_dict['platepar'] = self.platepar\n\n\n        # Save the", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList == null) {\n            mPublicRoomsListList = new ArrayList<PublicRoom>();\n        }\n\n        if (mPublicRoomsListList.size() == 0) {\n            mPublicRoomsListList.add(new Public", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "\n    @command(name=\"bingo\")\n    async def _bingo(self, ctx):\n        \"\"\"\n        Bingo!\n        \"\"\"\n        await ctx.send(embed=Embeds.make_embed(\n            header_icon=Icons.BINGO, msg", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "   chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n    chim_detect.break_contigs(perm_files, synteny_sizes)\n    chim_detect.break_contigs(", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       // TODO: Add a comment explaining why this is here\n        // TODO: Add a comment explaining why this is here\n        // TODO: Add a comment explaining why this is here\n        // TODO: Add a comment explaining why this is here\n        // TODO: Add a comment explaining why this is here", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   initMiPush();\n                }\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            case \"HWPush\":\n                if(shouldInit()) {Next line of code:\n                    initHwPush();\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "\n    public void close() {\n        if (channel != null) {\n            channel.close();\n        }\n    }\n\n    public String getConnectionId() {\n        return connectionId;\n    }\n\n    public MBeanServerConnection getMBeanServerConnection(Subject subject)", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public static void main(String[] args) {\n        new PersonalVulnsWindow();\n    }\n\n    public PersonalVulnsWindow() {\n        initComponents();\n    }\n\n    private void initComponents() {\n        setTitle(\"Personal Vulnerabilities\");\n", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "\n    public void setDatasetGenerator(DatasetGenerator datasetGenerator) {\n        this.datasetGenerator = datasetGenerator;\n    }\n\n    public void setGCTraceSet(GCTraceSet gcTraceSet) {\n        this.gcTraceSet = gcTraceSet;\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getType() == PacketType.ACK) {\n            ackManager.onAck(client, packet);\n        } else if (packet.getType() == PacketType.ERROR) {\n            ackManager.onError(client, packet);", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.setConstraints(appRtcClient.videoConstraints());\n      }\n      videoSource = new VideoSource(lMS);\n      videoSource.setObserver(new VideoSource.Observer() {\n          public void onComplete(MediaStream stream) {\n            videoSourceStopped =", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "\n    }\n\n    public static void main(String[] args) {\n        JobRobolectricTestRunner.run(new JobRobolectricTestRunner.TestRunner() {\n            @Override\n            public void run(Context context) {\n                JobManager.instance().destroy();", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n\n    private Preference preferenceHideTime preferenceHideTime;\n    private Preference preferenceHideMenuBarPosition preferenceHideMenuBarPosition;\n    private Preference preferenceMenuColumns preferenceMenuColumns;\n    private Preference", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   return obj\n\n\ndef init_slave(obj, basedir=None):\n    # a slave object is needed in order to coopy work\n    if not obj:\n        raise Exception(CORE_LOG_PREFIX +\n                \"Must input a valid object if there'", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "\n    return docker_config\n\n    def determine_executable(self, desktop_file):\n        if self.config.debug_gdb:\n            return 'gdbserver localhost:{} {}'.format(\n                self.config.debug_gdb_port,\n                self.", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   final List<Board> boards = new ArrayList<>();\n    for (int i = 0; i < SectionNames.length; i++) {\n      String sectionName = SectionNames[i];\n      String sectionURL = SectionURLs[i];\n      boards.addAll(SM", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       super.onStart();\n\n        //bgTasksRunning.incrementAndGet();\n        //if (bgTasksRunning.get() > 1) {\n        //    Log.d(\"BGTasks\", \"BGTasks running\");\n        //}\n\n        //bgTasksRunning.", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertTrue(isclose(simulator_data.velocities.r, fdm.velocities.r, 3))\n        self.assertTrue(isclose(simulator_data.velocities.true_airspeed, fdm.velocities.true", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           if (showResponse) {\n                showMessage();\n            } else {\n                showResponse = true;\n            }\n        } else {\n            showResponse = false;\n        }\n    }\n\n    private void showMessage() {\n        if (httpMessage.getRes().", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\ndef test_simple_status_with_gsi():\n    \"\"\"Status is busy because table isn't ACTIVE, GSI is BUSY\"\"\"\n    description = {\"TableStatus\": \"ACTIVE\",", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def _load_file(self, fileobj):\n        raise error(\"Not implemented\")\n\n    def _pre_load_header(self, fileobj):\n        try:\n            fileobj.seek(self._load_file(fileobj)['ID3'].data_offset", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitCheckOp4(n));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitCheckOp4(n), query);\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   *", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MaskTransformation(),\n                ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\n    self._orientSocket.protocol = self._header[0]\n    self._orientSocket.session_id = self._header[1]\n\n    return self\n\n    def _decode_field(self, field):\n        \"\"\"\n        :param field:\n        :return:", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n    if args.settlement_period is None:\n        print(\"A settlement period should be supplied using the --settlement-period flag (range 1 to 50).\"\n              \"Defaulting to 1", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage();\n\t\t\t} // if-else\n\t\t\titem.copyFrom( proxy, GalleryItem.class );\n\t\t\titems.add( item );", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   dump_key(engine, user)\n\n\ndef test_index_for():\n    \"\"\"Index by each object's value for an attribute\"\"\"\n    class Person:\n        def __init__(self, name):\n            self.name = name\n\n    p1, p2", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new Percentage(),\n        new Status(),\n        new StaticString(\"\"),\n        new Spinner(Spinner.SPINNER_SLASHES),\n        new Fraction(),\n        new StaticString(\"\"),\n        new ProgressBar(50, BAR_EQU", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static FormFor formFor(Object resource, Object... fields) {\n\t\treturn new FormFor(resource, fields);\n\t}\n\n\tpublic static FormFor formFor(Object resource, Object... fields) {\n\t\treturn new FormFor(resource, fields);\n\t}", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "   return self.call_api(\"projects/%s/devices\" % project_id, type=\"GET\", params=params)\n\n    def list_devices(self, project_id, params=None):\n        data = self.call_api(\"projects/%s/devices\"", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   ParameterHolderMatcher parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (mWallpaper != null) {\r\n                WallpaperDownloader.Builder(mWallpaper.getURL())\r\n                        .setImageConfig(new ImageConfig.Builder(mWallpaper.getWallpaperProperties())\r\n                                .setWallpaper(", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\n  public QsolToQueryVisitor(Analyzer analyzer) {\r\n    this.analyzer = analyzer;\r\n  }\r\n\r\n  public Query getQuery() {\r\n    return proxBuilder.getQuery();\r\n  }\r\n\r\n  /**\r\n   * f0", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.mapper is not None:\n\t\t\tmapper=Mapper(args.mapper)\n\t\t\tmapper.folder.path=args.mapper_folder\n\t\t\tmapper.folder.name=args.mapper_name\n\t\t\tma", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "\n    self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n    # If the beginning time is not found, try to read it from the file\n    if not self.beginning_datetime:\n        self.beginning_datetime = filenameToDatetime(", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   p = exactpsf.FixedSSChebLinePSF(kfki=1.07, zslab=-29.3, alpha=1.17,\n            n2n1=0.98, sigkf=-0.33, zscale=", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tif (FOOD_MODIFIER_ENABLED)\n\t\t\tFoodModifier.GLOBAL.setFormula(ModConfig.FOOD_MODIFIER_FORMULA);\n\t\t\tFoodModifier.GLOBAL.setRounding", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "\n    return render(request, self.template_name, {'post' : post})\n\n    def post(self, request, pk, username, slug):\n        post = get_object_or_404(Post, pk=pk)\n        if post.de", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tif (selectedCells.iterator().hasFocus()) {\n\t\t\t\t\t\t\tnatTable.setFocus();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tnatTable.setFocus();\n\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = 0x00\n        self.keyid = 0x00\n        self.keyserverpreferences = 0x00\n        self.", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "   if item is None:\n        yield context.root\n        raise self.missing_context()\n\n    elif is_xpath_node(item):\n        yield item\n\n\n@method(function('processing-instruction', nargs=(0, 1), bp=79,", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   return getAS2PuffleString(client, puffles)\n\n\ndef getAS2PuffleString(client, puffles):\n    puffles_as2_str = list()\n    for puffle in puffles:\n        p_id, p_", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   I.set_tile(tile)\n    I.update(P.get(), H.get())\n    I.draw()\n    I.draw_ortho(im, g, cmap='Greys_r', vmin=0, vmax=1)\n   ", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "   for args in jobs:\n        compile_info_func(args)\n        compile_info_func(args)\n        compile_info_func(args)\n        compile_info_func(args)\n        compile_info_func(args)\n        compile_info_func(", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   platepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\n\n    # Recompute the FOV scale (px/deg)\n    platepar.F_scale = 36", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "\n    }\n\n    private void createJobs(UpgradeAbleJobOpenHelper openHelper, boolean validInterval, boolean validTag) {\n        SQLiteDatabase database = openHelper.getWritableDatabase();\n\n        ContentValues contentValues = openHelper.createBaseContentValues(1);", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       super.onStart();\n\n        if (chatRem == null) {\n            chatRem = getActivity().findViewById(R.id.chat_rem);\n        }\n\n        if (users == null) {\n            users = new ArrayList<>();\n        }\n\n        if (m", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "   \"\"\"\n    This is a comment.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(ProgressFilter, self).__init__(*args, **kwargs)\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    code =", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "\n    }\n\n    @UiThread\n    protected void setBottomInfo() {\n        TextView textView = (TextView) dataList.findViewById(R.id.bottom_info);\n        textView.setText(R.string.bottom_info);\n        textView.setTextColor(", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "\n    }\n\n    @Override\n    public Promise<Void> disconnect(final ConnectionContext context) {\n        return Promises.newSuccess();\n    }\n\n    @Override\n    public Promise<Void> close(final ConnectionContext context) {\n        return Promises.", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegisterFragment(name, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/asyncTasks/server/GetInfoTask.java\npublic class GetInfoTask extends AsyncTask<", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   if (x > 0) {\n        return x;\n    } else {\n        return 0;\n\n    // This is the same as the above line, but it's a different way of writing it.\n    return x;\n\n    // This is the same as the", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n\n        // TODO Auto-generated method stub\n\n        // TODO Auto-generated method stub\n\n        // TODO Auto-generated method stub\n\n        // TODO Auto-generated method stub\n\n       ", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "   if not self.is_valid_message(args.gps_sv[0]):\n        raise ValueError(\"Invalid GPS SV\")\n\n    if args.message_type == 'zero':\n        self.zero_message(args.gps_sv[0])\n\n", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "\n    def _render_fill(self):\n        fill = self.style.fill\n        tris = self.triangles\n        self.svg.n_tris += len(tris) / 3\n        g = None\n        if isinstance(fill, str):\n           ", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.contains(\"component\")) {\n\t\t\t\t\tString[] parts = data.split(\"component=\");\n\t\t\t\t\tif (parts.length == 2) {\n\t\t\t\t\t\ta = new AppData(parts[1], parts", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = np.arccos(np.dot(self.beg_vect, self.end_vect))\n        self.end_alt = np.arccos(np.dot(self.beg_vect, self.end_vect))\n", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "\n    /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean enter(Node node);\n\n    /**\n     * Called when the visitor reaches a leaf node.", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    if (x > 0) {\n        return x;\n    } else {\n        return 0;\n\nI'm trying to understand the logic of this code. I understand that the first part of the code is checking if x is greater than 0, and if it is,", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "   }\n\n    private void setupSettingsProvider() {\n        bind(GerritSettingsConfigurable.class).toInstance(new GerritSettingsConfigurable());\n    }\n\n    public static final class Proxy extends AbstractModule {\n        private final GerritModule delegate;\n\n        public", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (getZxidFromName(snapshots.get(i).getName()).equals(zxidLong)) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n           ", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "   self.filter_bar.refresh()\n\n    def _refresh_filter_bar(self):\n        self.filter_bar.refresh()\n\n    def _refresh_filter_bar_items(self):\n        self.filter_bar.refresh_items()\n\n    def _", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   # reserved for JPEG\n    ('JPEG', 'JPEG'),\n    ('SOI', 'SOI'),\n    ('EOI', 'EOI'),\n    ('SOS', 'SOS'),\n    ('DQT', 'DQT'),\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\tif (query.length() > 0) {\n\t\t\t\t\t\treturn Observable.just(query);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Observable.error(new", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. background\n    bg = np.random.randn(POS.shape[0]) + 0.5  # 0.5 +- 0.5 px background\n    # 3. add noise\n    noise = np.random.randn(POS.", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "   result, index = apply_fast_and(left.values, right.values,\n                                  left.index, right.index)\n    return Column(result, index)\n\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request.getPackageName() != null) {\r\n                        stringBuilder.append(\"Package Name: \")\r\n                                .append(request.getPackageName());\r\n                    }\r\n               ", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "\n```python\ndef get_data(self, data_type: str, **kwargs) -> Any:\n        \"\"\"\n        Get data from the data store.\n\n        :param data_type: The data type to get.\n        :param kwargs: Additional parameters to pass to the", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "   return Mediathek(self._createSearchHistory(context))\n\n\ndef _createSearchHistory(context):\n    searchHistory = SearchHistory(context.log, context.settings.storeFile, context.settings.searchHistorySize)\n    searchHistory.info(\"search-history-", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "   if pattern.datafile is not None:\n        if not checkFileExistence(pattern.datafile):\n            errmsg += \"Fit.validate():  Data file '%s' does not exist.\"%pattern.datafile\n            rvalue = False\n\n        # 2.2", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'type')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private List<RepoItem> repoItemList = new ArrayList<RepoItem>();\n    private List<RepoItem> repoItemList = new ArrayList<RepoItem>();\n    private List<RepoItem> repoItemList = new ArrayList<RepoItem>();\n    private List<", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, postprocessors);\n\t\t\n\t\tFile output = ddi2fo.generate(new File(basePathDDI2FO + \"/dummy.dif\"), null, \"dummy\");\n\t\t\n\t", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Send the email\n                        new UserLoginTask(user, this.getClass()).execute(emailTmp);\n                    }\n                });\n\n        // \"Cancel\" button to cancel the operation\n        alert.setNegativeButton(R.string.Cancel,\n               ", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^new$', staff_member_required(NewPackageView.as_view(), login_url=LOGIN_URL),\n        name=\"package-new\"),\n    url(r'^view/(?P<package_name>[\\w\\-\\+]+)$',", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[tg.getTierByName(\"Tier1\")]\n\n\ndef run_read(fn):\n    with io.open(fn, \"r\") as fd:\n        return fd.read()\n\n\ndef run_read_textgrid", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "   \"\"\"\n    This is a comment.\n    \"\"\"\n\n\ndef main():\n    \"\"\"\n    This is a comment.\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef test_main():\n    \"\"\"\n    This is a", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "   dataset = UAV123(root_dir, version=version)\n    self._check_dataset(dataset)\n\n    def test_lasot(self):\n        root_dir = os.path.join(self.data_dir, 'LaSOT')\n        dataset", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "\n    /**\n     * Returns the value of the tag.\n     * @return the value of the tag\n     */\n    default Object getValue() {\n        return null;\n    }\n\n    /**\n     * Returns the value of the tag.\n     * @return the value of", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "\n    return self._create_split(components, waveforms, masks,\n                            thresholds=thresholds,\n                            keep_bounds=(keep_start, keep_end),\n                            s_start=s_start,\n                            )\n\n    def _create", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t\treturn new ExpansionResult();\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPhraseQueryNode phraseQueryNode, Void param) {\n\t\t\treturn getPhraseQueryNodeExplanations(phraseQueryNode);", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tpublic void setPipelineGenerator(PipelineGenerator generator) {\n\t\tthis.pipelineGenerator = generator;\n\t}\n\tpublic void setValorizatorParameters(ValorizatorParameters valorizatorParameters) {\n\t\tthis.valorizatorParameters = valorizator", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n\n        registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       String[] words = content.split(\" \");\n                        for (String word : words) {\n                            if (word.equals(word.toLowerCase())) {\n                                if (lp.detectLanguage(word) != null) {\n                                    String language = lp", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "\n    def _render_descriptor_helper(self, descriptor, indent):\n        lines = []\n\n        if isinstance(descriptor, SequenceDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.name))\n            for member", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\n    parser.parser.add_argument(\n        \"--loss\",\n        dest=\"packet_loss_rate\",\n        help=\"network packet loss rate [%].\n        valid units are either: {}.\n        e.g. tcset eth0 --loss 10\n", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "   return self.contacts\n\n    def get_contacts_by_language(self, language):\n        return self.contacts.filter(language_preference=language)\n\n    def get_contacts_by_group(self, group_name):\n        return self.", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org)));\n\n    // Convert live projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> live", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.rule.get_soft_404_sample = make_mocked_coro()\n\n    def test_get_tail_pattern(self):\n        self.assertEqual(self.rule.get_tail_pattern(\"http://example.com/test/\"), \"/", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "   conditions.append(AndCondition(operations[0], operations[1]))\n\n\ndef conditions_for_and(operations):\n    return conditions_for(*operations)\n\n\ndef conditions_for_or(operations):\n    return conditions_for(*operations)\n", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "   assert get_square_idx(1, 2) == 0\n\n\nclass TestDutchNationalPartition(object):\n    \"\"\"\n    Testing dutch national partition\n    \"\"\"\n\n    def test_basic_example(self):\n        assert dutch_national_", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final IJavaProject project;\n\n    private final IJavaElementSearchConstants searchConstants = new IJavaElementSearchConstants() {\n\n        @Override\n        public String getSearchType() {\n            return IJavaElementSearchConstants.SEARCH_TYPE_METHOD;\n       ", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debug = false;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugFonts = false;\n\tprivate boolean debugFonts = false;\n\tprivate boolean debugFonts = false;\n\tprivate boolean debugFonts = false;\n\tprivate boolean debugFonts =", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "       \"  javadoc -d \" + javadoc.destination() + \" \" + cmdLine.toCmdLine());\n    var args = files.split(\" \");\n    var args2 = args.stream()\n        .map(arg -> arg.trim())\n        .filter(arg", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "   return RespostaSAT.analisar(retorno)\n\n    def consultar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "\n    public void registerCallAction(CallAction callAction, int actionId)\n    {\n        actions.put(actionId, callAction);\n    }\n\n    public CallAction getCallAction(int actionId)\n    {\n        return actions.get(actionId);\n   ", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "\n    # If the user wants to see the output in the pager, we need to run the\n    # command in a subshell.\n    if gopts.pager:\n      pager = RunPager(self.repodir, gopts.pager)\n      pager.", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   SharedPreferences provideSharedPreferences() {\n        return PreferenceManager.getDefaultSharedPreferences(app);\n    }\n\n    @Provides @Singleton\n    SharedPreferences provideSharedPreferences() {\n        return PreferenceManager.getDefaultSharedPreferences(app);\n    }\n\n   ", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "\n        Assert.assertThat(ds, totalQueryCount(5));\n\n        verify(ds).getQueryExecutions();\n    }\n\n    @Test\n    public void testBatchCount() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "   return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       verifiers.put(\"Local Files Exist Verifier\", new LocalFilesExistVerifierImpl());\n        verifiers.put(\"Remote Files Exist Verifier\", new RemoteFilesExistVerifierImpl());\n        verifiers.put(\"Valid Schema Name Verifier\", new ValidSchemaName", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "   }\n\n    public void onPostLoginExecute(Boolean success, long userId, String product) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        activity.getSelfUser().setId(userId);\n\n        if (success) {", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   public void setTaxonomy(HashMap<Integer, DrupalTaxonomyTerm> taxonomy)\n    {\n        this.taxonomy = taxonomy;\n    }\n\n    public HashMap<Integer, DrupalTaxonomyTerm> getTaxonomy()\n    {\n        return", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "   self.history.apply(text)\n\n    self.history.save(text)\n    self.history.reset()\n    self.history.clearNewMessage()\n    self.history.clear()\n    self.history.clear()\n    self.history.clear()\n   ", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/logout/', LogOutHandler),\n            (r'/logout/', LogOutHandler),\n            (r'/logout/', LogOutHandler),\n            (r'/logout/',", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explan", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion\");\n        }\n\n        return new SelectionChunk(informationCriterion);\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1, ty2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed argument into a Fst.\n    \n    Arguments:\n    - `expr`: an expression", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void setBatteryStatusIndicator(BatteryStatusIndicator indicator);\n    void setAudioBookManager(AudioBookManager audioBookManager);\n    void setAudioBookPlayerModule(AudioBookPlayerModule audioBookPlayerModule);\n    void setDemoSamplesInstallerService(DemoSamplesInst", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private int lineNumber = 0;\n    private int lineNumberOfCode = 0;\n    private int lineNumberOfCode = 0;\n    private int lineNumberOfCode = 0;\n    private int lineNumberOfCode = 0;\n    private int lineNumberOf", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Mock(content_type='text/plain')\n    response.status_code = 500\n    response.headers = {'Content-Type': 'text/plain'}\n    response.body = 'foo'\n    response.json_body = {'foo': 'bar'}", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t@Override\n\tpublic void enterCommandChain(ConsoleCommandParser.CommandChainContext ctx) {\n\t\tatomicalConsole.getConsole().println(\"\");\n\t\tatomicalConsole.getConsole().println(\"\");\n\t\tatomicalConsole.getConsole().println(\"\");\n\t\tatom", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "\n    except TextGridParseError as e:\n        self.return_dict[\"parse_error_files\"].append(e)\n\n    except Exception as e:\n        self.return_dict[\"other_error_files\"].append(e)\n\n    finally:\n        self.fin", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "\n    api.add_resource(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "\n    def test_airspeed_indicator(self):\n        huginn_data_path = configuration.get_data_path()\n\n        fdm_builder = FDMBuilder(huginn_data_path)\n        fdm_builder.aircraft = \"Ras", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   CMD_OPTION_HELP_HELP_LINE,\n    '--no, --names-only Retrieve only the object paths (names).',\n    '--iq, --include-qualifiers Include qualifiers in the returned',\n    '--hi,", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t@RequestMapping(value = \"/manage/index.html\")\n\tpublic ModelAndView index(HttpServletRequest req,HttpServletResponse resp) {\n\t\tModelAndView mv = new ModelAndView(\"manage/index\");\n\t\treturn mv;\n\t}\n\t\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           if(t.getMessage() != null) {\n                                MessageHelper.showCriticalError(project, t.getMessage());\n                            } else {\n                                MessageHelper.showCriticalError(project, t.getClass().getName());\n                            }\n                       ", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "\n    def run_e2e_flow_for_language(self, language, person_name):\n        logging.info(\"running e2e full flow for language: \" + language)\n        self.run_e2e_flow_for_language(language, person_name,", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "\n    if (a.length() > 0) {\n      return a.substring(0, 1);\n    } else {\n      return \"0\";\n\nThis code is part of a larger program that calculates the number of days between two dates. The program uses the `Date`", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   print \"\\n[INFO] MobSF will perform Dynamic Analysis on VirtualBox based VM\"\n    # adb, avd_path, reference_name, dup_name, emulator\n\n\ndef get_static_info(file_path, file_md5):\n\n    unzip", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "   # 44018, section 10.1\n    # standard RRC header\n    # 44018, section 10.1\n    # standard RRC header\n    # 44018, section 10.1\n    #", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\tif opts.vertexdist:\n\t\t\tif opts.vertexdist[0] == 1:\n\t\t\t\tprint(\"Creating adjacency set\")\n\t\t\t\tif opts.vertexdist[1] == 1:\n\t\t\t\t\t", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(\" = \");\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue());\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACKET", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       cacheService.storeCacheList(new CacheList(listName));\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String> listNameOption = Dialogs.\n        create().\n        title", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   ]\r\n    def __init__(self, CallName='', ReprName='', Pt=None, PtFunc=None, Val=None, \\\r\n                 Len=None, LenFunc=None, Repr=None, Trans=False, TransFunc=None):\r\n", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.class)\n        );\n\n        timeEntriesTable.getColumn(\"status\").setAggregation(\n                ScreensHelper.createAggregationInfo(\n                        projectsService.getEntityMetaPropertyPath(TimeEntry.class, \"", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "   def pkalg_bin(self, val):\n        self._pkalg = binascii.unhexlify(six.b(val))\n\n    @sdproperty\n    def pklen(self):\n        return self._pklen\n\n    @pklen.register", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "   @property\n    def expansion_type(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                                0, ExpansionInfo.EXPANSIONTYPE)\n\n    @property\n    def expansion_num(self", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "\n    self.key_size = read_u16le(f)\n\n\n    def read_data(self):\n        self.data = f.read()\n\n    def read_data_array(self):\n        self.data = f.read(self.data_", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "   user = create_inactive_user(email, full_name)\n\n    # Send email to invite user to activate account\n    subject = _('Invitation to join %s') % site.name\n    template = 'connect/accounts/emails/invitation.txt", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('bcc_btc')\n        elif name == \"%s_ETH_BTC\" % constant.EX_HITBITC:\n            ex = Hitbtc('eth_btc')\n        elif name == \"%s_ETC_BTC\"", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "   elif self.xsd_types is None:\n        for item in context.iter_children_or_self():\n            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n    else:\n        # XSD typed selection\n        for item", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10);\n      Iterator<Map<String,RDFNode>> iter = solutions.iterator();\n      Assert.assert", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\tresult.setIndex(index);\n\t\t\tresult.setTextExpander(textExpander);\n\t\t\tresult.setNormalizationOptions(new NormalizationOptions());\n\t\t\tresult.setFacetLabelFactory(new FacetLabelFactory());\n\t\t\t", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   MiPushClient.init(this, \"1234567890\", \"1234567890\", \"1234567890\", \"1234567890\", \"12345", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "\n    if (a > b) {\n        return a - b;\n    } else {\n        return b - a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "\n    if status:\n        output.append(status)\n    if table_format:\n        output.append(table_format)\n    if headers:\n        output.append(headers)\n    if cur:\n        output.append(cur)\n    if output:\n        output", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "\n    @app.route('/api/word/<word>')\n    @as_json\n    def word_api_route(word):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\t@Inject\n\tprivate ConnectorComments connectorComments;\n\t@Inject\n\tprivate ConnectorWorkLog connectorWorkLog;\n\t@", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "   self.assertIsNotNone(handle)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\n        self.assertIsNone(handle)\n\n    def test_create_", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "\n    public void setStemcells(Stemcells stemcells) {\n        this.stemcells = stemcells;\n    }\n\n    public void setDeployments(Deployments deployments) {\n        this.deployments = deployments;\n   ", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "\n    // Create a new array to store the results\n    int[] results = new int[1000];\n    // Initialize the array with zeros\n    for (int i = 0; i < results.length; i++) {\n        results[i] = 0;\n\n", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "\n    protected PageParser pageParser;\n\n    protected PageHandler pageHandler;\n\n    protected PageParser pageParser;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n    protected PageHandler pageHandler;\n\n", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new EditMongoDocumentAction(editTableView));\n            actionPopupGroup.add(new DeleteMongoDocumentAction(editTableView));\n            actionPopupGroup.add(new CopyAllAction(editTableView));\n            actionPopupGroup.", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        if (this.getParent() != null) {\n            this.getParent().drawComponent(this);\n        }\n    }\n", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearAll", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "   }\n\n    /**\r\n     * @see org.eclipse.ui.part.WorkbenchPart#dispose()\r\n     */\r\n    public void dispose()\r\n    {\r\n        _configuration.removePropertyChangeListener(_listener);\r\n    }\r\n\n    /**\r\n     * @", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.format.pretty = \"foo\"\n        type.format.advanced = \"bar\"\n\n        self.assertEqual(\"foo\", type.get_sample", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        command", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datasegment_name):\n        self._datasegment_name = _", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'write',\n        'frob': frob,\n    }\n\n    url = urlunparse(('http', 'flickr.com', 'services", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "   if bytecode[i][2] == EQUAL:\n      condition_bytecode.append(bytecode[i + 1])\n      condition_bytecode.append(bytecode[i + 2])\n    elif bytecode[i][2] == NOT_EQUAL", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   private static final int REQUEST_CODE_CHECK_CREDIT_PERIOD_LIMIT = 1;\n    private static final int REQUEST_CODE_CHECK_CREDIT_PERIOD_LIMIT_DIALOG = 2;\n    private static", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('lang_name', 'lang_slug',", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   @property\n    def parser_name(self) -> str:\n        return self.__parser._parser_name\n\n    @property\n    def parser_name(self) -> str:\n        return self.__parser._parser_name\n\n    @property\n    def parser_name(", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           Log.e(this.getClass().getSimpleName(), \"get chat from DB failed\");\r\n            return;\r\n        }\r\n\r\n        //trying to get the latest message on display\r\n        try {\r\n            latestMessageOnDisplay = DatabaseManager.INSTANCE.getChatDA", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\tif (line.length == 0) {\n\t\t\treturn;\n\t\t\tif (line.charAt(0) == ' ') {\n\t\t\t\tline = line.substring(1);\n\t\t\t\tif (line.length() == 0) {", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   if not person.avatar_source or person.avatar_source == 'facebook.com':\n        avatar = Media(\n            image_url='http://graph.facebook.com/%s/picture' % fb_user[\"id\"],\n            width=50,\n           ", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "\n        // query type\n        assertThat(qe, queryType(QueryType.SELECT));\n        assertThat(qe, queryType(QueryType.INSERT));\n        assertThat(qe, queryType(QueryType.UPDATE));\n        assertThat(qe, queryType(", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "\n    } else if (Utils.getXmlNodeValue(doc, TAG_DONE) != null) {\n      log(\"server response is: done \" + serverMessage.getUploadedFileNames(), null);\n      successful = true;\n      if (onSubmitComplete) {\n       ", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_ids=original_assembly_points_by_ids,\n                                                         id_prefix=\"or_\", id_generator=id_generator,\n                                                         skip_existing", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "\n    api.add_resource(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "\n    @staticmethod\n    async def send_channel_config_embed(ctx, config):\n\n        embed = Embeds.make.embed(header=\"Channel Configuration\", header_icon=Icons.CONFIGURATION,\n                        fields={ key.capitalize():value for key", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.getInstalledTs() > 0) {\n\t\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\t\tgetString(R.string.install_level),\n\t\t\t\t\t\t\t\tgetString(R.string", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final DateTimeFormatter WEEKLY_CALENDAR_CALENDAR_CALENDAR_CALENDAR_CALENDAR_CALENDAR_CALENDAR_CALENDAR_CALENDAR_CALENDAR_CALENDAR", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator);\n    locators.setVerifierProvider(SignatureAlgorithm.HS1, hmacLocator);\n    locators.set", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "\n    public static void main(String[] args) {\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int[][] result = new int[matrix.length][matrix[0", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "\n                    // Now try to get the file again\n                    retrievedContent = client.getObject(containerName, fileName);\n                    assertArrayEquals(content, retrievedContent);\n\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    fail(e.getMessage", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "   }\n\n    @Override\n    public void foundStreamLiveInfo(StreamLiveInfo info) {\n        StreamLiveInfo oldLiveInfo = this.liveInfo;\n        this.liveInfo = info;\n\n        if (BuildConfig.DEBUG) {\n            Map<String, String>", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   @SuppressLint(\"NewApi\")\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ActionBar actionBar = getSupportActionBar();\n        actionBar.set", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "\n        }\n\n        private void setSubtitle(String subtitle) {\n            this.subtitle.setText(subtitle);\n        }\n\n        private void setTitle(String title) {\n            this.autoFitTitle.setText(title);\n        }\n\n        private", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "   app_configs[ConfigKey.ENCODING] = Default.ENCODING\n\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = {}\n\n    convert_configs = load_convert_config(\n        logger, app_configs", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "   def _getPlaylistItem(self, item):\n        \"\"\" Match an item to a playlist item and return the item playlistItemID. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item.play", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "\n    def test_type_check_for_environment_value(self):\nNext line of code:\n\n    def test_type_check_for_environment_key_and_value(self):\nNext line of code:\n\n    def test_type_check_for_environment", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   if gopts.editor:\n      cmd.client.editor = gopts.editor\n    if gopts.pager:\n      cmd.client.pager = gopts.pager\n    if gopts.pager_timeout:\n      cmd.client.pager_timeout =", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行任务延时设定。\n                if (taskData.getTaskDelay() > 0 && taskData.getQueueDate() != null) {\n                    long delaySleep = taskData.getTaskDelay()\n                            - (System.", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       r.reject_set = set()\n        r.reject_set.add(404)\n        r.reject_set.add(403)\n        r.reject_set.add(500)\n        r.reject_set.", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "\n    }\n\n    /**\n     * 初始化课程数据\n     */\n    private void initCourseData() {\n        ParseCourses parse = new ParseCourses(mContext);\n        List<CourseBean> courseList = parse.getKB(", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "   self.__device = device\n\n    self.__ifb_device = None\n    self.__ip_version = ip_version\n    self.__logger = logger\n    self.__tc_command_output = tc_command_output\n    self.__export_path = export_path\n   ", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "   def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location     # type: ignore\n\n    def add_exit_property(self, state: Dict[str, Any", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "   if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.tokenImage.substring(0, 1));\r\n    } else {\r\n      occurs = opToOccur.get(order", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n    print.append(\"\n\");\n\n    print.append(\"\n\");\n\n    print.append(\"\n\");\n\n    print.append(\"\n\");\n\n    print.append(\"\n\");\n\n    print.append(\"\n\");\n\n    print.append(\"\n\");\n\n", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\n        except:\n            log.error(\"Failed to get ntp info\")\n            sys.exit(1)\n\n    def cleanup(self):\n        self.listener.cleanup()\n        self.reporter.cleanup()\n        self.cleaner.cleanup()\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "\n    }\n\n    /**\n     * Test insert using direct SQLiteDbHelper and test query using content provider\n     */\n    public void testProviderInsert() {\n\n        long movieRowId = DataTestUtilities.insertMovieTestEntry(mContext);\n\n        // Test the basic content", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "   self.assertEqual(node_children(self.elem), [self.elem])\n\n    self.assertEqual(node_children(self.elem), [self.elem])\n\n    self.assertEqual(node_children(self.elem), [self.elem])\n\n   ", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\n\t\tsetContentView(R.layout.map_view_activity);\n\t\tmapView = (MapView) findViewById(R.id.mapView);\n\t\tmapView.setBuiltInZoomControls(true);\n\t\tmapView.setSatellite(true);", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "\n    def get_netconf_protocol(self):\n        return \"netconf\"\n\n\nclass Cisco3560SwitchCore(BaseCiscoSwitchCore):\n    def new_command_processor(self):\n        return EnabledCommandProcessor(\n\n    def get", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "   return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def consultar_numero_sessao(self, numero_sessao):\n        \"\"\"Sobrepõe :meth:`~satcfe.", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   # TODO: model exclusions handling\n    # TODO: better reference state handling\n    mod_srf = Model(dbf, comps, phase_name, parameters={'GHSER'+c.upper(): 0 for c in comps})\n    mod_srf.models =", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "\n    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_condition\",\n                     resource_class", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def _write_utterances(self):\n        \"\"\"Write utterance information for speeding up future runs\"\"\"\n        os.makedirs(self.split_directory, exist_ok=True)\n        for utterance in self.utterances:\n            utterance.write_metadata", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "\n    private static final String TAG_EXTRA_CAMERA_ID = \"tagExtraCameraId\";\n    private static final String TAG_EXTRA_CAMERA_FACING = \"tagExtraCameraFacing\";\n    private static final String TAG_EXTRA", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return new TreeSpeedSearch(new DefaultMutableTreeNode(new DefaultMutableTreeNode(new DefaultMutableTreeNode(new DefaultMutableTreeNode(new DefaultMutableTreeNode(new DefaultMutableTreeNode(new DefaultMutableTreeNode(new DefaultMutableTreeNode(new DefaultMutableTreeNode(new DefaultMutable", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1(state.title, \"h1\");\n\t\t// Input(state.title, \"input\");\n\t\t// Input(state.title, \"input\", \"next\");\n\t\t// Input(state.title, \"input\", \"next\", \"next\");\n\t", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if (output != null) {\n                    Intent intent = new Intent(this, CropActivity.class);\n                    intent.putExtra(\"output\", output);\n                    intent.putExtra(\"crop_aspect_ratio\", cropAspectRatio);\n                   ", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (mFastScroller != null) {\n            mFastScroller.setShowBubble(mShowScrollerBubble);\n        }\n    }\n\n    @", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   assert key.operation == \"and\"\n    assert key.values == [(\"value\", \"value\")]\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_range_key_success(model, index):\n", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,int id,String gcActivityName) {\n        dataset", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "\n    @login_required\n    @wait_for(timeout=TIMEOUT)\n    @inlineCallbacks\n    def get(self, appeui):\n        \"\"\"Method to handle application GET requests\n        \n        Args:\n            appeui (int): Application EUI\n        \"\"\"\n", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "   def __init__(self, directory, settings_ini, default_dirs=True, tree_view=None, main_control=None,**kwargs):\n        self.parent = kwargs.get('parent', None)\n        self.main_control = main_control\n        if", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "   parser.parser.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the valid range is from {:d}\n        to {:d}. (default=%", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static GuiComponent COMPONENT = new GuiComponent(new Location(0, 0, 254, 202));\n\n    private static final int BORDER_WIDTH = 1;\n    private static final int BORDER_HEIGHT = 1", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void dateClicked(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event mouseover items\n     */\n    public interface DateMouseOverListener {\n        /**\n         * Triggered when a date was mouseovered\n         *\n         * @", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "   self._db_type = db_type\n\n    def set_db_type(self, db_type):\n        self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self._db_type", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "\n    public void onPacket(Packet packet, NamespaceClient client, Transport transport) {\n        final AckRequest ackRequest = new AckRequest(packet, client);\n\n        if (packet.isAckRequested()) {\n            ackManager.initA", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private RepoContentTask repoContentTask;\n    private", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live projects\",\n            Read.from(new LiveProjectSource(org)));\n    // Convert the live projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.id = Column(String, hash_key=True)\n        self.range = Column(String, range_key=True)\n        self.exp", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "   self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                       dim, vocab, lookup,\n                                       fork_and_rnn, cache=self._cache)\n\n\n    if standalone_", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isTyping;\n    // Guarded by _lockObject.\n    private boolean _isMuted;\n    // Guarded by _lockObject.\n    private boolean _isTyping", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   // 1. The code is written in a programming language.\n    // 2. The code is part of a larger program or application.\n    // 3. The code is intended to perform a specific task or function.\n    // 4. The code is written by a human programmer or", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "\n    return super(UserBase, self).get(request, *args, **kwargs)\n\n    def get_form_class(self):\n        if self.request.user.is_superuser:\n            return UserFormCreacion\n        elif self.request.user.is_", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic long[] readIntBlock(String path, int blockSizeX, int blockSizeY, long nbBlocksX, long nbBlocksY, int[][][][][][][][][][][][][][][][][][][][][][][][][][][][]", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "\n    void inject(ActorDetailsActivity target);\n    void inject(ActorMoviesFragment target);\n    void inject(ActorMoviesActivity target);\n    void inject(ActorInfoFragment target);\n    void inject(ActorInfoActivity target);\n    void inject(", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "\n    def __init__(self, *args, **kwargs):\n        super(ManagersMixin, self).__init__(*args, **kwargs)\n        self.inventory_manager = InventoryManager()\n        self.packages_manager = PackagesManager()\n        self.", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this, \"Building a wrapper from the given city.\");\n\t\t\treturn activateLoginIfRequested(createMostSuitableWrapper(city,\n\t\t\t\t\tendpointType, serviceDiscoveryInfo, dataParser, networkManager,", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éx", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "   self._cstr = root.data[1]\n    self._cstr = root.data[1]\n    self._cstr = root.data[1]\n    self._cstr = root.data[1]\n    self._cstr = root.data[1]", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "\n    if (this.is_a_string) {\n      return this.is_a_string;\n    } else {\n      return this.is_a_string.is_a_string;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\n\t\tif (round.equals(\"\")) {\n\t\t\treturn JoinResult.ROUND_FULL;\n\t\t}\n\t\tif (round.equals(\"-\")) {\n\t\t\treturn JoinResult.ROUND_PREPARING;\n\t\t}\n\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   if lang is not None:\n        result = int_to_roman(result, lang)\n\n    return result\n\n\n@method(function('format-decimal', nargs=(2, 3),\n                 sequence_types=('xs:decimal?', 'xs:", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.data.name == \"Name\":\n\t\t\t\tdefault_flags |= Qt.ItemIsEditable\n\t\t\telif model_item.data.name == \"Type\":\n\t\t\t\tdefault_flags |= Qt.ItemIsEditable\n", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "\n    def test_hydrate_object__none(self):\n\n        version1 = Version()\n        version1.name = \"v1\"\n        version2 = Version()\n        version2.name = \"v2\"\n\n        versions = {\"v1\": version1,", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         PipeReader reader = new PipeReader(catBytes, dataSource, clientConfig);\n          PipeReader reader = new PipeReader(catBytes, dataSource, clientConfig);\n          PipeReader reader = new PipeReader(catBytes, dataSource, clientConfig);\n         ", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNIT", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "\n    }\n\n    @Test\n    public void storeWithId() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"responses/dab-records-csw-id.xml", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "   @pkalg.register(str)\n    def pkalg_str(self, val):\n        self._pkalg = PubKeyAlgorithm(val)\n\n    @sdproperty\n    def pklen(self):\n        return self._pklen\n\n    @pklen", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = Schema.get(\n                            new ExtMap().mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.ENTITY))\n                            .mput(Schema.InvokeKeys.ENTITY_KEYS, context.get(Schema.Invoke", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/edit/(?P<pk>[-\\w]+)/$', edit", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           if (PreferenceManager.getDefaultSharedPreferences(getActivity())\n                                    .getBoolean(SettingsActivity.KEY_PREF_PLAY_SHUFFLE_TEST, true)) {\n                                stack.shuffle();\n                            }\n                        }\n                   ", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        System.out.println(\"Hello World\");\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.socketTags = []\n        obj.socketLabels = []\n        obj.socketList = []\n        obj.socketList = []\n        obj.socketList = []\n        obj.socketList = []\n        obj.socketList = []\n        obj.socketList = []", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       i, j = self._find_preimage(XorDiff(d1, d2), d3)\n\n        assert isinstance(i, int) and isinstance(j, int)\n        assert i < 2 ** DP_WIDTH and j < 2 ** DP", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        String challengeData = doc.getText();Next line of code:\n\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        String challengeData = doc.getText();Next line of code", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\ndef test_search_ch_skch(bvf_cipher, diff_type, initial_weight, solver_name, rounds, der_mode, search_mode, check,\n                        verbose_level, filename):\n    smart_print = _get_sm", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "\n    public void setActivity(MainActivity activity) {\n        mActivity = activity;\n    }\n\n    public void setRecyclerView(RecyclerView recyclerView) {\n        mRecyclerView = recyclerView;\n    }\n\n    public void setToolbar(Toolbar toolbar) {\n       ", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           mParameterListView.removeAllViews();\n            mParameterListView.addView(mParameterToggleMenuItem);\n            mParameterListView.addView(mParameterListAdapter);\n            mParameterListView.addView(mParameterToggleMenuItem);\n            mParameterListView.addView(mParameterListAdapter", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "   ]\n    def __init__(self, **kwargs):\n        Layer.__init__(self, **kwargs)\n        self.EBT = Bit('EBT', ReprName='EPS Bearer Type', Pt=0, BitLen=4,\n                       Dict=ES", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           // TODO Auto-generated method stub\n\n        }\n    };\n\n    public ArtistFragment() {\n        // TODO Auto-generated constructor stub\n\n    }\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "\n    def _load_corpus_from_mp_data(self) -> None:\n        \"\"\"\n        Load a corpus using multiprocessing\n        \"\"\"\n        begin_time = time.time()\n        self.log_debug(\"Loading corpus from multiprocessing\")", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers for the given IP address.\n     *\n     * @param apiKey account api key\n     * @param ip     Host IP address\n     */\n   ", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.key(), message.value());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    Testing the ERB function.\n    \"\"\"\n    result = erb(freq, bandwidth)\n    assert isinstance(result, CascadeFilter)\n    assert isinstance(result.callables[0], CascadeFilter)\n    assert isinstance(result.", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   return Sequence(seq, is_undefined_length)\n\n\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset=0):\n    \"\"\"Read and return a Sequence item -- i.e. a Dat", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   if (document == null) {\n      throw new IllegalArgumentException(\"document must not be null!\");\n    }\n    if (proxyBuilder == null) {\n      throw new IllegalArgumentException(\"proxyBuilder must not be null!\");\n    }\n    if (commentProcessorInterfaces.", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   public void onResume() {\n        super.onResume();\n        getActivity().setTitle(R.string.search_patterns_title);\n        updateSearchCriteriaDescription();\n    }\n\n    @Override\n    public void onAttach(final Activity activity) {", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags = NotationDataFlags(val)\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags =", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "\n    def addMessage(self, lexmsg, chum):\n        if len(lexmsg) == 0:\n            return\n        color = chum.colorcmd()\n        systemColor = QtGui.QColor(self.parent().mainwindow.theme[\"convo/text/", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   return check_arg(arg, type_, env)\n\n\ndef check_args(args, type_, env):\n    args = check(args, env)\n    with env.errors.location(args.location):\n        unify(args.__type__, type_)\n    return", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if ridge_alpha is None:\n        ridge_alpha = 1.0e-100\n    if features is None:\n        features = {}\n    if features.get('CPM_FORM') is None:\n        features['CPM_FORM'] = (v", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "\n    public void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           LinearAccelerationSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == ", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                    @Query(\"tag\") String tag,\n                                    @Query(\"limit\") @IntRange(from = 1, to = 50) Integer limit);\n\n", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "   return Stream(model, self)\n\n    def delete(self, *objs, condition=None):\n        \"\"\"Delete one or more objects.\n\n        :param objs: objects to delete.\n        :param condition: A condition for these objects which must hold for the delete.\n", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "\n    self.log.info(\"accuracy on %s: %2.2f%% (UAR %2.2f%%)\" % (\n        \" & \".join([p.name for p in parsed_args.eval_partitions]), 100 * accuracy, 1", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t@Autowired\n\tprivate CategoryServices categoryServices;\n\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t@Autowired\n\tprivate CountryServices countryServices;\n\t@Autowired\n\tprivate BannedIp", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "\n    def query(self, first_entity, *entities):\n        return Query(self, (first_entity,) + entities)\n\nError:\n\n    def query(self, first_entity, *entities):\n        return Query(self, (first_entity,)", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with zero initial states.\n\n       ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs = tuple([(platform_slug, platform_slug)\n                        for platform_slug in Platform.objects.values_list('platform_slug', flat=True)])\n\nI'm not sure what the problem is here. I'm trying to get a list", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(ExpressionGroupNode node", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static FormFor formFor(Object resource, Object... fields) {\n\t\treturn new FormFor(resource);\n\t}\n\n\tpublic static A link(Url destination) {\n\t\treturn a(href(destination));\n\t}\n\n\tpublic static Link css(String css", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void visitClass(final ClassResult classRes) {\n        final int numberOfColumns = 9;\n    }\n\n    /**\n     * {@inheritDoc}\n    ", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     if self.entry_node.kind == ControlFlow.N_ENTRY:\n        self.entry_node.data.jumps = get_cfg_tmp_values(self.entry_node)\n        self.entry_node.data.jumps = set(get_cfg_", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\t\t//this.tree = new PrecomputedTree(this.treeFile);\n\t\t\t\t//break;\n\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.treeFile);\n\t\t\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   def _parse_function_expression(self, context: Optional[XPathContext] = None) -> str:\n        if not context:\n            context = XPathContext()\n        if not context.item:\n            raise xpath_error('XPDY0002', '", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "\n    public void setTitle(String title) {\n        if (mRoom.getState() == Room.STATE_ROOM_JOINED) {\n            mRoom.setTitle(title);\n        } else {\n            mRoom.setTitle(title);\n       ", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\t@Override\n\tpublic Pipeline generate(Pipeline pipeline) throws Exception {\n\t\t\n\t\t// PreProcessing\n\t\t\n\t\t// PreProcessing\n\t\t\n\t\t// PreProcessing\n\t\t\n\t\t// PreProcessing\n\t\t\n\t", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "   def OnGenerationEtatPlaces(self, _):\n        site = self.GetSelectedSite()\n        annee = self.releves_choice.GetClientData(self.releves_choice.GetSelection())\n        DocumentDialog(self, EtatPlaces", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "\n    def compute_angular_momentum_hessian(self, p):\n        \"\"\"\n        Returns the Hessian tensor :math:`H(q)` such that the rate of change of\n        the angular momentum with respect to point `P` is\n\n        .. math::\n", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "   }\n\n    protected void displayQueuedProject(final QueuedProject queuedProject) {\n        if (queuedProject != null) {\n            name.setText(queuedProject.getProjectName());\n            author.setText(queuedProject.getAuthor());\n            gauge_description", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               \"// TODO: Add a command to set the currency for a player\n                // TODO: Add a command to set the currency for a player\n                // TODO: Add a command to set the currency for a player\n                // TODO: Add a command to set the currency for a player\n                // TODO", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "\n    return {'prior': prior}\n\n\ndef calculate_zpf_driving_forces(zpf_data, parameters, approximate_equilibrium, short_circuit=False):\n    \"\"\"\n    Calculate the driving forces for the ZPF\n\n    Parameters", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "\n    return Const.fromValue(arg)\n    elif op == LOAD_GLOBAL:\n    return Ref.fromName(arg)\n    elif op == LOAD_ATTR:\n    return Ref.fromName(arg)\n    elif op == LOAD_FAST:", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\n\t\tif (x > 0) {\n\t\t\treturn;\n\n\t\tif (x < 0) {\n\t\t\treturn;\n\n\t\tif (x == 0) {\n\t\t\treturn;\n\n\t\tif (x == 1)", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "       // Line 1:\n        // Line 2:\n        // Line 3:\n        // Line 4:\n        // Line 5:\n        // Line 6:\n        // Line 7:\n        // Line 8:\n        // Line 9:\n       ", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> findAll() {\n\t\treturn authorRepository.findAll();\n\n\t}\n\n\t@Transactional(readOnly = true)Next line of code:\n\tpublic List<AuthorWithBooks> findAllByName(String name) {\n", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\n\tpublic SQLBatch(Class<T> rootClass, ISchema schema) {\n\t\tsuper();\n\t\tthis.schema = schema;\n\t}\n\n\tpublic SQLBatch(SQLQuery rootQuery) {\n\t\tsuper();\n\t\tthis.rootQuery = rootQuery;", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "   if app_info['is_activity']:\n        # 开始动态分析\n        adb = getADB(DYNAMIC_TOOL_DIR)\n        init_environment(adb)\n        set_web_proxy(app_info['", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "\n    // 1. The user clicks on the \"Add to Cart\" button.\n    // 2. The user is redirected to the \"Cart\" page.\n    // 3. The user clicks on the \"Checkout\" button.\n    // 4. The user is redirected", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "\n    def test_record_with_args():\n        inc_type = Func[[IntType], IntType]\n        bar_type = Record[{'baz': IntType}]\n        check_expr_type(\n            \"\"\"\n            inc bar.baz\n            \"\"\",\n            Tu", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "\n        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, batchPrepared());\n        assertThat(pe,", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        case 500:\n                            return new APIIncorrectException(cause);\n                    }\n                }\n                return null;\n            }\n        };\n        _config = config;\n    }\n\n   ", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\n\t\t// 1. Create a new array of size 100\n\t\tint[] array = new int[100];\n\n\t\t// 2. Initialize each element in the array to 0\n\t\tfor (int i = 0; i < array.length", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) {\n\t\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^new/(?P<package_name>[\\w\\-\\+]+)$', AddCIPipeline.as_view(),\n        name=\"add-ci-pipeline-package\"),\n    url(r'^new/(?P<package_name>[\\w\\", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "   }\n\n    @Override\n    public void onLongClick(View view) {\n        int id = view.getId();\n        int position = getAdapterPosition();\n        if (id == R.id.card) {\n            if (sIsClickable) {\n                s", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "\n    account = account_for_vimeo_id(access_token.user_id, person=person)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "\n                # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                #   and the vignetting and extinction loss for the mean location\n                #   (if the mean location is outside the image, the correction is not applied)\n                #   (if the", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid = gen_grid(data, options)\n    # Generate grid of values for parameters (force to be equal length)\n    # Generate grid of values for parameters (force to be equal length)\n    # Generate grid of values for parameters (force to be equal length)\n   ", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n          }\n        }\n      });\n    rollBtn.addAction(Actions.forever(Actions.sequence(Actions.alpha(0.7f, 0.4f), Actions.alpha(1, 0.5f))));", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "\n    self.assertEqual(etree_iter_paths(root, '//*'),\n                     [('a', '//*'), ('b1', '//*'), ('b2', '//*'), ('b3', '//*'), ('c1', '//*'), ('", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "\n    def test_detect_soft404(self):\n        self.rule.set_engine(self.runner)\n        self.rule.set_kb(self.runner.kb)\n        self.rule.set_child_heuristics(self.runner.child", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   \"\"\"\n    This is a comment.\n    \"\"\"\n\n    # This is a comment.\n    \"\"\"\n    This is a comment.\n    \"\"\"\n\n    # This is a comment.\n    \"\"\"\n    This is a comment.\n    \"\"\"\n\n    # This is a comment", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "\n    // 1. The user is logged in.\n    // 2. The user has a valid session.\n    // 3. The user has a valid token.\n    // 4. The user has a valid refresh token.\n    // 5. The user has a valid access", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse resp = this.client.send(req);\n            \n            // 5. Get the ASiC response\n            final ASiCWithCAdESService.ASiCWithCAdESResponse asiCResponse = this.service.getASiCWithCAd", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"proformer\")\n\t\telif type(obj) is Transformer:\n", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\t\tif (this.is_a_string_array(this.roster)) {\n\t\t\tthis.roster = new ArrayList<String>(this.roster);\n\t\t}\n\t\telse {\n\t\t\tthis.roster = new ArrayList<String>();\n\t", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "\n    }\n\n    private void sendFeedback() {\n        PackageInfo packageInfo = AndroidCurrentAppInfo.Companion.getPackageInfo();\n        AppData appConfig = AppliveryDataManager.INSTANCE.getAppData();\n        if (appConfig != null) {\n           ", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "   for obj in objs:\n        table_name = get_table_name(obj.__class__)\n        key = dump_key(self, obj)\n        table_index[table_name] = table_index.get(table_name, []) + [key]\n", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "   print(f\"{fingerprint} - {description} - {created_at}\")\n\n\n    def print_key_list_with_art(self, key_list, with_art=False):\n        for key in key_list:\n            fingerprint = key['f", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "\n    admin.site.register(SectorType, SectorTypeAdmin)\n    admin.site.register(Sector, SectorAdmin)\n    admin.site.register(Target, TargetAdmin)\n    admin.site.register(Indicator, IndicatorAdmin)\n    admin.site", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "   return RespostaExtrairLogs.analisar(retorno)\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "\n    self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://www.w3.org/XML/1998/namespace')\n    document = ElementTree.parse(io.StringIO(xml_test))\n    self.assert", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   for (int i = 0; i < sorted.length; i++) {\n                        sorted[i].setStartDate(sorted[i].getStartDate());\n                    }\n                    break;\n                case START_DATE_DESC:Next line of code:\n", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "           self.logger.error(f\"Error during initialization: {e}\")\n            self.logger.info(f\"Initialization complete for {self.identifier} in {time.time() - begin}\")\n            self.training_complete = True\n            return\n        self.training_complete =", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   if (x > 0) {\n        return x;\n    } else {\n        return 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n\n    }\n\n    public SpringDirectorClient(RestTemplate restTemplate, Info info, Releases releases, Stemcells stemcells, Deployments deployments) {\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void broadcastState()\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.NOT_CONNECTED)\n            {\n                throw new IllegalStateException(\"Fitting device address cannot be reconfig", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@in", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        if (this.isEnabled()) {\n            if (this.isHovered()) {\n                this.drawModalCorners(", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), Next line of", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            PlayerFreezeModule.class,\n            SpectatorModule.class,\n            KitsModule.class,\n            ScoreboardModule.class,\n            FriendlyFireModule.class,\n            BroadcastsModule.class,\n            DeathMessageModule.", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "   public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize download the number of concurrent.\n     * @return {@link DownloadQueue}.\n    ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void init(MutableConfig config) {\n    // TODO: implement\n\n  @Override\n  public void configure(MutableConfig config) {\n    // TODO: implement\n\n  @Override\n  public void watch(Config config, WatcherRegistry registry) {\n    // TODO: implement", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "   private Set<String> parseQuerySetConfigTag(Element element) {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null\");\n        NodeList querySetConfigNodes = element.getChildNodes();\n        if (querySetConfigNodes != null &&", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n    def CheckIt(self,S, x):\n        # print('S: ',S)\n        # print('x: ',x)\n        # print('----> ',x)\n        # print('----> ',S)\n        # print('----> ',S['sid", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = MinCAMTask(self.robot, self.robot.left_foot,\n                swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   BvNot, BvNeg, BvExtract, BvZeroExtend, BvRepeat, BvIte\n\n\ndef test_simple_op():\n    for op in simple_op:\n        for i in integers(MIN_SIZE, MAX_SIZE):", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "   }\n\n    /**\n     * Liefert die Sammellastschrift, die die angegebenen Prenotifications enthält.\n     * \n     * @param prenotIds\n     *            Prenotification-IDs\n     * @return Sammellastschrift", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "   from montreal_forced_aligner.alignment.pretrained import GeneratePronunciationsArguments\n\n\ndef generate_pronunciations_arguments(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: D", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "\n    }\n\n    private EntityPlayer getPlayer(ICommandSender sender, String name) {\n        if (name.equalsIgnoreCase(\"\")) {\n            return null;\n        }\n\n        EntityPlayer player = null;\n        for (EntityPlayerMP entityPlayerMP : FMLCommon", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private static final DateTimeFormatter USER_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\n\n    private final UserDAO userDAO;\n    private final BudgetDAO budgetDAO;\n    private final CategoryDAO categoryDAO;\n    private final", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger();\n\n\tprivate static final String LEVEL_DEBUG = \"DEBUG\";\n\tprivate static final String LEVEL_INFO = \"INFO\";\n\tprivate static final String LEVEL_WARN = \"WARN\";\n\tprivate", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"Search problem:\")\n        smart_print(problem)\n\n    if check:\n        try:\n            problem.check_empir", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "\n    def test_hosts_container(self):\n        hc = HostsContainer.from_definition({ 'h1': H, 'h2': H, 'h3': H, 'h4': H })\n        self.assertEqual(hc.get_hosts(), { '", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "   return [\n        command\n        for command in self.__tc_obj.tc_command_output.splitlines()\n        if command.strip() != \" \"\n    ]\n\n    def __get_device_qdisc_major_id(self):\n        if self.__is", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return a List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "\n    private MonthCalendarHelper monthCalendarHelper;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarPrepareCallback calendarPrepareCallback;\n\n    private OnDayChangeListener onDayChangeListener;\n\n    private OnMonthChangeListener onMonth", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "\n    # This is the next line of code:\n    #\n    #     my_stream = func()\n    #     assert isinstance(my_stream, Stream)\n    #     assert my_stream.take(25) == [data] * 25\n    #\n", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "   except TypeError:\n        raise TypeError('Type mismatch: {} != {}'.format(t1, t2))\n\n\ndef unify_types(t1, t2):\n    \"\"\"Unify `t1` to match `t2`\n\n    After unification `t1`", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       self.auth = Auth()\n        self.auth.startup()\n        self.auth.startup()\n        self.auth.startup()\n        self.auth.startup()\n        self.auth.startup()\n        self.auth.startup()\n        self", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\tif isinstance(model_item.data, Edge):\n\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\tif isinstance(model_item.data, KeyPoint):\n\t\t\tdefault_flags = default_flags | Qt.ItemIs", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "\n    except Exception as ex:\n      self._varz.serialization_failures()\n\n\n    except Exception as ex:\n      self._varz.serialization_failures()\n\n    except Exception as ex:\n      self._varz.serialization_failures()\n", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(exitValue, equalTo(0));\n        assertThat(out.toString(), equalTo(\"\"));\n        assertThat(err.toString(), equalTo(\"\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaFile() throws Exception {\n        Test", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "\n    }\n\n    @Test\n    void testCheckUpdate() throws Exception {\n        try (SimpleDataStore<PLDTestData, ?> dataStore = new SimpleDataStoreImpl<>(this.testDir + \"/cache.db\", \"test\", PLDTestData.class)) {\n", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder().build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(getRoxanaProperties(), getTranslator());\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerFor", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._SendMessage(self._ping_msg, self._ping_ar)\n\n  def _SendMessage(self, msg, ar):\n    \"\"\"Sends a message to the remote server.\"\"\"\n    self._log.debug('Sending message.')\n    self._socket.", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "\n    assert freq2lag(v) == lag2freq(v)\n\n\nclass TestAlmost_Eq(object):\n  @p(\"data\", [0, 1, 2, 3, 4, 5, 6, 7, 8,", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "\n    }\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        System.out.println(\"Hello World!\");\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "\n    @commands.command(name=\"ping\")\n    async def _ping(self, ctx):\n        \"\"\"\n        Ping the bot.\n        \"\"\"\n        await ctx.send(\"Pong!\")\n\n    @commands.command(name=\"help\")\n    async def _help", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if operands[0] is None:\n        return operands[1]\n    elif operands[1] is None:\n        return operands[0]\n    else:\n        return operands[0] == operands[1]\n\n\n@method('eq')\n", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(getResources().getString(R.string.welcome_string));\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(MENU_ID_IMAGE1));", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           Toast.makeText(getActivity(), R.string.chat_created, Toast.LENGTH_LONG).show();\n            Toast.makeText(getActivity(), R.string.chat_created, Toast.LENGTH_LONG).show();\n            Toast.makeText(getActivity(), R.string.", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       MchPayRequest mchPayRequest = new MchPayRequest(request);\n        MchPayResponse mchPayResponse = wxPayClient.mchPay(mchPayRequest);\n        Assert.assertEquals(mchPayResponse.getResultCode(), \"SUCCESS\");\n       ", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "\n    assertEquals(MessageSeverity.ERROR, creator.create(KEY, RANDOM_STRING_PARAMETER_VALUE_01));\n\nExpected output:\n\n    assertEquals(MessageSeverity.ERROR, creator.create(KEY, RANDOM_", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def __repr__(self):\n    def __repr__(self):\n    def __repr__(self):\n    def __repr__(self):\n    def __repr__(self):\n    def __repr__(self):\n    def __repr__(self):\n", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "   return self.__parser.parse(ping_lines)\n\n    def parse_stats(self, ping_message: Union[str, PingResult]) -> PingStats:\n        \"\"\"\n        Parse ping statistics.\n\n        Args:\n            ping_message (str or :py", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "           m.videoSetFrameRate.setText(Integer.toString(Main.DEFAULT_VIDEO_FRAME_RATE));\r\n        }\r\n\r\n        // set width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 0)// set minimum", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "   self._probe = probe\n        # Load the probe from disk.\n        self._probe = _load_probe(self._tempdir, probe)\n        # Load the probe from a file.\n        self._probe = _load_probe(self", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<Channel> connect(final TransportContext context, final ChannelHandler handler, final boolean reconnect) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n        if (handler == null)", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "   self._cdg = ControlDependence(self)\n    return self._cdg\n\n  @property\n  def cfg(self):\n    \"\"\"\n      Returns the CFG.\n    \"\"\"\n    return self._cfg\n\n  @property\n  def cfg_nodes", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n\n    }\n\n    @Override\n    public void", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "\n    result.append(\" \").append(BETWEEN).append(\" \");\n\nError message:\n\n    result.append(\" \").append(BETWEEN).append(\" \");\n\n    result.append(\" \").append(BETWEEN).append(\" \");\n\n   ", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile baseFile = new File(basePath);\n\t\t\tFile baseFile2 = new File(basePath + \"/2\");\n\t\t\tFile baseFile3 = new File(basePath + \"/3\");\n\t\t\tFile baseFile4 = new File(basePath +", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n    }\n\n    @Test\n    public void testCustomClass2() {\n\n        State state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(final FixTag tag, final CharSequence value) {\n\t\tif (value == null) {\n\t\t\tthrow new InvalidValueException(tag, \"String value is null\");\n\t\t}\n\t\tif (value.length() > tag.getMaxLength", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   self.assertEqual(\"Harvey\", replace_blank_name(name=\"Harvey\", language=\"Hindi\"))\n    self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e\", replace_blank_name(", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "\n    // This is the next line of code in the file.\n\n    // The line above is the first line of code in the file.\n\n    // The line above is the first line of code in the file.\n\n    // The line above is the first line of code in the file", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "   # check if the string is long enough for the mapped bits\n        if rem > 0:\n            self.append(string[:rem])\n            self.append(string[rem:])\n        # check if the string is long enough for the mapped bits\n        if rem > 0:", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "\n    # noinspection PyProtectedMember\n    model.Meta.table_name = self._compute_table_name(model)\n\n    # noinspection PyProtectedMember\n    model.Meta.hash_key = self._compute_hash_key(model)\n", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "   \"\"\"\n    # TODO: implementar o código de envio de logs\n    \"\"\"\n    return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   with pytest.raises(TypeError):\n        engine.bind(User, model=User)\n\n\ndef test_bind_non_abstract(engine):\n    \"\"\"Can't bind non-abstract models\"\"\"\n    with pytest.raises(ValueError):\n       ", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"Msun/pc**3\")\n    assert u7.dimensions == mass\n    assert u7.base", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\n    ['Verify instance command references --no, returns paths',\n     ['references', 'TST_Person.name=\"Mike\"', '--no'],\n     {'stdout': ['\"root/cimv2:TST_FamilyCollection.name=\\\\\"Family2\\\\\"", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "   return self.system_object.get_tag(self, index, name)\n\n    def get_tag_type(self, index, name=None):\n        \"\"\"Retrieve a metadata tag type.\n\n        :param int index: Index into the tag list as restricted by name", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   if (accountUpdateReceiver == null) {\n                        accountUpdateReceiver = new AccountUpdateReceiver();\n                    }\n\n                    @Override\n                    public void startNewAccountActivity() {\n                        startActivity(new Intent(MainActivity.this, SettingsActivity.class));\n                ", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "   resource = ThermometerResource(aircraft.instruments.thermometer)\n\n    thermometer_data = resource.get()\n\n    self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   ref, action = reference_tracker._value_ref(column, value)\n\n    assert ref == \":v0\"\n    assert action == actions.set({\"N\": \"3\"})\n    assert reference_tracker.attr_values == {\":v0\": expected_action", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           if (e.getCause() instanceof MalformedURLException) {\r\n                Alert alert = new Alert(AlertType.ERROR, \"Invalid URL. Please check the URL and try again.\", ButtonType.OK);\r\n                alert.showAndWait();\r\n                Platform.runLater(new R", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "\n    return render(request, self.template_name, {'post' : post, 'nodes' : nodes})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending gifs based on a query tag\n     *\n     * @param serviceIds a {@link Map} of a collection of", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::error);\n        }\n    };\n\n    @NonNull\n    private final WifiStateReceiver mWifiStateReceiver = new WifiStateReceiver() {\n        @Override\n        public void onReceive(Context context", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 6 || type == 0) {\r\n            LinearAccelerationSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    for (Card card : stack.getCardList()) {\n        card.addListener(this);\n    }\n\n    Next line of code:\n\n    for (Card card : stack.getArchivedCards()) {\n        card.addListener(this);\n    }\n", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "   def __init__(self, args: Namespace):\n        self.vad_path = args.vad_path\n        self.segmentation_options = args.segmentation_options\n\n    def run(self):\n        \"\"\"Run the function\"\"\"\n\n        speaker = Spe", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n\n    }\n\n    public SpringDirectorClient(RestTemplate restTemplate, Info info, Releases releases, Stemcells stemcells) {\n        this.restTemplate = restTemplate", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "   return self.system_object.play_sound(self, channel_group, paused)\n\n    def get_tag_type(self, index, name=None):\n        \"\"\"Retrieve a tag type.\n\n        :param int index: Index into the tag list as restricted by", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "   def process_section(self, bufr_message, bit_writer, section):\n        \"\"\"\n        Process a section of the message.\n\n        :param bufr_message: The BufrMessage object to process\n        :param bit_writer: The BitWriter object to write the", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "\n    abuse_report = AbuseReport.objects.create(\n        logged_against=logged_against,\n        logged_by=logged_by,\n        comments=request.POST['comments'],\n        moderator=logged_by,\n        moder", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   @Override\n    public void listenToResultSet(final BenchmarkMethod meth, final AbstractMeter meter, final double data) {\n        if (meth.getMethodToBench().getAnnotation(Bench.class) != null) {\n            final Bench benchAnno", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "\n        // parsing the arguments\n        ProtTestArgumentParser parser = new ProtTestArgumentParser(args, new ApplicationOptions());\n        parser.parse();\n\n        // initializing the application options\n        ApplicationOptions options = parser.getOptions();\n\n        // initializing the application options\n", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/record.mp3\"), true);\n\t\tNext line of code:\n\t\ttropo.record(URL(\"http://www.example.com/record.mp3\"), true, true);\n\t\t", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.FINALIZADA) {\n            //Cadastra a resposta\n            dao.salva(resposta);\n            //Atualiza", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code,DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(MainActivity.this);\n\t\t\t\t\tadapter.m", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Mock\n    MediaModel adMediaModel;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tstage.close();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while initializing the stage\", e);\n\t\t}\n\t\t\n\t\t// initialize the client\n\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "\n    if (this.is_a_string_literal) {\n      this.is_a_string_literal = false;\n      return;\n    }\n\n    if (this.is_a_number_literal) {\n      this.is_a_number", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n  assert isinstance(args.gps_sv[0].getL1", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if is_document_node(elem):\n        return f'/document-node({item})[{context.position}]'\n    elif isinstance(item, TypedElement):\n        return f'/typed-element({item})[{context.position}]'\n    elif isinstance", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   return t\n\n    def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def dropnan(self):\n        \"\"\"\n        Drop the NAN values from the table\n", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "\n                TypingMessage m = (TypingMessage)message;\n\n                addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, m));\n\n                _isTyping = false;\n            }\n            else if (message.getType() == MessageType", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tEXOG.append(dmy_covariates)\n\n\t\tEXOG_A = np.column_stack((EXOG_A, dmy_covariates))\n\n\t\tif opts.surfaceinputfolder:\n\t\t\tsave_tempor", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "\n    public static void main(String[] args) {\n        // TODO: Add your code here\n        System.out.println(\"Hello World!\");\n    }\n\n    public static void main(String[] args) {\n        // TODO: Add your code here\n        System.out.println", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               LunarCalendar tmpDate = new LunarCalendar();\n                tmpDate.setTimeInMillis(mTimeText.getTime());\n                tmpDate.updateLunarFields();\n                mRecord.setRecordTime(tmpDate);\n                break;\n\n            case R", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   //  var a = 1;\n    //  var b = 2;\n    //  var c = 3;\n    //  var d = 4;\n    //  var e = 5;\n    //  var f = 6;\n    //  var", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "\n        self.listener.launch_collector()\n        self.listener.run()\n\n        self.cleaner.run()\n\n        self.reporter.run()\n\n        self.listener.cleanup()\n        self.cleaner.cleanup()\n        self.re", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "   return self.api._get_resource(SchedulerRestfulModelCollection, \"\")\n\n    @property\n    def outboxes(self):\n        return RestfulModelCollection(Outbox, self)\n\n    @property\n    def neural(self):\n        return Neural(self", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       skyView.getContext());\n    activityLightLevelChanger.setNightMode(nightMode);\n    activityLightLevelChanger.setAutoMode(true);\n    activityLightLevelChanger.setModel(model);\n    activityLightLevelChanger.setNightMode(night", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "   return lnprior + lnlike + lnprior_multivariate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('IMSI', Pt=IMSI(), Len=8),\r\n            Str('Identity', Pt=Identity(), Len=8),\r\n            Str('Classmark', Pt=1, Len=1),\r\n            Str('Cause', Pt=Reject", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc_qdisc_rule(self, device):\n        self.__q", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "   return Column(operator.eq(left.values, right), left.index)\n\n\ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        return Column(operator.ne(left.values, right), left.index)\n\n   ", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   @validation_error(SwaggerMappingError)\n    def decorator(f):\n        @functools.wraps(f)\n        def _validate(*args, **kwargs):\n            try:\n                return f(*args, **kwargs)\n            except (\n                js", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
