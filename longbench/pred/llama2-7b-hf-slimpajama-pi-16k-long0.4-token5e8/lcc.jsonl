{"pred": "\t\t\t\tfor ( int j = 0; j < m_Participants[i].Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = (DuelPlayer)m_Participants[i].Players[j", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tgraph = self.graph.copy()\n\t\t\tA = best(root)  \n\t\t\troots = self.find_roots(A", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "\n#! /usr/bin/env python\n# Last Change: Sun Dec 14 07:00 PM 2008 J\n\"\"\"Test for the sndfile class.\"\"\"\nfrom os.path import join, dirname\nimport os\nimport sys\nfrom numpy", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n#!/usr/bin/env python\nfrom apps.webdriver_testing.pages.site_pages import UnisubsPage\nfrom urlparse import urlsplit\nclass VideoPage(UnisubsPage):\n    \"\"\"\n     Video Page contains the common elements in the video page.\n    \"\"\"\n   ", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue style = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", style.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", style.getValue());\n\t\t\t}\n\t\t\tpublic Object unmar", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "\n/**************************************\n*Script Name: Staff Runebook          *\n*Author: Joeku                        *\n*For use with RunUO 2.0 RC2           *\n*Client Tested with: 6.0.9.2          *\n*Version: ", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "   s.println(\"***\");\n\nError:\njava.lang.NullPointerException\n    at sun.security.ssl.CertificateMsg.print(CertificateMsg.java:102)\n    at sun.security.ssl.HandshakeMessage.print(HandshakeMessage", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "\n    public synchronized static JESpace getSpace (String name, String path)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\n    if (item.quantity() == 1) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation; either", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "   self.webview.execute_javascript(\"setRepeated('%s')\" % status_id)\n    self.webview.execute_javascript(\"setRepeated('%s')\" % status_id)\n    self.webview.execute_javascript(\"setRepeated", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n    def action_copy_from_sftp_to_ftp(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker copy_from_sftp_to_ftp %s %s\", pprint", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\n#if NET_2_0\n\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n#else\n\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (new ZoneIdentityPermission (PermissionState.None));\n#endif\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   return CompositeX509KeyManager(key_managers), CompositeX509TrustManager(trust_managers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Finds the forward to the domain admin page.\n     *\n     * @param mapping The action mapping with possible destinations.\n    ", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   self.__datastream_transport = await self.__encoder.get_writer()\n    self.__datastream_protocol = DataStreamProtocol(\n        stream=self.__datastream_transport,\n        event_loop=self.__event_loop)\n    self.__datastream", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\n\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\tif (option1) {\n\t\t\t\t\t//change in database\n\t\t\t\t\tstore.SetValue (iter, columnBool1, false);\n", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "\n        String[] argValues =\n            getArgValues(application, request, defaultMessages, locale, args);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\n\t\t\t\tpersons = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\n\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\t\t\t\tif (Caster.CanBeBeneficial(p, false))\n\t\t\t\t{\n\t\t\t\t\tCaster.DoBeneficial(p);\n\t\t\t\t\tSpells.Second.ProtectionSpell.Toggle(Caster, p", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "   self._autoflush()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\n    if (node instanceof Node.Block) {\n        final Node.Block block = (Node.Block) node;\n        final List<Node> children = block.getChildren();\n        for (int i = 0; i < children.size(); i++) {\n            final Node child", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   return method(self, *args, **kwargs)\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            if self.request.method", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t\tUpdateViewVisibility ();\n\t\t}\n\t\t\n\t\tprotected internal override void RenderContents (HtmlTextWriter writer)\n\t\t{\n\t\t\tbase.RenderContents (writer);\n\t\t\tUpdateViewVisibility ();\n\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   ## This is for the city of Munich-DE\n    ## TODO: replace this with geocoding\n    self.latmin = 47.95\n    self.latmax = 48.43\n    self.lonmin = 11.00\n   ", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   builds.extend(android_builds(build, platforms))\n    if build == 'aurora':\n        builds.extend(mobile_details.aurora_builds(build))\n    # Build the button\n    button_html = jingo.render('firefox_download_button", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\n    if (objectID != null) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "\n    public override IEnumerable<CSharpSyntaxNode> VisitFunction( Function node ) {\n        return Convert( node, ContextService ).ToEnumerable();\n    }\n\n    public override IEnumerable<CSharpSyntaxNode> VisitBlockStatement( BlockStatement node ) {\n        return Get", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "   split_test = self._update_partition_id(0)\n    # Change to second group configuration.\n    split_test = self._update_partition_id(1)\n    # Verify that the user_partition_id is now set to the second group configuration.\n    split", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "\n            if (vertical) {\n                tmp.Add(GetCIDFontType2(piref, subset, metrics));\n            }\n            else {\n                tmp.Add(GetFontBaseType(piref, subset, GetToUnicode(metrics)));\n            }\n", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.depth++;\n\t\t\t\t\t\tif (cgn.depth > maxDepth) maxDepth = cgn.depth;\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\n    return loadPage();\n\nExplanation:\n\nThe code is trying to load a bitmap from a specific page in the emoji provider. The page is loaded using a ListenableFutureTask, which is a type of asynchronous task that allows for the completion of a task to be tracked and", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "\n# -*- coding: utf-8 -*-\n# added new list_tbl definition\nfrom functools import partial\nimport random\nimport itertools\nfrom navmazing import NavigateToAttribute, NavigateToSibling\nfrom widgetastic.widget import View\nfrom", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\n\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "\n    public enum NoPermissionVisibility\n    {\n        Invisible,\n        Visible\n    }\n\n    [ToolboxData(\"<{0}:ToolbarButton runat=server></{0}:ToolbarButton>\")]\n    [Themeable(true)]\n    public class ToolbarButton :", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n    return super.readFromNBT(compound);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "\n    return \"Effect{\" +\n        \"probability=\" + probability +\n        \", scopes=\" + scopes +\n        '}';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "\nimport pytest\nfrom csirtg_indicator import Indicator\nfrom cif.store import Store\nfrom cif.auth import Auth\nfrom elasticsearch_dsl.connections import connections\nimport os\nimport arrow\nfrom cifsdk.exceptions import AuthError\nfrom pprint", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   if sel_dim:\n        widget_dim = widgets.Dropdown(options=valid_dim_names, value=valid_dim_names[0],\n                                      description='Dim:')\n        widget_x = widgets.Dropdown(options=['index'], value='", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "\n            if (rootFolder.IsNullOrWhiteSpace())\n            {\n                throw new ArgumentNullException(\"rootFolder\");\n            }\n            if (rootFolder.IsIgnored())\n            {\n                toScan.Add(path);\n            }\n            else\n            {\n               ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\n\t\treturn read(key, internalMap.computeIfPresent(key, transform(remappingFunction)));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "   if viewtype.lower() == 'listview':\n        objcommentslist = pdt.getDiscussionFor(uid).objectValues()\n        replydict = []\n        jsondata = getjsondata(self.context,replydict,self.context.portal_url(),", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channelUri = String.Format(\"sip:{0}@{1}\", land.LocalID, m_freeSwitchRealm);\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew){\n\t\t\t\tPayPeriods.Insert(PayPeriodCur);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_field(header)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_headings['Time", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_member_create', context, data_dict)\ndef group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    if not user:\n        return {'success':", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint outcome = example.getValue(predictionAttribute);\n\t\t\t\t// assigning outcome to the child node\n\t\t\t\texample.setValue(outcomes[parentIndex], outcome);\n\t\t\t\t// calculating confidences\n\t\t\t\tdouble confidence = Math", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new SearchResults[0];\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"segments\">The array containing", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = string.charAt(offset++);\n            if (codePoint < 0x10000) {\n               codePoint = codePoint << 10 | string.charAt(offset++);\n            }\n            return codePoint >= _range.min() &&", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\n\t\tif (existingRequired) {\n\t\t\t// check if the study form name is valid\n\t\t\tif (StringUtil.isEmpty(studyFormName)) {\n\t\t\t\treturn ValidationResults.REQUIRED_FAIL;\n\t\t\t}\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor (int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((CatsReferralPendingEmergencyNonEDAdmissionListVo)beans[x].buildVo());\n\t\t}\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "\n    if prnum == 'advanced':\n        advanced()\n    elif prnum == 'viewsdb':\n        viewsdb()\n    elif prnum == 'date':\n        date()\n    elif prnum == 'donate':\n        donate()\n    else:\n        x", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        /// <param name=\"seqindex\">sequential index</param>\n        /// <returns>subscript indices</returns", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plot' in pD:\n    return S_ERROR( \"Missing plot!\" )\n  plot = pD[ 'plot", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (bot.IsPaused)\n\t\t\t\treturn;\n\t\t\tvar newProductionBuildings = bot.GetNewProductionBuildings();\n\t\t\tif (newProductionBuildings.Count == 0)\n\t\t\t\treturn;\n\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\n    return plan;\n\nError:\n\njava.lang.NullPointerException\nat org.voltdb.plannodes.PlanNodeList.get(PlanNodeList.java:101)\nat org.voltdb.plannodes.PlanNodeList.get(", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n\t\t\t\t|", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.Handshake = hs;\n\t\t\tif (!SetCommState", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "   self.assertEquals(page.context['cobrand'],\n                      cobrand)\n\nError:\nTraceback (most recent call last):\n  File \"test_user_profile.py\", line 113, in test_user_profile\n    self.assertEquals", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    #print \"keep_tempdir is\", args.keep_tempdir\n    #print \"args is\", args\n    #print \"args.keep_tempdir is\", args.", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tif entry[0] == currentListEntry:\n\t\t\t\t\tcurrentListIndex = newListIndex\n\t\t\t\t\tnewListIndex = newList.index(entry)\n\t\t\t\t\tif newListIndex is not None:\n\t\t\t\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "\n    public override Rectangle BarcodeSize {\n        get {\n            float fontX = 0;\n            float fontY = 0;\n            if (font != null) {\n                if (baseline > 0)\n                    fontY = baseline - font.GetFont", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "\n    return results;\n\nExplanation:\n\nThe `return` statement is used to exit the function and return the value of the expression on the right side of the `=` operator. In this case, the expression is `results`, which is a `String[]` array.\n\nThe `", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "   sample_points = [\n        (\"longitude\", x_points),\n        (\"latitude\", np.arange(-90, 90, 2)),\n    ]\n    sample_points = [\n        (\"longitude\", x_points),\n        (\"latitude\", np", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "\n    }\n\n    public void CopyToClipboard()\n    {\n        if (currPacket == null)\n        {\n            return;\n        }\n        Clipboard.SetText(currPacket.ToText());\n    }\n\n    private void toolStrip", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\nimport cPickle\nimport wave\nimport gzip\nimport scipy\nimport scipy.io.wavfile\nfrom matplotlib import pylab\nimport scipy.io.wavfile\nimport os\nfrom numpy import *\nfrom pydub import AudioSegment\nfrom p", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n    public void Clear()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "\nnamespace Tripodmaps\n{\n    partial class DummySolutionExplorer\n    {\n        /// <summary>\n        /// Required designer variable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n       ", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\ndef createExtensionFunction( functionName, dll, resultType=ctypes.c_int, argTypes=(), doc = None, argNames = (), extension = None, deprecated = False ):\n    \"\"\"Create a base function for given name\n    \n    Normally you can just use the", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n    private void writeFileEmptyStreams(final DataOutput header) throws IOException {\n        header.write(NID.kEmptyStream);\n        final BitSet emptyStreams = new BitSet(files.size());\n        for (int i = 0; i < files.size();", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "\n    }\n\n    [Test]\n    public void should_not_be_removable_and_should_not_allow_move_files_if_max_ratio_reached_and_not_stopped()\n    {\n        GivenGlobalSeedLimits", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    }\n\n}\n\n#region using directives\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n    public static sega_decryptPtr sega_decrypt77 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {\n            /*unsigned*/\n            int i = 0;\n            /*unsigned*/", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "   return self._course_key.make_locator()\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        self._course_key = CourseKey.from_string(self._course_dict['org'], self._course_dict", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   # If the config directory doesn't exist, create it\n    if not os.path.exists(config_directory):\n        try:\n            os.makedirs(config_directory)\n        except:\n            module.fail_json(\"Could not create \" + config_directory)", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 36);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive.add_string(content=\"\\n\".join(self.xml_report.serialize()),\n                                dest='xml.txt')\n        self.archive.add_string(content=\"\\n\".join(self.xml_report.serialize_to_file(", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "\nfrom MaKaC.conference.Session import ISessionFossil\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "\n    } catch (MessageImportInvalidPathException e) {\n        parent.alertError(parent, \"Invalid path: \" + e.getMessage());\n        setVisible(true);\n        return;\n    } catch (Exception e) {\n        parent.alertError(parent, \"Error importing", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\n    public void dispatch(Object options, Object[] args) throws Exception {\n        dispatch(options, args, null);\n    }\n\n    public void dispatch(Object options, Object[] args, Map<String, Object> results) throws Exception {\n        dispatch(options, args, results,", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "\n    if (currentSession != null && currentSession.isOpened()) {\n        user = currentSession.getActiveUser();\n        userProfilePic = user.getPicture();\n        userProfilePicID = user.getId();\n        connectedStateLabel.setText(user.getName", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\n```python\nfor i in range(len(emotions)):\n    sum += emotions[i].strength\n```\n\nExplanation:\n\n1. The `range(len(emotions))` function generates a list of integers from 0 to the length of the `em", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "\n    def test_to_xml(self):\n        \"\"\"Test exporting as XML.\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test xml\n        self.assertEqual", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Lat = phi1 + LongOrigin;\n    Long = x;\n#=================================================================\n# Local Time to UTC\n#=================================================================\ndef LocalTimeToUTC(LocalTime):\n    \"\"\"\n    converts local time to UTC\n    Written by Chuck G", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "   form = ReportUserForm(request.POST)\n    if form.is_valid():\n        form.save()\n        messages.success(request, \"Report submitted successfully!\")\n        return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n    else:\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    def page_title(self):\n        return 'Add series'\n    @property\n    def page_description(self):\n        return 'Add a new series to this project'\n    @property\n    def next_url(self):\n        return canonical_url(", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\tform.RightToLeftLayout = false;\n\t\t}\n\t\tpublic void ApplyTo(Form form, string strTypeName)\n\t\t{\n\t\t\tif(form == null) throw", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "\n    return arr;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   return [re.compile(regex) for regex in positional_tags]\n    return new_positional_tags_list\n    return [re.compile(regex) for regex in positional_tags]\n    return [re.compile(regex) for regex in positional_tags]", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            }\n\n            public override Type MakeGenericType (params Type[] typeArguments)\n            {\n                throw new NotImplementedException ();\n            }\n\n            public override object[] GetCustomAttributes (bool inherit)\n            {\n                return new object[0];\n            }\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# This file is part of Scapy\n# See http://www.secdev.org/projects/scapy for more information\n# Copyright (C) Andreas Korb <andreas.d.korb@gmail.com>\n# Copyright (C) Nils Weiss <n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.set_alias('session', collection)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\n            }\n            else\n            {\n                index = this.AddCraft(typeof(EnchantedSwitch), 1044294, 1072893, 45.0, 95.0, typeof(BlankScroll), 1", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    self.app.do_teardown_request(exc)\n    _request_ctx_stack.pop()\n    if self.preserved:\n        self._preserved_exc = exc\n        self.app.do_teardown_request(exc)", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "\n    return result;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   # Compute angles\n    phi = np.arctan(dx / (src_radius + det_radius))\n    theta = phi * 2\n    # Compute lower and upper bound\n    source_to_line_distance = src_radius + src_radius * np", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   return self.getURL(url, post_data=post_data, params=params, timeout=timeout, json=json)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn type.ToString (fmt) + \" \" + unit.ToString (fmt);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, IFormatProvider fmt)\n\t\t{\n\t\t\treturn new FontUnit (s, fmt);\n\t\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\n\t\t\tvar obj2 = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(obj2.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(obj2.Properties[0].Value.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++) {\n    edges.add(T2.create(w, h));\n    edges.add(T2.create(w, h + height - 1));\n    edges.add(T2.create(w + width", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   ds.config[\"imaging\"][\"pixel size\"] = .34\n\n    ds.config[\"setup\"][\"flow rate\"] = 0.16\n    ds.config[\"setup\"][\"channel width\"] = 30\n    ds.config[\"setup\"][\"temperature\"]", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\n\t\t\treturn performDownload() && performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t * \n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\n\t\t\tOpenGL.glDeleteVertexArrays(1, out vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuffers(1, out vao);\n\t\t\tOpenGL.CheckGLError();\n\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   return self._project_cov_mat(\n        self.x_data_cov_mat, self.y_data_cov_mat, self.x_model, self.parameter_values)\n        return self._project_cov_mat(\n            self.x_data_cov", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "\n    return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "\n    osgObject.setOwnerCanonicalId(owningAccount.getCanonicalId());\n\nError message:\n\njava.lang.NullPointerException\n    at com.eucalyptus.objectstorage.entities.upgrade.ObjectStorage400Upgrade", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "   assertEquals(isImportAsNewEntity, command.validateNameSize(name));\n\nExpected result:\n    assertEquals(isImportAsNewEntity, command.validateNameSize(name));\n\nActual result:\n    assertEquals(isImportAsNewEntity, command.validateName", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "   self.logger.debug('Post Process Script Initialized')\n    self.logger.debug('Post Process Script Initialized')\n    self.logger.debug('Post Process Script Initialized')\n    self.logger.debug('Post Process Script Initialized')\n    self.logger.debug('Post", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   return (Builder) new Builder().MergeFrom(prototype);\n\n    public override Builder MergeFrom(pb::IMessage other) {\n      if (other is SendInvitationRequest) {\n        return MergeFrom((SendInvitationRequest) other);\n      } else {", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "\n    public void getQuad(int i, Vector3f[] vertices) {\n        if (i < getQuadCount() && i >= 0) {\n            for (int x = 0; x < 4; x++) {\n                if (vertices[x] ==", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "   result.addAll(CmsStringUtil.splitAsList(showDateData, ';'));\n        return result;\n    }\n    /**\n     * Returns the page type.<p>\n     * \n     * @return the page type\n     */\n    public String getPageType", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "   }\n    //--------------------------------------------------------------------------------\n    protected override void OnClick(EventArgs e)\n    {\n      base.OnClick(e);\n      m_State = eButtonState.Normal;\n      Invalidate();\n    }\n    //--------------------------------------------------------------------------------\n    protected", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "\n            }\n            if (lastUser.Length > 0)\n            {\n                Users.Add(lastUser);\n            }\n            if (Users.Count > 0)\n            {\n                foreach (string user in Users)\n                {\n                    SendEmailForUser(", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "\n    }\n\n    public partial class TFrmConferenceMasterSettings : System.Windows.Forms.Form\n    {\n        /// PartnerKey for selected conference to be set from outside\n        public static Int64 FPartnerKey {\n            private get; set;\n        }\n", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "\n    }\n\n    public static void p5_io_file_load (ApplicationContext context, ActiveEventArgs e)\n    {\n        ObjectIterator.Iterate (\n            context,\n            e.Args,\n            true,\n            \"read-file\",\n            delegate (string filename", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n#\n# Copyright (C) 2019  Red Hat, Inc.\n#\n# This copyrighted material is made available to anyone wishing to use,\n# modify, copy, or redistribute it subject to the terms and conditions of\n# the GNU General Public License", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn Enabled && CopyCustom;\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n    public void setReportStackTrace(boolean reportStackTrace) {\n        this.reportStackTrace = reportStackTrace;\n    }\n    public void setUseLongBugCodes(boolean useLongBugCodes) {\n        this.useLongBugCodes = useLongBugCodes", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\n\tpublic class CookedBird : Food\n\t{\n\t\t[Constructable]\n\t\tpublic CookedBird() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic CookedBird( int amount )", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n            }\n        }\n        private void JungleClear()\n        {\n            if (ManaManager.HasEnoughMana(Menu.GetSlider(\"JungleClearMana\")) && ManaManager.SpellFarm)\n            {\n                var minions = Min", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\n    return self.warnings(region, location)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "\n    self.assertEquals(\n        field_def['rules']['marc'][1]['function'],\n        field_model_def['rules']['marc'][1]['function'])\n\n    tmp = Field_parser.field_definitions('testsuite')\n    Field_parser.", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "\n    public static IList<RegressionExecution> Executions()\n    {\n        var execs = new List<RegressionExecution>();\n        execs.Add(new InfraMultiRangeAndKey(true));\n        execs.Add(new InfraMultiRangeAndKey(false));", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   c = self.copy()\n    return c.__imul__(other)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    def save(self, cr, uid, res_id, value, xpath=None, context=None):\n        \"\"\" Update a view section. The view section may embed fields to write\n        :param str model:\n        :param int res_id:\n        :param str", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "\n    } catch (Exception e) {\n        e.printStackTrace();\n        System.out.println(\"Error: \" + e.getMessage());\n        System.exit(1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/\" + filename,\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlloader = namedQueryReference;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new InvalidOperationException(\"Only one sqlloader can be specified.\");\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\n\t\t\tint memberCount = writer.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tPlayerState pl = m", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "\n    if (checkTargetConditions(invoke, targetMethod)) {\n        InliningUtil.logNotInlined(invoke, inliningDepth(), targetMethod, \"it is a polymorphic method call and at least one invoked method cannot be inlined\");\n        return null;\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "   self.pytest_command = \"py.test --cov={} --cov-report=xml --cov-report=term --cov-report=html --cov-report=missing --cov-report=skip --cov-report=failures --cov-report=skip-covered --cov", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "\n    if (value != null) {\n        effects.replaceAtUsages(access, value);\n        addScalarAlias(access, value);\n        deleted = true;\n    } else {\n        state.addCacheEntry(identifier, value);\n    }\n\nThe code", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "\n    } catch (RemoteException e) {\n        e.printStackTrace();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "\n# -*- coding: utf-8 -*-\n#\n# This file is part of Invenio.\n# Copyright (C) 2014, 2015 CERN.\n#\n# Invenio is free software; you can redistribute", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   return self.module.get('all_users', set())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated\n        messages.\n        **Example**:\n        >>> import polib\n       ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    else:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput'", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\n\t\t\tif(uri.getPath() == null)\n\t\t\t\tthrow new CommentException(l10n(\"noPath\"));\n\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX))\n\t\t\t\tthrow new CommentException(", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "   gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n    msg = yield self.run_fake_single_build(gsp, buildResult, expWarning=False)\n    result = makeReviewResult(msg,\n                                  (", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "\n    public void visit(AnnotatedDeclaredType type, Map<String, AnnotationMirror> r2) {\n        if (type.hasAnnotationRelaxed(I)) {\n            String immutableString =\n                AnnotationUtils.getElementValue(getImmutability", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# <pep8 compliant>\nimport bpy\nfrom bpy.types import Menu, Panel, UIList\nfrom rna_prop_ui import PropertyPanel\nfrom bpy.app.translations import pgettext_iface as iface_\ndef active_node", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_chrBankSize = map16.Mapper16Chr", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\n/*************************************************************************\n *\n *  The Contents of this file are made available subject to the terms of\n *  the BSD license.\n *\n *  Copyright 2000, 2010 Oracle and/or its affiliates.\n * ", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn SizeHeightToFitWithMin (min);\n\t\t}\n\t\tpublic int SizeHeightToFitWithMin (int min)\n\t\t{\n\t\t\tint height = 0;\n\t\t\tint max = 0;\n\t\t\tint min", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "\n\"\"\"\nData models for the announcements app.\n\"\"\"\nfrom django.db import models\nfrom django.conf import settings\nfrom django.core.urlresolvers import reverse\nfrom django.utils import timezone\nfrom django.utils.translation import ugettext_lazy as", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "# lexers.append('php', PhpLexer())\n# Add a custom lexer for PHP code not between <?php ... ?>\nlexers.append('php', PhpLexer(\n    'startinline': '<?php',\n    'endinline': '?>',\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "\n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                 FROM flight_group WHERE groupID=?\n                 ORDER BY sdate, stime ''', (i,))\n    row =", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "\n    conn.table('projects').update({'project_id': project_id}, {'$set': {'last_snapshot': timestamp}})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tMsg(\"I'm not sure what you're talking about.<br/>I'm not sure what you're talking about.<br/>I'm not sure what you're talking about.<br/>I'm not sure what you're talking about.<br/>I'm", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "\n    if (confirmOpen) {\n        Intent confirmDialogIntent = new Intent(context, ConfirmDialog.class);\n        confirmDialogIntent.putExtra(\"uri\", uri);\n        startActivity(confirmDialogIntent);\n    } else {\n        if (!noConnectionError && !connectionError", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "   inputs.extend(self.get_finalized_command('build_ext').get_outputs())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "   return job_cmdline_arg(request, cmd)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\n    public static string Generate()\n    {\n        Builder.Clear();\n        GenerateHeader();\n        GenerateGame();\n        GenerateOverview();\n        GenerateHeroes();\n        GenerateAssemblies();\n        GenerateFeatures();\n        Generate", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    self.download(premium_url, post={\"download\": \"normal\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\tCPos? GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\tvar searchFromLoc = harv.", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "   if restart_dhcp != \"0\":\n        rc = utils.subprocess_call(self.logger, \"dhcpd -t -q\", shell=True)\n        if rc != 0:\n           self.logger.error(\"dhcpd -t failed\")", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "\n    return Event.newBuilder();\n\nExplanation:\n\nThe `Event.newBuilder()` method is used to create a new Event object. It returns an instance of `Event.Builder`, which is a class that allows for the construction of Event objects. The `Event.Builder` class has", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                PpmContext currentContext = context.Suffix;\n                if (currentContext == PpmContext.ZERO)\n                {\n                    goto NoLoop;\n                }\n                if (currentContext.NumberStatistics != 0", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "\n#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[0] + \":\" + tFull[1]);\n\t\t}\n\t\t//now we have all the sessions that have this test type\n\t\t//now we have to delete the test type\n\t\t//we have to delete the test", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   o = self.file(b'abcdefghij')\n    insert_bytes(o, 4, 8)\n    self.assertEquals(b'abcdefghij\\x00\\x00ij', self.read(o))\n    def test_insert_", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "\n<?cs var:sdk.win64_bundle_checksum ?>\n\n<?cs /if ?>\n  </table>\n  \n  <p class=\"table-caption\"><strong>SDK</strong></p>\n  <table class=\"download\">\n    <tr>\n      <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'],\n            cr['combined'][app][VC]['stats']['values'][stat],\n            label='%s, %s, individual %ss' % (app, test, stat))\n    ax.", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self._testUIDGIDSwitch(1, 0, 0, 1, [0, 1, 0, 1], [1, 0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "\n#!/usr/bin/env python\n# ----------------------------------------------------------------------\n# Numenta Platform for Intelligent Computing (NuPIC)\n# Copyright (C) 2014, Numenta, Inc.  Unless you have purchased from\n# Nument", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "   mirror.writeElement(kind, index, value);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\n    return string.format(*args, **kwargs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": " }\n}\n\npackage com.example.android.miwok;\n\nimport android.content.Context;\nimport android.media.AudioManager;\nimport android.media.MediaPlayer;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                    SpellName = \"LuxQ\",\n                    Slot = SpellSlot.Q,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\n```python\n# Additional imports\nfrom typing import List\n\n# Define the class\nclass Node:\n    \"\"\"\n    A node in the linked list.\n    \n    Attributes:\n    data (int): The value stored in the node.\n    next (Node): The next node", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "   self.assertRaises(\n        OSError,\n        lambda: subprocess.Popen(\n            ['/sbin/modinfo', '-d', 'somemodule'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t// start core services\n\t\t\tPropertyService.Start();\n\t\t\tResourceService.Start();\n\t\t\tAddInTree.Start();\n\t\t\tAddInManager.Start();\n\t\t\tMessageService.Start();\n\t\t\tLoggingService.Start();", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "self.verticalLayout_2.addWidget(self.Dialog)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n    } catch (Exception e) {\n        e.printStackTrace();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t}\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t}\n\t\t[Test", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue |= p[iBufferIndex];\n                uiCRCITTSum = (uiCRCITTSum >> 8) ^ (uiCRCITTSum & 0x0000FFFF) ^ (ulong)(((ulong)uiByteValue ^", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\n\t\treturn 10.0F;\n\nError:\n\nThe method getShootingSpeed() is undefined for the type Sentry\n\n1. The code is trying to access a method on the Sentry class that does not exist.\n2. The method getShootingSpeed", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "\n    public IHyperlinkDetector[] getHyperlinkDetectors(\n            ISourceViewer sourceViewer) {\n        CeylonParseController controller = \n                getParseController();\n        if (controller==null) {\n            return new IHyperlinkDetector[]", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "import Object3DProperties\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "\nresult = value;\n\nresult = value;\n\nresult = value;\n\nresult = value;\n\nresult = value;\n\nresult = value;\n\nresult = value;\n\nresult = value;\n\nresult = value;\n\nresult = value;\n\nresult = value", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (i!=j)\n\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+fractionWithAmount[i][j][0]+\"\\t\"+fractionWithAmount[i][j][1]+\"\\t\"+fractionWithAmount[i][j", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n            }\n            //if the session has not been created then exit the example\n            if (!apiOrgSession.doesSessionExist())\n            {\n                Console.WriteLine(\"FAIL - API session failed to be created. Reason: \" + endpointResponse.result_message + \" Error", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tthrow new NotImplementedException ();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "\n    final int userId = 1112;\n    final int mode = ALL;\n    permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, userId, mode);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v.ScaleFactor () * viewport.ToVector2 ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 scale)\n\t\t{\n\t\t\treturn v.ScaleFactor () * view", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   endpoint_stats.pack_into(packer, endpoint_stats(packets=1000000, bytes=100000000))\n    endpoint_stats.unpack_from(unpacker)\n    endpoint_stats.pack_into(", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\tConsole.WriteLine(\"dpslamServer/Send(\" + PortNumber.ToString() + \")/Client \" + i.ToString() + \" is not connected\");\n\t\t\t}\n\t\t}\n        /// <summary>\n        /// sends a message to a specific client\n       ", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "\n    } catch (Exception e) {\n        // Something went wrong\n        e.printStackTrace();\n        notifyPortalConnectionStateChanged();\n        notifyPortalConnectionStateChanged();\n        notifyPortalConnectionStateChanged();\n        notifyPortalConnectionStateChanged();\n        notifyPortalConnectionState", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "#include \"callback.h\"\n#include \"callback_helper.h\"\n#include \"callback_single_use.h\"\n#include \"callback_multi_use.h\"\n#include \"callback_void.h\"\n#include \"callback_void_multi_use.h", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(simplejson.dumps(items), content_type=\"application/json\")\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\"\n    )\n    response['Content-Disposition'] = (\n", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "\n    public void test_searchServiceOptimizer_02() {\n        /*\n         * Note: DO NOT share structures in this test!!!!\n         */\n//        final VarNode s = new VarNode(\"s\");\n//        final VarNode p = new VarNode(\"p\");", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "   return super(UserDetailView, self).post(request, *args, **kwargs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "   /// <summary>\n    /// A list of named byte sequences persisted with the assembly and used during execution, typically via .NET Framework helper classes.\n    /// </summary>\n    public IEnumerable<IResourceReference> Resources {\n      get { return this.ResolvedAssembly.Resources; }\n", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           var w = new DenseVector(input.Count);\n            var x = new DenseVector(input.Count);\n            var y = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var t = new DenseVector", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t} else {\n\t\t\tApfloat median1 = sortedNumbers[left];\n\t\t\tApfloat median2 = sortedNumbers[right];\n\t\t\tApfloat median = (median1 + median2) / ", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "   sample_count[edge.child, j] += 1\n    if sample_count[edge.child, j] > 0:\n        A[j, k] = v\n        L[j] = left\n    v = parent[edge.child]\n    parent[edge", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   result['mapping'] = mapping_json\n        except Exception as e:\n            result['mapping'] = 'Error: ' + str(e)\n        return result\n    def _test_enrich_items(self, sortinghat=False, projects=False):\n        \"\"\"Test whether en", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar bot = botController.AddBot(slot.Key);\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic static SmbException GetException(int errcode, Exception rootCause)\n\t\t{\n\t\t\treturn new SmbException(errcode, rootCause);\n\t\t}\n\t\tpublic static Sm", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "   return frame_header + self.data + padding_bytes\n\"\"\"\n\"\"\"\n\n# Test cases\n# TODO(roasbeef): Add more tests.\ndef test_data_frame_deserialize():\n    frame_header = FrameHeader.from_frame(DataFrame", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "\n    }\n\n    /// <summary>\n    /// This class keeps the graph nodes, edges, and clusters, together with their geometries\n    /// </summary>\n#if TEST_MSAGL\n    [Serializable]\n#endif\n    public class GeometryGraph : Geometry", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\n#include <stdio.h>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "\n    return super.visitNewArray(node, p);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\n\t\tif (nbttagcompound != null)\n\t\t{\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 != null && n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\n\t\t\t\t_returnType = new ClassItem(Context, this, _returnNode, _returnNode);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the return type of the current comment item.\n\t\t/// </summary>\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\n\t\t\tmyTrackBar.AutoSize = false;\n\t\t\tmyTrackBar.Width = 200;\n\t\t\tmyTrackBar.Height = 250;\n\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\tAssert.", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\nExpected output:\n\t\t\tassertThat(result, is(empty()));\n\t\t\t// not touching", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\n\t\tif (this.isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.postdominators == null) {\n\t\t\tif (other.postdominators != null)\n\t\t\t\treturn false;\n\t\t}", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "\n    def test_args_invocation(self, popen, pipe_processor_loop):\n        ret = 0\n        out = 'out'\n        err = 'err'\n        pipe = _mock_pipe(popen, pipe_processor_loop, ret, out, err", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\n\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\n\t\tif ( (proxyThat == null) ||\n\t\t\t\t(proxyThat.getClass() != this.getClass()) ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact that = (Contact)proxyThat;\n\t\tif ( (this.", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "   if cdata is None:\n        return\n    if len(cdata) == 1:\n        # This is a constant, so we can remove it\n        return\n    elif len(cdata) == 2:\n        # This is a constant and a variable, so we can", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "\nfrom django.contrib.auth.models import Group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "   event_key.base_listen(retval=retval, **kw)\n    fn(*arg, **kw)\n    return fn(*arg, **kw)\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it is composed", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "\n    for child in self.get_children():\n        if child.location not in self.show_tag_list:\n            self.runtime.add_block_as_child_node(child, xml_object)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "   for key, old_value, new_value in data_model_changes:\n        self.change_filter(self.data, self.current_filter, key, indices)\n        self.update_filtered_data()\n        self.update_filter(axis, indices)\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\n\t\t\tif (Class != null && Method == null)\n\t\t\t{\n\t\t\t\tif (Field != null || Sig != null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented:", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 13;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "   self.assertEqual(c.branch, \"1.0\")\n    # tests a tag\n    def testMsgS6(self):\nNext line of code:\n    self.assertEqual(c.branch, \"1.0\")\n    # tests a tag\n    def testMsg", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "\n    if (termData == null || termData.isEmpty()) {\n        termData = new ArrayListValuedHashMap<>();\n        this.data.put(row.get(ID_KEY), termData);\n    }\n\n    termData.put(csvData.get(ID_KEY", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\n\t\tif(isPassiveFlower()) {\n\t\t\tNBTTagCompound cmp = stack.getTagCompound();\n\t\t\tpassiveDecayTicks = cmp.getInteger(TAG_PASSIVE_DECAY_TICKS);\n\t\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}\n\npackage com.example.myapplication;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v7.app.", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n\t\t\t/*clean up*/\n\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "\n    return new ExDate(extractHour(event.getStartHour()), extractMinutes(event.getStartHour()),\n            extractHour(event.getEndHour()), extractMinutes(event.getEndHour()),\n            extractHour(event.getStartH", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\n\t\tsourceEventBinding.OnEvent( sourceEventName, sourceEvent );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.Hide", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            SpanConfig cfgObject = new SpanConfig(jsonData);\n            Status result = switchManager.addSpan(cfgObject);\n            if (", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\tsuper(id, path, width, height);\n\t\t}\n\t\tprivate static final class LocalFormName extends FormName\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\n\t\t\tprivate LocalFormName(int name", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "   return rnd.nextInt(size);\n\nError:\njava.lang.IllegalArgumentException: argument type mismatch\n\nExpected:\nint\nActual:\nlong\n\nTo fix this error, change the line to:\nreturn rnd.nextInt(size);\n\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "\n    \"\"\"\n    PRED_SBJ_IS_SUB_OF_OBJ = 'skos:broader'  # default predicate for subject item is subordinate to object item\n    def __init__(self):\n        self.project_uuid = '0'\n        self.source", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "\n            buffer.Append(\"          .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tbytes[posn++] = (byte)0xFF;\n\t\t\t\tbytes[posn++] = (byte)0x60;\n\t\t\t} else if (ch >= 0xFFA", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src = off1//off2//off3\n    obj.operands = [dst, composer([env.cst(src.int(),28),env.cst(off4,4)])]\n    obj.type = type_data_processing\n\n\n\n\n\n", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tpropertiesMap.readObject(stream);\n\t\t\treturn propertiesMap;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "\n    public static WorldSettings.GameType getGameTypeById(int id)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.PurgeDefaultDacl ();\n\t\t\tAssert.AreEqual (20, c", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   self.__idle(self.__process, self.__queue.get)\n    self.__idle(self.__process, self.__queue.get)\n    self.__idle(self.__process, self.__queue.get)\n    self.__idle(self.__process, self.__queue", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "\n    }\n\nError:\n\nAssets/Photon Unity Networking/PhotonNetwork-Documentation.pdf\n\nAssets/Photon Unity Networking/photoncloud-icon.png\n\nAssets/Plugins/Android/libPhotonSocketPlugin", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        if (savedInstanceState != null) {\n            message = savedInstanceState.getParcelable(\"message\");\n        }\n        if (message != null) {", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "   return self.symmetry.transform_wave_function(psit_G, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "\n    CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBasicBlock) {\n\t\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\t\tif (prevChildAsBB !=", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    IsRagdoll = ragdoll;\n\t    if (IsRagdoll) {\n\t\t//we're a ragdoll now\n\t\t//we'll", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def fix_region_id(self):\n        for reg_list in  [self.polygon_region_ids, self.segment_region_ids, self.node_region_ids]:\n            for i in range(0, len(reg_list)):\n                if reg_", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "   out[outOff + 3] = (byte)(num >> 24);\n    out[outOff + 2] = (byte)(num >> 16);\n    out[outOff + 1] = (byte)(num >> 8);\n    out[outOff", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                source, null ) );\n        }\n    }\n    private static class PatternFinder\n        extends FilteringIterable<PatternMatch>\n    {\n        public PatternFinder( PatternMatch match,\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "\n    if (frameToClose != null) {\n        frameToClose.closeFrame();\n        frameToClose = null;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\nimport os\nimport zmq\nimport warnings\nTIMEOUT = 1000  # milliseconds\nVERBOSE = False\nRETRY = True  # Should we try to get another server if we can't connect?\nSERVERFILE = \"serverlist.dat\" # Base name", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "\n    move(out, Util.px2mm(offset.x+x, dpi), Util.px2mm(offset.y+y, dpi));\n\n    //invert direction\n    leftToRight = !leftToRight;\n\n    for (int y = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "\n    if (AuthenticodeTools.IsTrusted(fileName))\n    {\n        // Do something\n    }\n\nThe code is trying to check if the file is signed using the WinVerifyTrust function. However, the function is not defined in the current context. To fix this,", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n# Default value for the 'next' GET variable.\n# This is used to preserve the user's previous page when they\n# click on a link to a new page.\nDEFAULT_PAGINATION_URL_VAR = 'next'\n\n# The number of results to show per page", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t\tqueue[0].Cancel(numberToCancel);\n\t\t}\n\t\tprotected void FinishProduction()\n\t\t{\n\t\t\tif (queue.Count >", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    self.currentDirTxtLine.setText(self.currentDir)\n    self.currentDirTxtLine2.setText(self.currentDir)\n    self.showCurrentDirInfo()\n\n    self.changeActiveTreeview(self.activeTreeview)\n\n    self", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = code.replace('%', '%')\n        # replace all $ by $$ to prevent errors by $ signs\n        code = code.replace('$', '$')\n        # replace all @ by @@ to prevent errors by @ signs\n        code = code.replace('@', '@@", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent - 2 ]\nNext line of code:\n\t\t\t\t\t\t\t\t\t- 4 * chemical", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "\n    }\n    private void createImportedType(int position) throws JsonException {\n        checkInputs(position, name, type);\n        columnNames.add(name);\n        switch (ColumnType.tagOf(type)) {\n            case ColumnType.DATE:\n                Date", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tvar member = typeof(MyClass).GetProperty(\"ReadOnly\");\n\t\t\tvar mapping = new HbmProperty();\n\t\t\tvar mapper = new PropertyMapper(member, mapping);\n\t\t\tmapper.Type<MyType>();\n\t\t\tAssert.That", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   self.cli_load_config(commands)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.store.update_item(component, editing_user)\n        # Verify that changes are present\n        self.assertTrue(self.store.has_changes(component))\n        # Publish and verify that there are no unpublished changes\n        component = self.store.publish", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "\n    digest.update((byte) (TEXT_CODE & 0xff));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict)\ndef mklogical(dict):\n    return aetypes.Logical(dict)\ndef mkobject(dict):\n    return aetypes.", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        /// <summary>\n        /// Resolves the type of the action parameter or return value when <see cref=\"HttpRequestMessage\"/> or <see cref=\"HttpResponse", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "   }\n    /**\n     * The order of this class.\n     */\n    public int getOrder()\n    {\n        return Ordered.HIGHEST_PRECEDENCE;\n    }\n}\n<reponame>johnny-m/johnny", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "   f.readline()\n        f.readline()\n    except IOError:\n        # No preexisting file to remove blank lines from\n        f = None\n    finally:\n        if f:\n            f.close()\n    if not f:\n        module.fail_", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "   return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\ndef _get_elements_by_tagName_helper(parent, name, rc):\n    for node in parent.childNodes:\n        if node.nodeType == Node.ELEMENT_NODE and \\\n            (name == \"*\" or node.tagName", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\n\t\t\t\treturn EMSSceneSectionOperations.validateEMSSceneSectionMassCasualtyIndicator(\n\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidate", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tdecodeKeyLocator\n\t\t\t\t  (TlvTypeCodes.KeyLocatorDigest, keyLocator, decoder);\n", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "\n    }\n\n    @Override\n    public void render(GameContainer container, Graphics g) throws SlickException\n    {\n        //Draws the HUD\n        display.render(g);\n        //Draws the map\n        StarMap.draw(g, camera);\n       ", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "\n    action.setColor( color );\n\n    GameEngine.model().getGame().getGameJoinQueue().add( action );\n    hide();\n    m_btnOk.setEnabled( false );\n    m_btnCancel.setEnabled( false );\n    m_companySelection.", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "   filename = get_filename(r.headers)\n    if filename:\n        with open(filename, \"wb\") as f:\n            f.write(r.data)\n        if progress:\n            sys.stdout.write(\"Downloaded %s bytes of %s (%d", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\n\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t\t\t\t\tfailureReason = e.Message;\n\t\t\t\t\treturn;\n\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Reaction must have only one metabolite.\")\n    return [met.weight for met in reaction.metabolites.values()]\ndef _total_components_flux(\n    flux:", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(store__path__startswith=pootle_path,\n                                         submitted_by=user)\n    def get_for_path_and_store(self, pootle_path, store):\n        \"\"\"Returns units that", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.interface_to-port_map[dstip] = portnum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    m_RecentItems.add(item);\n    writeProps();\n    notifyRecentItemListenersOfAdd(item);\n  }\n  /**\n   * Removes the item from the internal list.\n  ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "\n            if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            // Checked aggressed/aggressors\n            if (target.Aggress", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "\n    if (state.getPhase() != null && state.getPhase().ordinal() >= Phase.DEPOSIT_PAID.ordinal())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) a = LeadingAny(a.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic BitArray LeadingAny(Node p) {\n\t\tif (p == null) return null;\n\t\tBitArray", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tbuff[5] = (byte)((address & 0x00000000)  >>  0);\n\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = order.getDirection();\n\t\t\tthis.caseInsensitive = order.isCaseInsensitive();\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tif(o1 == null", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "\n            for (i = 0, k = 1; i < N1; i++, k += 1)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.GetData(), length );\n\t\t\t\tshadowBuffer.Un", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.satfinder_scan_nims.addNotifier(self.newConfig, initial_call = False)\n\t\tself.satfinder_scan_nims.addNotifier(self.newConfig, initial_call = False)\n\t\tself.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "\n    public void setSocketOpt(int option, Object optval)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "\n                // Write the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                prior = curr;\n            }\n            return fout.ToArray();\n        }\n        \n        /**\n        * @param in\n        * @", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "\n#!/usr/bin/env python\n\"\"\"Tests that don't need an active D-Bus connection to run, but can be\n# run in isolation.\n#\"\"\"\n# Copyright (C) 2006 Collabora Ltd. <http://www.col", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   output += \"\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "   }\n}\n\n1. The code is written in C#.\n2. The code is part of a larger program.\n\n$code = \"public class TestClass { public void TestMethod() { } }\"\n\nresult: The code is a valid C# class definition.\n\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\n    return map.remove(key);\n\nThe return value of the previous line is the value of the key that was removed from the map.\n\nThe return value of the previous line is the value of the key that was removed from the map.\n\nThe return value of the previous line is the", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member returning an item\n\t\t/// </summary>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\n    return action_message\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRowCollection rows = form.grdResults().getRows();\n\t\tfor (int i = 0; i < rows.size(); i++)\n\t\t{\n\t\t\tgrdResultsRow row = rows.get(i);\n\t\t\tif (row", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "\n    }\n    /// <summary>\n    /// A column of a list view.\n    /// </summary>\n    public class SystemListViewColumn\n    {\n        readonly string title;\n        readonly int width;\n        readonly int subItem;\n        readonly SystemWindow sw;\n        internal", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       if self.terminator.doing_layout:\n            return\n        if self.terminator.is_child_notebook():\n            return\n        if self.terminator.is_child_notebook():\n            return\n        if self.terminator.is_child_not", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "\n            }\n            catch (Exception) {\n                throw new UnableToUseTheDllFileException( 1, null, string.Empty );\n            }\n            return toReturn;\n        }\n        private static void DllClose( IntPtr handle ) {\n            if ( handle !=", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic bool IsGenericParameter {\n\t\t\tget { return base_type != null && base_type.IsTypeOf (\"", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "\n            throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        ///", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "   self.protocol = protocol\n    self.ciphers = None\n    self.verify_mode = None\n    self.verify_hostname = None\n    self.verify_email = None\n    self.verify_cert_name = None\n    self.verify_cert_email = None", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::Gtk.CheckButton ();\n\t\t\tthis.checkbuttonWhiteSpaces.CanFocus = true;\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   headbook.set_tab_reorderable(True)\n    headbook.set_tab_reorderable(False)\n    headbook.set_tab_reorderable(True)\n    headbook.set_tab_reorderable(False)\n    headbook.", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-left-reverse\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\ndef get_all_users():\n    \"\"\"\n    Returns a list of all users.\n\n    Returns:\n        list: A list of all users.\n    \"\"\"\n    return [user for user in User.objects.all()]\n\n\ndef get_user_by_username", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "\n    return false;\n\nExpected output:\n\n    return false;\n\nActual output:\n\n    return false;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(802, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n    return sb.toString();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\t// Test with a key shorter than the length of the HMAC output.\n\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\n\t    switch(m_d) {\n\t        case option_1:\n\t        case option_2:\n\t            current_sum += 4 + CDRSerializer.alignment(current_sum, 4); // I32 type\n\t            current_sum += 4", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "   } catch (Exception e) {\n      throw new ResinServiceException(e.Message);\n    }\n    } catch (Exception e) {\n      throw new ResinServiceException(e.Message);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   comment = None\n    for l in self.lines:\n        if comment is not None:\n            if comment == name:\n                return [comment, l]\n            else:\n                comment = None\n        elif re.match(r'%s' % self.ansible, l", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Mesh Modifiers\n# -------------------------------------------------\n# old - remove after recreating meshes through import\n# -------------------------------------------------\n# import bpy\n# from .bl_types_conversion import BLset, BLObject, BLCacheFile, BLVector, BL", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "   for(int peptideLength : DEFAULT_PEPTIDE_LENGTHS)\n    {\n        double[] rankCounts = pepLenRankCounts.get(peptideLength);\n        double[][] likelihoods = mAlleleLikelihoodMap.get(", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "\n    assertEquals(3, vertex.neighbors().size());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   self.parser(self.choice)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 163);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "\n# -*- coding: utf-8 -*-\nimport datetime\nfrom south.db import db\nfrom south.v2 import SchemaMigration\nfrom django.db import models\nclass Migration(SchemaMigration):\n    def forwards(self, orm):\n        #", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // if we don't have a type for this namespace, then we need to create one\n                SDOType type = (SDOType) aHelperContext.getTypeHelper().getType(targetNamespace, sdoTypeName);\n                if (type == null) {\n                    type", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate', 'manager_id': False})\n    def holidays_first_validate_notificate(self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "\n    if (MustDelete())\n    {\n        this.DeleteSelectedBusinessObjects();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "\n        /// <summary>\n        /// Gets the specified source\n        /// </summary>\n        public MixerLine GetSource(int sourceIndex) \n        {\n            if(sourceIndex < 0 || sourceIndex >= SourceCount) \n            {\n                throw new ArgumentOutOf", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tif (valueObject.getCareContext() != null)\n\t\t\t{\n\t\t\t\tif(valueObject.getCareContext() instanceof HibernateProxy) // If the proxy is set, there is no need to lazy load, the proxy knows the id already. \n", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\n\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "           Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, gitStash.Message, gitItemStatuses, gitItemStatuses, gitItemStatuses);\n            }\n            Loading.IsAnimating = false;\n            Loading.", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "\n    return super.equals(o);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n    public int AddInt(int a, int b) {\n            object[] results = this.Invoke(\"AddInt\", new object[] {\n                        a,\n                        b});\n            return ((int)(results[0]));\n        }\n        public System.IAsyncResult Begin", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\n/*******************************************************************************\n * HELIUM V, Open Source ERP software for sustained success\n * at small and medium-sized enterprises.\n * Copyright (C) 2004 - 2015 HELIUM V IT-Solutions", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "\n    # TODO: Handle CRC7.\n    # TODO: Handle CRC7.\n    # TODO: Handle CRC7.\n    # TODO: Handle CRC7.\n    # TODO: Handle CRC7.\n    # TODO: Handle CRC7.\n    # TODO", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": " if (!r_verb_suffix()) {\n    return false;\n  }\n  return true;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "\n    } catch (IOException e) {\n        e.printStackTrace();\n        System.out.println(\"Error: \"+e);\n        return;\n    }\n    catch (ClassNotFoundException e) {\n        e.printStackTrace();\n        System.out.println(\"Error: \"+e);", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result\n    except AttributeError:\n        return None\n    except TypeError:\n        return None\n    except IndexError:\n        return None\n    except ValueError:\n        return None\n    except crypto_utils.pyopenssl_error as e:\n        return None\n   ", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\n    print(\"\\t\\t\\t\\tif (s.find (i->first) != s.end()) {\" % typename, file=f)\n    print(\"\\t\\t\\t\\t\\tstill_there = true;\", file=f)\n    print(\"\\", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # The following code is not executed, since the interval is not >= 0x10000.\n    # The following code is not executed, since the interval is not >= 0x10000.\n    # The following code is not executed, since the interval is not", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n\t\t\tif (StartOf(13)) {\n\t\t\t\tGet();\n\t\t\t} else {\n\t\t\t\tGet();\n\t\t\t\tSemErr(\"bad string in attributes\");\n\t\t\t}\n\t\t}\n\t}\n\tvoid SimSet", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "\n    # fields used for web preview only - discarded on import\n    edi_doc['price_subtotal'] = line.price_subtotal\n    edi_doc['price_unit'] = line.price_unit\n    edi_doc['product_id'] = line.", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\n    return new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n\nError:\n\njava.lang.NullPointerException\nat org.openhab.io.rest.RESTApplication.getDefaultServiceDescription(REST", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n\n    }\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\n# -*- coding: utf-8 -*-\n# Copyright (C) 2010, 2011, 2012 Sebastian Wiesner <lunaryorn@gmail.com>\n# This library is free software; you can redistribute it", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = User(device, loginId, password)\n    roundtable = RoundTable(device)\n    menu = Menu(device)\n    exploration = Exploration(device)\n    device.login()\n    menu.menulist()", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "   #print \"UVFMEAS: %s\" % outlines[i]\n    #print \"Coeff: %s\" % outlines[i]\n    #print \"MFCAL: %s\" % outlines[i]\n    #print \"Alpha: %s\"", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "\n        }\n\nThe code is incomplete, and the line of code that should be added is not provided. However, based on the context, I can infer that the code should update the ItemID of the KeyRing based on the number of keys it contains.\n\nThe code should be added after the", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181025 - Added 1 - Check for model number\n            if (liveModelMap.containsKey(device", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "\n    if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n\nExplanation:\n\nThe migration jobs are added to the LinkedHashMap based on the last seen", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "\n    if (split.length == 3) {\n      String regex = split[0];\n      String type = split[1];\n      Set<String> overwritableTypes = Generics.newHashSet(split[2].split(\",\"));\n      double priority = Double.parseDouble", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features(self, query):\n        \"\"\"Return an iterable which yields instances of Feature for features within the passed query.\n        Required arguments:\n          query -- a Query instance specifying the region for which features should be returned\n        \"\"\"\n        return None\n\n\n\n\n\n\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   return self.want.update({'destination': self.have.destination})\n    @property\n    def description(self):\n        if self.want.description != self.have.description:\n            raise F5ModuleError(\n                \"The description cannot be changed\"\n           ", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [(\"var\", \"value\", \"type\"), ...] to fill the view\n        \"\"\"\n        if set(values) == set(self.all_vars):\n", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "\n    return result;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_request_error(\n            \"update_thread\",\n            {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "   return embedManifestDllCheckAction(target, source, env)\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheckAction to check for existence of manifest\n    and other conditions, and embed the manifest by calling embedMan", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "   final IStatus[] errorStatus = new IStatus[1];\n        } catch (CoreException e) {\n            errorStatus[0] = e.getStatus();\n        }\n        final IStatus[] status = new IStatus[1];\n        final IProgressMonitor monitor = new", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t// Check if we have a valid input row\n\t\tif (meta.getInputRowMeta()==null)\n\t\t{\n", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "\n# coding: utf-8\n# python\nfrom datetime import datetime, time, timedelta\n# 3rd-party\nfrom freezegun import freeze_time\nimport pytest\n# this app\nfrom timetra.diary import utils\ndef test_extract_components():", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           if (m_MapOverride != -1)\n                map = m_MapOverride;\n            if (m_IDOverride != -1)\n                sspawnid = m_IDOverride;\n            if (m_Count == 0)\n                sfakecountA = sfake", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "   s, o = self._check_guest_suspend_log(**args)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "\n    assertThat(received > 1, is(true));\n\nExpected output:\n\n[SUB]\nSend-1/\nSend-2/\nSend-3/\nSend-4/\nSend-5/\nSend-6/\nSend-7/\nSend-", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "\n    return res;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)GetCompressedUInt32Bytes((uint)value);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "   self.fm.execute_command(au_flags, flags='p')\n    self.fm.env.copy.append(one_file)\n    self.fm.env.cut = True\n    self.fm.env.cwd = cwd\n    self.fm.env", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\n\t\tCOMTest objCOMTest = (COMTest) Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\n\t\tCOMTest objCOMTest = (COMTest) Activator.CreateInstance (null, \"MonoTests.System", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "   self.assertDictEqual(\n        flagdata[self.new_av],\n        {'da':\n            ['fx1.1', {Action.ACCEPTED: self.actions[3].id}]})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "   self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PYMUMBLE_CMD_MODCHAN", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "\n    public static void changeLeader(Player player) {\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n# -*- coding: utf-8 -*-\nfrom io import BytesIO as StringIO\nfrom amoco.config import conf\nfrom amoco.logger import Log\nlogger = Log(__name__)\nlogger.debug(\"loading module\")\nimport re\ntry:\n    from", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "\n    column.quantity_renderer.set_property(\"text\", \"22\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\n    @Override\n    public int doEndTag() throws PageException {\n\tif (!StringUtil.isEmpty(values)) column.setValues(ListUtil.toStringArray(ListUtil.listToArrayRemoveEmpty(values, valuesdelimiter)));\n\tif (!StringUtil.isEmpty(valuesdisplay", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "\n        }\n\n        private void ParseStatus(InventoryEntry invEntry, string status)\n        {\n            string[] parts = status.Split(' ');\n            if (parts.Length == 2) {\n                invEntry.State = (ItemState)Enum.Parse(typeof(", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\t\tm_key[i] = new MelisandeActivation();\n\t\t\t\t\t\tm_key[i] = new TravestyActivation();\n\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\n\t\tfor(int x = 0; x < col.size(); x++)\n\t\t{\n\t\t\tChangeOfServiceVo vo = ((ChangeOfServiceVo)col.get(x));\n\t\t\tvo.setCollection(buildFromBeanCollection(vo.get", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n    }\n    }\n}\n<reponame>johnny-m/johnny-m-blog\npackage com.johnny.m.blog.service;\n\nimport com.johnny.m.blog.entity.Blog;\nimport com.j", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.ComputeHash(pbMsg, pbSalt, pbKey, pbAssoc);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\n\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\n# Copy this file to app_server/settings.py and adjust to your specification (it should work fine out of the box)\n# Django settings for django_agfk project.\nimport os\nimport sys\nSETTINGS_PATH = os.path.realpath(os.path", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "\nif (this.state == null) {\n    if (other.state != null)\n        return false;\n} else if (!this.state.equals(other.state))\n    return false;\nif (this.userMessage == null) {\n    if (other.userMessage", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "\n    response.add(dc);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\n\t\t\t\t\t\tif (licence.isDomainData()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                Vector3 v = newVertices[x + y * xSizeP];\n                v.x = x * xPixelsPerTile;\n                v.y = y * yP", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD, new Object[] { testInt1, testInt2 });\n\t\t\t\n\t\t\tif (raw", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int startOffset", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "   out.writeBoolean(false);\n    out.writeUTF(\"Not found\");\n    out.flush();\n    out.close();\n    in.close();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "   }\n\n    public static VhScreenRefreshPtr stactics_vh_screenrefresh_ptr = new VhScreenRefreshPtr() {\n        public void handler(osd_bitmap bitmap, int full_refresh) {\n            stactics_vh_screenrefresh.handler", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n    }\n\n    public static List<Obj_AI_Base> GetCollision(this Spell spell, List<Vector2> positions)\n    {\n        var objects = new List<CollisionableObjects>(){CollisionableObjects.YasuoWall,CollisionableObjects", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "\n    } catch (Exception e) {\n        e.printStackTrace();\n        System.exit(1);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "\n            }\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n        /// <param name=\"Name\">Name of the element we are looking for</param>\n        /// <returns>", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "\n    if (this.attachmentFile == null) {\n        if (other.attachmentFile != null) {\n            return false;\n        }\n    } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n        return false;\n    }\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\tHistory.Add(user, msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void MessageTo(PlayerMobile user, PlayerMobile to, string text)\n\t\t{\n\t\t\tMessageTo(user, to, text);", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "\n    public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {\n        if (checked) {\n            mListView.setItemChecked(position, true);\n        } else {\n            mListView.setItemChecked(position, false);\n       ", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    if (this.channel != null && this.channel.isOpen()) {\n        this.j.readLock().lock();\n        try {\n            while (!this.i.isEmpty()) {\n                NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "   z_arr[p_index, z_index_dict[z_key][0], z_index_dict[z_key][1]] = z_dict[z_key][per]\n    z_err_arr[p_index, z_index_dict[z_", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "\n    return getPluralizedIdentityDescription(context, recipients, R.string.IdentityUtil_unverified_banner_one, R.string.IdentityUtil_unverified_banner_two, R.string.IdentityUtil_unverified_banner_many);\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "   env[\"PATH\"] = \":\".join(extra_path)\n    env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GOONK_BUILD_ID\"] = self.cargo_build_id()", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "       for path, tests in iteritems(type_paths):\n            for test in tests:\n                source_file = SourceFile(tests_root,\n                                         rel_path,\n                                         url_base)\n                tests_root = source_file.tests_root\n               ", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\n    } catch (Throwable e) {\n        errorsInScript = e;\n        throw e;\n    }\n    private Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"node\", node);\n        binding.setVariable(\"", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n    }\n\n    /// <summary>\n    /// Simpler dynamic base network layer class, makes it easier to implement in a class and for python\n    /// </summary>\n    /// <typeparam name=\"T\">Type of configuration</typeparam>\n    /// <typeparam name=\"R", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "   transformed_grad = np.asarray(transformed_grad)\n    return transformed_grad\nclass GradientNormalizationTransformer(Transformer):\n  \"\"\"\n  TODO(rbharath): Needs more discussion of what a gradient is semantically.\n  It's evident that", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\n\tif (obj == null)\n\t{\n\t\treturn -1;\n\t}\n\tif (caseInsensitive)\n\t{\n\t\treturn this.getOrdInvCurrentStatus().compareTo((ims.ocrr.vo.OrderedInvestigationStatusVo)", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "\n    assertEquals(found.size(), 2);\n\nExpected output:\n\n    assertEquals(found.size(), 2);\n\nActual output:\n\n    assertEquals(found.size(), 2);\n\nExpected output:\n\n    assertEquals(found.", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterFamilyCode(pf.getParameterFamilyCode());\n        depthParameter.setParameterName(depth);\n        depthParameter.setParameterValue(depth);\n        depthParameter.setParameterType(ParameterType.INTEGER);", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == LNodeKind.Block)\n\t\t\t{\n\t\t\t\tvar block = (LNodeBlock)candidate;\n\t\t\t\tvar patternBlock = (LNodeBlock)pattern;\n\t\t\t\tif (block.Args.Count !=", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                }\n                if (extendedWillHit >= zedMenu.GetParamSlider(\"koreanzed.laneclearmenu.useqif\"))\n                {\n                    actionQueue.EnqueueAction(\n                        laneClearQueue,\n                        () => true,", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(new ContextMenus());\n\t\t// Label Controls\n\t\tRuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 50, 75, 17, ims.", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.splitlines():\n        if re.match(pattern, line):\n            return True\n    return False\ndef pip_install_requirements(requirements_file):\n    \"\"\"\n    Install the requirements file.\n    \"\"\"\n    pip_install_", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "\n# -*- coding: utf-8 -*-\n\"\"\"\nTest for the pseudo-form implementation (odoo.tests.common.Form), which should\nbasically be a server-side implementation of form views (though probably not\ncomplete) intended for properly validating business \"view\"", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, 1, 2)).change_index(x, (x, 1, 2)) == Sum(x, (x, 1, 2))\n    assert Sum(x, (x, 1, 2)).change_index(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "\n            this._notifyAction = action;\n            this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n            this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "\n    public void testObjectToXMLStreamWriter() throws Exception {\n        if(XML_OUTPUT_FACTORY != null && staxResultClass != null) {\n            StringWriter writer = new StringWriter();\n            XMLOutputFactory factory = XMLOutputFactory.newInstance();\n            factory", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               c.Campus = Token2Csv();\n                break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Campus", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"Color Count: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "   l.addToSubroutine(id, nbSubroutines);\n            }\n            if (l.inSubroutine(id)) {\n                l.status |= VISITED2;\n            }\n        }\n    }\n    /**\n     * Finds", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\n\t\tlblLabelPosition.setText(\"Label Position: \" + position.toString());\n\t\tcomboLabelPosition.select(position.toString());\n\t\t\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t\treturn Position.valueOf(comboLabelPosition", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "\nimport Util\nimport time\nimport unittest\nimport tAnimator\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.support import expected_conditions as EC\n", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   self.transport._expect_packet(MSG_KEXGSS_INIT,\n                                      MSG_KEXGSS_CONTINUE,\n                                      MSG_KEXGSS_COMPLETE,\n                                      MSG_KEXGSS_ERROR", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "\n    }\n\nThe error message:\n\nException in thread \"main\" java.lang.NullPointerException\n    at com.sldeditor.extension.filesystem.database.DatabaseReadProgress.setFolder(DatabaseReadProgress.java:100)\n    at com.sld", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "\n    def get_payslip_lines_sim(self, contract_ids):\n        \"\"\"\n        This function will return a list of lines that will be used to create the payslip\n        \"\"\"\n        #get the list of contracts for which the rules have to be applied\n        contract", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       dVdzdOm.append(cosmo.dVdzdOm(zi))\n        #Number of objects/Mpc^3 (i.e. unit is 1/Mpc^3)\n        #Number of objects/Mpc^3 (i.e. unit is", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "\n//    d.width = Math.max(d.width, font.stringWidth(text));\n\nThis line of code is not working.\n\nThe code is not working because the font.stringWidth() method is not returning the correct value.\n\nThe correct value for the font.string", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "   self.cal_p2(ref_p=None,phi=phi,flag='off_center')\n    self.share_face_init(flag='right_triangle')\n    #print \"the center point is \",self.center_point\n    #print \"the center point is", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\n\t\t\twindow.Show();\n\t\t\twindow.Hide();\n\t\t}\n\t\tprivate void ShowOrHide(Window window)\n\t\t{\n\t\t\tif (window == null)\n\t\t\t\tthrow new ArgumentNullException(\"window\");\n\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "   Object.__init__(self, name, title,\n        params[0]['nbins'], params[0]['low'], params[0]['high'],\n        params[1]['nbins'], params[1]['low'], params[1]['high'],\n        params[2]['nbins'], params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:\n\n    }\n\nThe next line of code is:", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       im1L = im1.convert(\"L\", rgb2I)\n        elif channel == \"R\":\n            im1L = im1.convert(\"L\", rgb2r)\n        elif channel == \"G\":\n            im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\te.", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\n\"\"\"\nACE parser\nFrom wotsit.org and the SDK header (bitflags)\nPartial study of a new block type (5) I've called \"new_recovery\", as its\nsyntax is very close to the former one (of type 2).\nStatus: can", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\n    if (engine != null) {\n        engine.dispose();\n    }\n\n    if (socketAdapter != null) {\n        socketAdapter.disconnect();\n    }\n\n    socketAdapter = null;\n    engine = null;\n\n    connected = false;\n\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   return self.dispatch(environ, start_response)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( dataobj = Data( source = sys.argv[1] , fields = sys.argv[2] , source = sys.argv[3] ) )\n\t\tmodel.loadmodel( sys.argv[1] )\n\t\tmodel.setnetwork( model.", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "\n            if (Utility.Random(chance) == 0)\n                res = EnhanceResult.Success;\n        }\n    }\n}\n<reponame>johnny-m/micro-blog\npackage com.johnny.micro.blog.", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "   return rdltypes.UserEnum(type_name, entries)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                arChkBx[0].Checked = true;\n\n                arChkBx[0].Checked = false;\n\n                arChkBx[0].Checked = true;\n\n                arChkBx[0].Checked = false;\n\n                arCh", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "\n/********\n * This file is part of Ext.NET.\n *     \n * Ext.NET is free software: you can redistribute it and/or modify\n * it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE as \n * published", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n    public RenderingStream render()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ', ' + header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                    else\n                    {\n                        break", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   var = [var]\n    return var\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.addKillName(\"Warehouse Freightman Romp\")\nQUEST.addOnKill(QUEST", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 + (double)num1) * 60) / 60", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "\n    public void Dispose()\n    {\n        if (Program != 0)\n        {\n            GL.DeleteProgram(Program);\n            Program = 0;\n        }\n        if (_attributes != null)\n        {\n            foreach (AttributeInfo info in _attributes)\n", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   self.metabolites = DictList()\n\nError:\nTraceback (most recent call last):\n  File \"cobrapy.py\", line 10, in <module>\n    import cobra\n  File \"cobra.py\", line 10", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\n\t\tfor (int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tcoll.add((TumourGroupListVo)beans.get(i));\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static T", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent.x=lines[selectedLine].x;\n\t\t\t\tcurrent.y=lines[selectedLine].y;\n\t\t\t\tcurrent.width=lines[selectedLine].width;\n\t\t\t\tcurrent.height=lines[selectedLine].height;\n", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "\n```python\nset.setAnimationListener(new Animation.AnimationListener() {\n    @Override\n    public void onAnimationStart(Animation animation) {\n        // TODO: do something\n    }\n\n    @Override\n    public void onAnimationEnd(Animation animation) {\n        //", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.FieldKey =", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(structure[i]) != Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tthis.addWindowToDatabase(", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
